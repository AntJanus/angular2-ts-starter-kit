/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	__webpack_require__(1);
	__webpack_require__(82);
	var platform_browser_dynamic_1 = __webpack_require__(84);
	var app_module_1 = __webpack_require__(106);
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	__webpack_require__(72);
	__webpack_require__(73);
	__webpack_require__(74);
	__webpack_require__(77);
	__webpack_require__(78);
	__webpack_require__(79);
	__webpack_require__(80);
	__webpack_require__(81);
	module.exports = __webpack_require__(37).Reflect;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(3)
	  , anObject                  = __webpack_require__(7)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
	  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
	}});

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var Map     = __webpack_require__(4)
	  , $export = __webpack_require__(50)
	  , shared  = __webpack_require__(29)('metadata')
	  , store   = shared.store || (shared.store = new (__webpack_require__(64)));

	var getOrCreateMetadataMap = function(target, targetKey, create){
	  var targetMetadata = store.get(target);
	  if(!targetMetadata){
	    if(!create)return undefined;
	    store.set(target, targetMetadata = new Map);
	  }
	  var keyMetadata = targetMetadata.get(targetKey);
	  if(!keyMetadata){
	    if(!create)return undefined;
	    targetMetadata.set(targetKey, keyMetadata = new Map);
	  } return keyMetadata;
	};
	var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
	};
	var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
	  var metadataMap = getOrCreateMetadataMap(O, P, false);
	  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
	};
	var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
	  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
	};
	var ordinaryOwnMetadataKeys = function(target, targetKey){
	  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
	    , keys        = [];
	  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
	  return keys;
	};
	var toMetaKey = function(it){
	  return it === undefined || typeof it == 'symbol' ? it : String(it);
	};
	var exp = function(O){
	  $export($export.S, 'Reflect', O);
	};

	module.exports = {
	  store: store,
	  map: getOrCreateMetadataMap,
	  has: ordinaryHasOwnMetadata,
	  get: ordinaryGetOwnMetadata,
	  set: ordinaryDefineOwnMetadata,
	  keys: ordinaryOwnMetadataKeys,
	  key: toMetaKey,
	  exp: exp
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(5);

	// 23.1 Map Objects
	module.exports = __webpack_require__(58)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var dP          = __webpack_require__(6).f
	  , create      = __webpack_require__(15)
	  , redefineAll = __webpack_require__(33)
	  , ctx         = __webpack_require__(38)
	  , anInstance  = __webpack_require__(40)
	  , defined     = __webpack_require__(23)
	  , forOf       = __webpack_require__(41)
	  , $iterDefine = __webpack_require__(48)
	  , step        = __webpack_require__(55)
	  , setSpecies  = __webpack_require__(56)
	  , DESCRIPTORS = __webpack_require__(10)
	  , fastKey     = __webpack_require__(57).fastKey
	  , SIZE        = DESCRIPTORS ? '_s' : 'size';

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = create(null); // index
	      that._f = undefined;    // first entry
	      that._l = undefined;    // last entry
	      that[SIZE] = 0;         // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        anInstance(this, C, 'forEach');
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)dP(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(7)
	  , IE8_DOM_DEFINE = __webpack_require__(9)
	  , toPrimitive    = __webpack_require__(14)
	  , dP             = Object.defineProperty;

	exports.f = __webpack_require__(10) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(8);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(10) && !__webpack_require__(11)(function(){
	  return Object.defineProperty(__webpack_require__(12)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(11)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 11 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(8)
	  , document = __webpack_require__(13).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(8);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(7)
	  , dPs         = __webpack_require__(16)
	  , enumBugKeys = __webpack_require__(31)
	  , IE_PROTO    = __webpack_require__(28)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(12)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(32).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};

	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(6)
	  , anObject = __webpack_require__(7)
	  , getKeys  = __webpack_require__(17);

	module.exports = __webpack_require__(10) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(18)
	  , enumBugKeys = __webpack_require__(31);

	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(19)
	  , toIObject    = __webpack_require__(20)
	  , arrayIndexOf = __webpack_require__(24)(false)
	  , IE_PROTO     = __webpack_require__(28)('IE_PROTO');

	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(21)
	  , defined = __webpack_require__(23);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(22);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 22 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 23 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(20)
	  , toLength  = __webpack_require__(25)
	  , toIndex   = __webpack_require__(27);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(26)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 26 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(26)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(29)('keys')
	  , uid    = __webpack_require__(30);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(13)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(13).document && document.documentElement;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(34);
	module.exports = function(target, src, safe){
	  for(var key in src)redefine(target, key, src[key], safe);
	  return target;
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(13)
	  , hide      = __webpack_require__(35)
	  , has       = __webpack_require__(19)
	  , SRC       = __webpack_require__(30)('src')
	  , TO_STRING = 'toString'
	  , $toString = Function[TO_STRING]
	  , TPL       = ('' + $toString).split(TO_STRING);

	__webpack_require__(37).inspectSource = function(it){
	  return $toString.call(it);
	};

	(module.exports = function(O, key, val, safe){
	  var isFunction = typeof val == 'function';
	  if(isFunction)has(val, 'name') || hide(val, 'name', key);
	  if(O[key] === val)return;
	  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
	  if(O === global){
	    O[key] = val;
	  } else {
	    if(!safe){
	      delete O[key];
	      hide(O, key, val);
	    } else {
	      if(O[key])O[key] = val;
	      else hide(O, key, val);
	    }
	  }
	// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
	})(Function.prototype, TO_STRING, function toString(){
	  return typeof this == 'function' && this[SRC] || $toString.call(this);
	});

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(6)
	  , createDesc = __webpack_require__(36);
	module.exports = __webpack_require__(10) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 36 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 37 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(39);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(38)
	  , call        = __webpack_require__(42)
	  , isArrayIter = __webpack_require__(43)
	  , anObject    = __webpack_require__(7)
	  , toLength    = __webpack_require__(25)
	  , getIterFn   = __webpack_require__(46)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(7);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(44)
	  , ITERATOR   = __webpack_require__(45)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(29)('wks')
	  , uid        = __webpack_require__(30)
	  , Symbol     = __webpack_require__(13).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};

	$exports.store = store;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(47)
	  , ITERATOR  = __webpack_require__(45)('iterator')
	  , Iterators = __webpack_require__(44);
	module.exports = __webpack_require__(37).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(22)
	  , TAG = __webpack_require__(45)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(49)
	  , $export        = __webpack_require__(50)
	  , redefine       = __webpack_require__(34)
	  , hide           = __webpack_require__(35)
	  , has            = __webpack_require__(19)
	  , Iterators      = __webpack_require__(44)
	  , $iterCreate    = __webpack_require__(51)
	  , setToStringTag = __webpack_require__(52)
	  , getPrototypeOf = __webpack_require__(53)
	  , ITERATOR       = __webpack_require__(45)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = false;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(13)
	  , core      = __webpack_require__(37)
	  , hide      = __webpack_require__(35)
	  , redefine  = __webpack_require__(34)
	  , ctx       = __webpack_require__(38)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
	    , key, own, out, exp;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    // export native or passed
	    out = (own ? target : source)[key];
	    // bind timers to global for call from export context
	    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // extend global
	    if(target)redefine(target, key, out, type & $export.U);
	    // export
	    if(exports[key] != out)hide(exports, key, exp);
	    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
	  }
	};
	global.core = core;
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(15)
	  , descriptor     = __webpack_require__(36)
	  , setToStringTag = __webpack_require__(52)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(35)(IteratorPrototype, __webpack_require__(45)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(6).f
	  , has = __webpack_require__(19)
	  , TAG = __webpack_require__(45)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(19)
	  , toObject    = __webpack_require__(54)
	  , IE_PROTO    = __webpack_require__(28)('IE_PROTO')
	  , ObjectProto = Object.prototype;

	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(23);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(13)
	  , dP          = __webpack_require__(6)
	  , DESCRIPTORS = __webpack_require__(10)
	  , SPECIES     = __webpack_require__(45)('species');

	module.exports = function(KEY){
	  var C = global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(30)('meta')
	  , isObject = __webpack_require__(8)
	  , has      = __webpack_require__(19)
	  , setDesc  = __webpack_require__(6).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(11)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global            = __webpack_require__(13)
	  , $export           = __webpack_require__(50)
	  , redefine          = __webpack_require__(34)
	  , redefineAll       = __webpack_require__(33)
	  , meta              = __webpack_require__(57)
	  , forOf             = __webpack_require__(41)
	  , anInstance        = __webpack_require__(40)
	  , isObject          = __webpack_require__(8)
	  , fails             = __webpack_require__(11)
	  , $iterDetect       = __webpack_require__(59)
	  , setToStringTag    = __webpack_require__(52)
	  , inheritIfRequired = __webpack_require__(60);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  var fixMethod = function(KEY){
	    var fn = proto[KEY];
	    redefine(proto, KEY,
	      KEY == 'delete' ? function(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'has' ? function has(a){
	        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'get' ? function get(a){
	        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
	      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
	        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
	    );
	  };
	  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	    meta.NEED = true;
	  } else {
	    var instance             = new C
	      // early implementations not supports chaining
	      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
	      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
	      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
	      // most early implementations doesn't supports iterables, most modern - not close it correctly
	      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
	      // for early implementations -0 and +0 not the same
	      , BUGGY_ZERO = !IS_WEAK && fails(function(){
	        // V8 ~ Chromium 42- fails only with 5+ elements
	        var $instance = new C()
	          , index     = 5;
	        while(index--)$instance[ADDER](index, index);
	        return !$instance.has(-0);
	      });
	    if(!ACCEPT_ITERABLES){ 
	      C = wrapper(function(target, iterable){
	        anInstance(target, C, NAME);
	        var that = inheritIfRequired(new Base, target, C);
	        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	        return that;
	      });
	      C.prototype = proto;
	      proto.constructor = C;
	    }
	    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
	      fixMethod('delete');
	      fixMethod('has');
	      IS_MAP && fixMethod('get');
	    }
	    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
	    // weak collections should not contains .clear method
	    if(IS_WEAK && proto.clear)delete proto.clear;
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F * (C != Base), O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(45)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var isObject       = __webpack_require__(8)
	  , setPrototypeOf = __webpack_require__(61).set;
	module.exports = function(that, target, C){
	  var P, S = target.constructor;
	  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
	    setPrototypeOf(that, P);
	  } return that;
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(8)
	  , anObject = __webpack_require__(7);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(38)(Function.call, __webpack_require__(62).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(63)
	  , createDesc     = __webpack_require__(36)
	  , toIObject      = __webpack_require__(20)
	  , toPrimitive    = __webpack_require__(14)
	  , has            = __webpack_require__(19)
	  , IE8_DOM_DEFINE = __webpack_require__(9)
	  , gOPD           = Object.getOwnPropertyDescriptor;

	exports.f = __webpack_require__(10) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 63 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var each         = __webpack_require__(65)(0)
	  , redefine     = __webpack_require__(34)
	  , meta         = __webpack_require__(57)
	  , assign       = __webpack_require__(69)
	  , weak         = __webpack_require__(71)
	  , isObject     = __webpack_require__(8)
	  , getWeak      = meta.getWeak
	  , isExtensible = Object.isExtensible
	  , uncaughtFrozenStore = weak.ufstore
	  , tmp          = {}
	  , InternalMap;

	var wrapper = function(get){
	  return function WeakMap(){
	    return get(this, arguments.length > 0 ? arguments[0] : undefined);
	  };
	};

	var methods = {
	  // 23.3.3.3 WeakMap.prototype.get(key)
	  get: function get(key){
	    if(isObject(key)){
	      var data = getWeak(key);
	      if(data === true)return uncaughtFrozenStore(this).get(key);
	      return data ? data[this._i] : undefined;
	    }
	  },
	  // 23.3.3.5 WeakMap.prototype.set(key, value)
	  set: function set(key, value){
	    return weak.def(this, key, value);
	  }
	};

	// 23.3 WeakMap Objects
	var $WeakMap = module.exports = __webpack_require__(58)('WeakMap', wrapper, methods, weak, true, true);

	// IE11 WeakMap frozen keys fix
	if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
	  InternalMap = weak.getConstructor(wrapper);
	  assign(InternalMap.prototype, methods);
	  meta.NEED = true;
	  each(['delete', 'has', 'get', 'set'], function(key){
	    var proto  = $WeakMap.prototype
	      , method = proto[key];
	    redefine(proto, key, function(a, b){
	      // store frozen objects on internal weakmap shim
	      if(isObject(a) && !isExtensible(a)){
	        if(!this._f)this._f = new InternalMap;
	        var result = this._f[key](a, b);
	        return key == 'set' ? this : result;
	      // store all the rest on native weakmap
	      } return method.call(this, a, b);
	    });
	  });
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// 0 -> Array#forEach
	// 1 -> Array#map
	// 2 -> Array#filter
	// 3 -> Array#some
	// 4 -> Array#every
	// 5 -> Array#find
	// 6 -> Array#findIndex
	var ctx      = __webpack_require__(38)
	  , IObject  = __webpack_require__(21)
	  , toObject = __webpack_require__(54)
	  , toLength = __webpack_require__(25)
	  , asc      = __webpack_require__(66);
	module.exports = function(TYPE, $create){
	  var IS_MAP        = TYPE == 1
	    , IS_FILTER     = TYPE == 2
	    , IS_SOME       = TYPE == 3
	    , IS_EVERY      = TYPE == 4
	    , IS_FIND_INDEX = TYPE == 6
	    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
	    , create        = $create || asc;
	  return function($this, callbackfn, that){
	    var O      = toObject($this)
	      , self   = IObject(O)
	      , f      = ctx(callbackfn, that, 3)
	      , length = toLength(self.length)
	      , index  = 0
	      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
	      , val, res;
	    for(;length > index; index++)if(NO_HOLES || index in self){
	      val = self[index];
	      res = f(val, index, O);
	      if(TYPE){
	        if(IS_MAP)result[index] = res;            // map
	        else if(res)switch(TYPE){
	          case 3: return true;                    // some
	          case 5: return val;                     // find
	          case 6: return index;                   // findIndex
	          case 2: result.push(val);               // filter
	        } else if(IS_EVERY)return false;          // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
	  };
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
	var speciesConstructor = __webpack_require__(67);

	module.exports = function(original, length){
	  return new (speciesConstructor(original))(length);
	};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(8)
	  , isArray  = __webpack_require__(68)
	  , SPECIES  = __webpack_require__(45)('species');

	module.exports = function(original){
	  var C;
	  if(isArray(original)){
	    C = original.constructor;
	    // cross-realm fallback
	    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
	    if(isObject(C)){
	      C = C[SPECIES];
	      if(C === null)C = undefined;
	    }
	  } return C === undefined ? Array : C;
	};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(22);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(17)
	  , gOPS     = __webpack_require__(70)
	  , pIE      = __webpack_require__(63)
	  , toObject = __webpack_require__(54)
	  , IObject  = __webpack_require__(21)
	  , $assign  = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(11)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 70 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var redefineAll       = __webpack_require__(33)
	  , getWeak           = __webpack_require__(57).getWeak
	  , anObject          = __webpack_require__(7)
	  , isObject          = __webpack_require__(8)
	  , anInstance        = __webpack_require__(40)
	  , forOf             = __webpack_require__(41)
	  , createArrayMethod = __webpack_require__(65)
	  , $has              = __webpack_require__(19)
	  , arrayFind         = createArrayMethod(5)
	  , arrayFindIndex    = createArrayMethod(6)
	  , id                = 0;

	// fallback for uncaught frozen keys
	var uncaughtFrozenStore = function(that){
	  return that._l || (that._l = new UncaughtFrozenStore);
	};
	var UncaughtFrozenStore = function(){
	  this.a = [];
	};
	var findUncaughtFrozen = function(store, key){
	  return arrayFind(store.a, function(it){
	    return it[0] === key;
	  });
	};
	UncaughtFrozenStore.prototype = {
	  get: function(key){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)return entry[1];
	  },
	  has: function(key){
	    return !!findUncaughtFrozen(this, key);
	  },
	  set: function(key, value){
	    var entry = findUncaughtFrozen(this, key);
	    if(entry)entry[1] = value;
	    else this.a.push([key, value]);
	  },
	  'delete': function(key){
	    var index = arrayFindIndex(this.a, function(it){
	      return it[0] === key;
	    });
	    if(~index)this.a.splice(index, 1);
	    return !!~index;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      anInstance(that, C, NAME, '_i');
	      that._i = id++;      // collection id
	      that._l = undefined; // leak store for uncaught frozen objects
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.3.3.2 WeakMap.prototype.delete(key)
	      // 23.4.3.3 WeakSet.prototype.delete(value)
	      'delete': function(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
	        return data && $has(data, this._i) && delete data[this._i];
	      },
	      // 23.3.3.4 WeakMap.prototype.has(key)
	      // 23.4.3.4 WeakSet.prototype.has(value)
	      has: function has(key){
	        if(!isObject(key))return false;
	        var data = getWeak(key);
	        if(data === true)return uncaughtFrozenStore(this).has(key);
	        return data && $has(data, this._i);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var data = getWeak(anObject(key), true);
	    if(data === true)uncaughtFrozenStore(that).set(key, value);
	    else data[that._i] = value;
	    return that;
	  },
	  ufstore: uncaughtFrozenStore
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(3)
	  , anObject               = __webpack_require__(7)
	  , toMetaKey              = metadata.key
	  , getOrCreateMetadataMap = metadata.map
	  , store                  = metadata.store;

	metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
	  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
	    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
	  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
	  if(metadataMap.size)return true;
	  var targetMetadata = store.get(target);
	  targetMetadata['delete'](targetKey);
	  return !!targetMetadata.size || store['delete'](target);
	}});

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(3)
	  , anObject               = __webpack_require__(7)
	  , getPrototypeOf         = __webpack_require__(53)
	  , ordinaryHasOwnMetadata = metadata.has
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	var ordinaryGetMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
	};

	metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var Set                     = __webpack_require__(75)
	  , from                    = __webpack_require__(76)
	  , metadata                = __webpack_require__(3)
	  , anObject                = __webpack_require__(7)
	  , getPrototypeOf          = __webpack_require__(53)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	var ordinaryMetadataKeys = function(O, P){
	  var oKeys  = ordinaryOwnMetadataKeys(O, P)
	    , parent = getPrototypeOf(O);
	  if(parent === null)return oKeys;
	  var pKeys  = ordinaryMetadataKeys(parent, P);
	  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
	};

	metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
	  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(5);

	// 23.2 Set Objects
	module.exports = __webpack_require__(58)('Set', function(get){
	  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.2.3.1 Set.prototype.add(value)
	  add: function add(value){
	    return strong.def(this, value = value === 0 ? 0 : value, value);
	  }
	}, strong);

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var forOf = __webpack_require__(41);

	module.exports = function(iter, ITERATOR){
	  var result = [];
	  forOf(iter, false, result.push, result, ITERATOR);
	  return result;
	};


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(3)
	  , anObject               = __webpack_require__(7)
	  , ordinaryGetOwnMetadata = metadata.get
	  , toMetaKey              = metadata.key;

	metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                = __webpack_require__(3)
	  , anObject                = __webpack_require__(7)
	  , ordinaryOwnMetadataKeys = metadata.keys
	  , toMetaKey               = metadata.key;

	metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
	  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
	}});

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(3)
	  , anObject               = __webpack_require__(7)
	  , getPrototypeOf         = __webpack_require__(53)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	var ordinaryHasMetadata = function(MetadataKey, O, P){
	  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
	  if(hasOwn)return true;
	  var parent = getPrototypeOf(O);
	  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
	};

	metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var metadata               = __webpack_require__(3)
	  , anObject               = __webpack_require__(7)
	  , ordinaryHasOwnMetadata = metadata.has
	  , toMetaKey              = metadata.key;

	metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
	  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
	    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
	}});

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	var metadata                  = __webpack_require__(3)
	  , anObject                  = __webpack_require__(7)
	  , aFunction                 = __webpack_require__(39)
	  , toMetaKey                 = metadata.key
	  , ordinaryDefineOwnMetadata = metadata.set;

	metadata.exp({metadata: function metadata(metadataKey, metadataValue){
	  return function decorator(target, targetKey){
	    ordinaryDefineOwnMetadata(
	      metadataKey, metadataValue,
	      (targetKey !== undefined ? anObject : aFunction)(target),
	      toMetaKey(targetKey)
	    );
	  };
	}});

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {/**
	* @license
	* Copyright Google Inc. All Rights Reserved.
	*
	* Use of this source code is governed by an MIT-style license that can be
	* found in the LICENSE file at https://angular.io/license
	*/
	(function (global, factory) {
	     true ? factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (factory());
	}(this, (function () { 'use strict';

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */


	var Zone$1 = (function (global) {
	    if (global['Zone']) {
	        throw new Error('Zone already loaded.');
	    }
	    var Zone = (function () {
	        function Zone(parent, zoneSpec) {
	            this._properties = null;
	            this._parent = parent;
	            this._name = zoneSpec ? zoneSpec.name || 'unnamed' : '<root>';
	            this._properties = zoneSpec && zoneSpec.properties || {};
	            this._zoneDelegate =
	                new ZoneDelegate(this, this._parent && this._parent._zoneDelegate, zoneSpec);
	        }
	        Zone.assertZonePatched = function () {
	            if (global.Promise !== ZoneAwarePromise) {
	                throw new Error('Zone.js has detected that ZoneAwarePromise `(window|global).Promise` ' +
	                    'has been overwritten.\n' +
	                    'Most likely cause is that a Promise polyfill has been loaded ' +
	                    'after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. ' +
	                    'If you must load one, do so before loading zone.js.)');
	            }
	        };
	        Object.defineProperty(Zone, "current", {
	            get: function () {
	                return _currentZoneFrame.zone;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone, "currentTask", {
	            get: function () {
	                return _currentTask;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "parent", {
	            get: function () {
	                return this._parent;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Object.defineProperty(Zone.prototype, "name", {
	            get: function () {
	                return this._name;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        
	        Zone.prototype.get = function (key) {
	            var zone = this.getZoneWith(key);
	            if (zone)
	                return zone._properties[key];
	        };
	        Zone.prototype.getZoneWith = function (key) {
	            var current = this;
	            while (current) {
	                if (current._properties.hasOwnProperty(key)) {
	                    return current;
	                }
	                current = current._parent;
	            }
	            return null;
	        };
	        Zone.prototype.fork = function (zoneSpec) {
	            if (!zoneSpec)
	                throw new Error('ZoneSpec required!');
	            return this._zoneDelegate.fork(this, zoneSpec);
	        };
	        Zone.prototype.wrap = function (callback, source) {
	            if (typeof callback !== 'function') {
	                throw new Error('Expecting function got: ' + callback);
	            }
	            var _callback = this._zoneDelegate.intercept(this, callback, source);
	            var zone = this;
	            return function () {
	                return zone.runGuarded(_callback, this, arguments, source);
	            };
	        };
	        Zone.prototype.run = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runGuarded = function (callback, applyThis, applyArgs, source) {
	            if (applyThis === void 0) { applyThis = null; }
	            if (applyArgs === void 0) { applyArgs = null; }
	            if (source === void 0) { source = null; }
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                try {
	                    return this._zoneDelegate.invoke(this, callback, applyThis, applyArgs, source);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	            }
	        };
	        Zone.prototype.runTask = function (task, applyThis, applyArgs) {
	            task.runCount++;
	            if (task.zone != this)
	                throw new Error('A task can only be run in the zone which created it! (Creation: ' + task.zone.name +
	                    '; Execution: ' + this.name + ')');
	            var previousTask = _currentTask;
	            _currentTask = task;
	            _currentZoneFrame = new ZoneFrame(_currentZoneFrame, this);
	            try {
	                if (task.type == 'macroTask' && task.data && !task.data.isPeriodic) {
	                    task.cancelFn = null;
	                }
	                try {
	                    return this._zoneDelegate.invokeTask(this, task, applyThis, applyArgs);
	                }
	                catch (error) {
	                    if (this._zoneDelegate.handleError(this, error)) {
	                        throw error;
	                    }
	                }
	            }
	            finally {
	                _currentZoneFrame = _currentZoneFrame.parent;
	                _currentTask = previousTask;
	            }
	        };
	        Zone.prototype.scheduleMicroTask = function (source, callback, data, customSchedule) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('microTask', this, source, callback, data, customSchedule, null));
	        };
	        Zone.prototype.scheduleMacroTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('macroTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.scheduleEventTask = function (source, callback, data, customSchedule, customCancel) {
	            return this._zoneDelegate.scheduleTask(this, new ZoneTask('eventTask', this, source, callback, data, customSchedule, customCancel));
	        };
	        Zone.prototype.cancelTask = function (task) {
	            var value = this._zoneDelegate.cancelTask(this, task);
	            task.runCount = -1;
	            task.cancelFn = null;
	            return value;
	        };
	        return Zone;
	    }());
	    Zone.__symbol__ = __symbol__;
	    
	    var ZoneDelegate = (function () {
	        function ZoneDelegate(zone, parentDelegate, zoneSpec) {
	            this._taskCounts = { microTask: 0, macroTask: 0, eventTask: 0 };
	            this.zone = zone;
	            this._parentDelegate = parentDelegate;
	            this._forkZS = zoneSpec && (zoneSpec && zoneSpec.onFork ? zoneSpec : parentDelegate._forkZS);
	            this._forkDlgt = zoneSpec && (zoneSpec.onFork ? parentDelegate : parentDelegate._forkDlgt);
	            this._forkCurrZone = zoneSpec && (zoneSpec.onFork ? this.zone : parentDelegate.zone);
	            this._interceptZS =
	                zoneSpec && (zoneSpec.onIntercept ? zoneSpec : parentDelegate._interceptZS);
	            this._interceptDlgt =
	                zoneSpec && (zoneSpec.onIntercept ? parentDelegate : parentDelegate._interceptDlgt);
	            this._interceptCurrZone =
	                zoneSpec && (zoneSpec.onIntercept ? this.zone : parentDelegate.zone);
	            this._invokeZS = zoneSpec && (zoneSpec.onInvoke ? zoneSpec : parentDelegate._invokeZS);
	            this._invokeDlgt =
	                zoneSpec && (zoneSpec.onInvoke ? parentDelegate : parentDelegate._invokeDlgt);
	            this._invokeCurrZone = zoneSpec && (zoneSpec.onInvoke ? this.zone : parentDelegate.zone);
	            this._handleErrorZS =
	                zoneSpec && (zoneSpec.onHandleError ? zoneSpec : parentDelegate._handleErrorZS);
	            this._handleErrorDlgt =
	                zoneSpec && (zoneSpec.onHandleError ? parentDelegate : parentDelegate._handleErrorDlgt);
	            this._handleErrorCurrZone =
	                zoneSpec && (zoneSpec.onHandleError ? this.zone : parentDelegate.zone);
	            this._scheduleTaskZS =
	                zoneSpec && (zoneSpec.onScheduleTask ? zoneSpec : parentDelegate._scheduleTaskZS);
	            this._scheduleTaskDlgt =
	                zoneSpec && (zoneSpec.onScheduleTask ? parentDelegate : parentDelegate._scheduleTaskDlgt);
	            this._scheduleTaskCurrZone =
	                zoneSpec && (zoneSpec.onScheduleTask ? this.zone : parentDelegate.zone);
	            this._invokeTaskZS =
	                zoneSpec && (zoneSpec.onInvokeTask ? zoneSpec : parentDelegate._invokeTaskZS);
	            this._invokeTaskDlgt =
	                zoneSpec && (zoneSpec.onInvokeTask ? parentDelegate : parentDelegate._invokeTaskDlgt);
	            this._invokeTaskCurrZone =
	                zoneSpec && (zoneSpec.onInvokeTask ? this.zone : parentDelegate.zone);
	            this._cancelTaskZS =
	                zoneSpec && (zoneSpec.onCancelTask ? zoneSpec : parentDelegate._cancelTaskZS);
	            this._cancelTaskDlgt =
	                zoneSpec && (zoneSpec.onCancelTask ? parentDelegate : parentDelegate._cancelTaskDlgt);
	            this._cancelTaskCurrZone =
	                zoneSpec && (zoneSpec.onCancelTask ? this.zone : parentDelegate.zone);
	            this._hasTaskZS = zoneSpec && (zoneSpec.onHasTask ? zoneSpec : parentDelegate._hasTaskZS);
	            this._hasTaskDlgt =
	                zoneSpec && (zoneSpec.onHasTask ? parentDelegate : parentDelegate._hasTaskDlgt);
	            this._hasTaskCurrZone = zoneSpec && (zoneSpec.onHasTask ? this.zone : parentDelegate.zone);
	        }
	        ZoneDelegate.prototype.fork = function (targetZone, zoneSpec) {
	            return this._forkZS ? this._forkZS.onFork(this._forkDlgt, this.zone, targetZone, zoneSpec) :
	                new Zone(targetZone, zoneSpec);
	        };
	        ZoneDelegate.prototype.intercept = function (targetZone, callback, source) {
	            return this._interceptZS ?
	                this._interceptZS.onIntercept(this._interceptDlgt, this._interceptCurrZone, targetZone, callback, source) :
	                callback;
	        };
	        ZoneDelegate.prototype.invoke = function (targetZone, callback, applyThis, applyArgs, source) {
	            return this._invokeZS ?
	                this._invokeZS.onInvoke(this._invokeDlgt, this._invokeCurrZone, targetZone, callback, applyThis, applyArgs, source) :
	                callback.apply(applyThis, applyArgs);
	        };
	        ZoneDelegate.prototype.handleError = function (targetZone, error) {
	            return this._handleErrorZS ?
	                this._handleErrorZS.onHandleError(this._handleErrorDlgt, this._handleErrorCurrZone, targetZone, error) :
	                true;
	        };
	        ZoneDelegate.prototype.scheduleTask = function (targetZone, task) {
	            try {
	                if (this._scheduleTaskZS) {
	                    return this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt, this._scheduleTaskCurrZone, targetZone, task);
	                }
	                else if (task.scheduleFn) {
	                    task.scheduleFn(task);
	                }
	                else if (task.type == 'microTask') {
	                    scheduleMicroTask(task);
	                }
	                else {
	                    throw new Error('Task is missing scheduleFn.');
	                }
	                return task;
	            }
	            finally {
	                if (targetZone == this.zone) {
	                    this._updateTaskCount(task.type, 1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.invokeTask = function (targetZone, task, applyThis, applyArgs) {
	            try {
	                return this._invokeTaskZS ?
	                    this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt, this._invokeTaskCurrZone, targetZone, task, applyThis, applyArgs) :
	                    task.callback.apply(applyThis, applyArgs);
	            }
	            finally {
	                if (targetZone == this.zone && (task.type != 'eventTask') &&
	                    !(task.data && task.data.isPeriodic)) {
	                    this._updateTaskCount(task.type, -1);
	                }
	            }
	        };
	        ZoneDelegate.prototype.cancelTask = function (targetZone, task) {
	            var value;
	            if (this._cancelTaskZS) {
	                value = this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt, this._cancelTaskCurrZone, targetZone, task);
	            }
	            else if (!task.cancelFn) {
	                throw new Error('Task does not support cancellation, or is already canceled.');
	            }
	            else {
	                value = task.cancelFn(task);
	            }
	            if (targetZone == this.zone) {
	                // this should not be in the finally block, because exceptions assume not canceled.
	                this._updateTaskCount(task.type, -1);
	            }
	            return value;
	        };
	        ZoneDelegate.prototype.hasTask = function (targetZone, isEmpty) {
	            return this._hasTaskZS &&
	                this._hasTaskZS.onHasTask(this._hasTaskDlgt, this._hasTaskCurrZone, targetZone, isEmpty);
	        };
	        ZoneDelegate.prototype._updateTaskCount = function (type, count) {
	            var counts = this._taskCounts;
	            var prev = counts[type];
	            var next = counts[type] = prev + count;
	            if (next < 0) {
	                throw new Error('More tasks executed then were scheduled.');
	            }
	            if (prev == 0 || next == 0) {
	                var isEmpty = {
	                    microTask: counts.microTask > 0,
	                    macroTask: counts.macroTask > 0,
	                    eventTask: counts.eventTask > 0,
	                    change: type
	                };
	                try {
	                    this.hasTask(this.zone, isEmpty);
	                }
	                finally {
	                    if (this._parentDelegate) {
	                        this._parentDelegate._updateTaskCount(type, count);
	                    }
	                }
	            }
	        };
	        return ZoneDelegate;
	    }());
	    var ZoneTask = (function () {
	        function ZoneTask(type, zone, source, callback, options, scheduleFn, cancelFn) {
	            this.runCount = 0;
	            this.type = type;
	            this.zone = zone;
	            this.source = source;
	            this.data = options;
	            this.scheduleFn = scheduleFn;
	            this.cancelFn = cancelFn;
	            this.callback = callback;
	            var self = this;
	            this.invoke = function () {
	                _numberOfNestedTaskFrames++;
	                try {
	                    return zone.runTask(self, this, arguments);
	                }
	                finally {
	                    if (_numberOfNestedTaskFrames == 1) {
	                        drainMicroTaskQueue();
	                    }
	                    _numberOfNestedTaskFrames--;
	                }
	            };
	        }
	        ZoneTask.prototype.toString = function () {
	            if (this.data && typeof this.data.handleId !== 'undefined') {
	                return this.data.handleId;
	            }
	            else {
	                return Object.prototype.toString.call(this);
	            }
	        };
	        // add toJSON method to prevent cyclic error when
	        // call JSON.stringify(zoneTask)
	        ZoneTask.prototype.toJSON = function () {
	            return {
	                type: this.type,
	                source: this.source,
	                data: this.data,
	                zone: this.zone.name,
	                invoke: this.invoke,
	                scheduleFn: this.scheduleFn,
	                cancelFn: this.cancelFn,
	                runCount: this.runCount,
	                callback: this.callback
	            };
	        };
	        return ZoneTask;
	    }());
	    var ZoneFrame = (function () {
	        function ZoneFrame(parent, zone) {
	            this.parent = parent;
	            this.zone = zone;
	        }
	        return ZoneFrame;
	    }());
	    function __symbol__(name) {
	        return '__zone_symbol__' + name;
	    }
	    
	    var symbolSetTimeout = __symbol__('setTimeout');
	    var symbolPromise = __symbol__('Promise');
	    var symbolThen = __symbol__('then');
	    var _currentZoneFrame = new ZoneFrame(null, new Zone(null, null));
	    var _currentTask = null;
	    var _microTaskQueue = [];
	    var _isDrainingMicrotaskQueue = false;
	    var _uncaughtPromiseErrors = [];
	    var _numberOfNestedTaskFrames = 0;
	    function scheduleQueueDrain() {
	        // if we are not running in any task, and there has not been anything scheduled
	        // we must bootstrap the initial task creation by manually scheduling the drain
	        if (_numberOfNestedTaskFrames === 0 && _microTaskQueue.length === 0) {
	            // We are not running in Task, so we need to kickstart the microtask queue.
	            if (global[symbolPromise]) {
	                global[symbolPromise].resolve(0)[symbolThen](drainMicroTaskQueue);
	            }
	            else {
	                global[symbolSetTimeout](drainMicroTaskQueue, 0);
	            }
	        }
	    }
	    function scheduleMicroTask(task) {
	        scheduleQueueDrain();
	        _microTaskQueue.push(task);
	    }
	    function consoleError(e) {
	        var rejection = e && e.rejection;
	        if (rejection) {
	            console.error('Unhandled Promise rejection:', rejection instanceof Error ? rejection.message : rejection, '; Zone:', e.zone.name, '; Task:', e.task && e.task.source, '; Value:', rejection, rejection instanceof Error ? rejection.stack : undefined);
	        }
	        console.error(e);
	    }
	    function drainMicroTaskQueue() {
	        if (!_isDrainingMicrotaskQueue) {
	            _isDrainingMicrotaskQueue = true;
	            while (_microTaskQueue.length) {
	                var queue = _microTaskQueue;
	                _microTaskQueue = [];
	                for (var i = 0; i < queue.length; i++) {
	                    var task = queue[i];
	                    try {
	                        task.zone.runTask(task, null, null);
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                }
	            }
	            while (_uncaughtPromiseErrors.length) {
	                var _loop_1 = function () {
	                    var uncaughtPromiseError = _uncaughtPromiseErrors.shift();
	                    try {
	                        uncaughtPromiseError.zone.runGuarded(function () {
	                            throw uncaughtPromiseError;
	                        });
	                    }
	                    catch (e) {
	                        consoleError(e);
	                    }
	                };
	                while (_uncaughtPromiseErrors.length) {
	                    _loop_1();
	                }
	            }
	            _isDrainingMicrotaskQueue = false;
	        }
	    }
	    function isThenable(value) {
	        return value && value.then;
	    }
	    function forwardResolution(value) {
	        return value;
	    }
	    function forwardRejection(rejection) {
	        return ZoneAwarePromise.reject(rejection);
	    }
	    var symbolState = __symbol__('state');
	    var symbolValue = __symbol__('value');
	    var source = 'Promise.then';
	    var UNRESOLVED = null;
	    var RESOLVED = true;
	    var REJECTED = false;
	    var REJECTED_NO_CATCH = 0;
	    function makeResolver(promise, state) {
	        return function (v) {
	            resolvePromise(promise, state, v);
	            // Do not return value or you will break the Promise spec.
	        };
	    }
	    function resolvePromise(promise, state, value) {
	        if (promise[symbolState] === UNRESOLVED) {
	            if (value instanceof ZoneAwarePromise && value.hasOwnProperty(symbolState) &&
	                value.hasOwnProperty(symbolValue) && value[symbolState] !== UNRESOLVED) {
	                clearRejectedNoCatch(value);
	                resolvePromise(promise, value[symbolState], value[symbolValue]);
	            }
	            else if (isThenable(value)) {
	                value.then(makeResolver(promise, state), makeResolver(promise, false));
	            }
	            else {
	                promise[symbolState] = state;
	                var queue = promise[symbolValue];
	                promise[symbolValue] = value;
	                for (var i = 0; i < queue.length;) {
	                    scheduleResolveOrReject(promise, queue[i++], queue[i++], queue[i++], queue[i++]);
	                }
	                if (queue.length == 0 && state == REJECTED) {
	                    promise[symbolState] = REJECTED_NO_CATCH;
	                    try {
	                        throw new Error('Uncaught (in promise): ' + value +
	                            (value && value.stack ? '\n' + value.stack : ''));
	                    }
	                    catch (e) {
	                        var error_1 = e;
	                        error_1.rejection = value;
	                        error_1.promise = promise;
	                        error_1.zone = Zone.current;
	                        error_1.task = Zone.currentTask;
	                        _uncaughtPromiseErrors.push(error_1);
	                        scheduleQueueDrain();
	                    }
	                }
	            }
	        }
	        // Resolving an already resolved promise is a noop.
	        return promise;
	    }
	    function clearRejectedNoCatch(promise) {
	        if (promise[symbolState] === REJECTED_NO_CATCH) {
	            promise[symbolState] = REJECTED;
	            for (var i = 0; i < _uncaughtPromiseErrors.length; i++) {
	                if (promise === _uncaughtPromiseErrors[i].promise) {
	                    _uncaughtPromiseErrors.splice(i, 1);
	                    break;
	                }
	            }
	        }
	    }
	    function scheduleResolveOrReject(promise, zone, chainPromise, onFulfilled, onRejected) {
	        clearRejectedNoCatch(promise);
	        var delegate = promise[symbolState] ? onFulfilled || forwardResolution : onRejected || forwardRejection;
	        zone.scheduleMicroTask(source, function () {
	            try {
	                resolvePromise(chainPromise, true, zone.run(delegate, null, [promise[symbolValue]]));
	            }
	            catch (error) {
	                resolvePromise(chainPromise, false, error);
	            }
	        });
	    }
	    var ZoneAwarePromise = (function () {
	        function ZoneAwarePromise(executor) {
	            var promise = this;
	            if (!(promise instanceof ZoneAwarePromise)) {
	                throw new Error('Must be an instanceof Promise.');
	            }
	            promise[symbolState] = UNRESOLVED;
	            promise[symbolValue] = []; // queue;
	            try {
	                executor && executor(makeResolver(promise, RESOLVED), makeResolver(promise, REJECTED));
	            }
	            catch (e) {
	                resolvePromise(promise, false, e);
	            }
	        }
	        ZoneAwarePromise.toString = function () {
	            return 'function ZoneAwarePromise() { [native code] }';
	        };
	        ZoneAwarePromise.resolve = function (value) {
	            return resolvePromise(new this(null), RESOLVED, value);
	        };
	        ZoneAwarePromise.reject = function (error) {
	            return resolvePromise(new this(null), REJECTED, error);
	        };
	        ZoneAwarePromise.race = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                _a = [res, rej], resolve = _a[0], reject = _a[1];
	                var _a;
	            });
	            function onResolve(value) {
	                promise && (promise = null || resolve(value));
	            }
	            function onReject(error) {
	                promise && (promise = null || reject(error));
	            }
	            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
	                var value = values_1[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then(onResolve, onReject);
	            }
	            return promise;
	        };
	        ZoneAwarePromise.all = function (values) {
	            var resolve;
	            var reject;
	            var promise = new this(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var count = 0;
	            var resolvedValues = [];
	            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
	                var value = values_2[_i];
	                if (!isThenable(value)) {
	                    value = this.resolve(value);
	                }
	                value.then((function (index) { return function (value) {
	                    resolvedValues[index] = value;
	                    count--;
	                    if (!count) {
	                        resolve(resolvedValues);
	                    }
	                }; })(count), reject);
	                count++;
	            }
	            if (!count)
	                resolve(resolvedValues);
	            return promise;
	        };
	        ZoneAwarePromise.prototype.then = function (onFulfilled, onRejected) {
	            var chainPromise = new this.constructor(null);
	            var zone = Zone.current;
	            if (this[symbolState] == UNRESOLVED) {
	                this[symbolValue].push(zone, chainPromise, onFulfilled, onRejected);
	            }
	            else {
	                scheduleResolveOrReject(this, zone, chainPromise, onFulfilled, onRejected);
	            }
	            return chainPromise;
	        };
	        ZoneAwarePromise.prototype.catch = function (onRejected) {
	            return this.then(null, onRejected);
	        };
	        return ZoneAwarePromise;
	    }());
	    // Protect against aggressive optimizers dropping seemingly unused properties.
	    // E.g. Closure Compiler in advanced mode.
	    ZoneAwarePromise['resolve'] = ZoneAwarePromise.resolve;
	    ZoneAwarePromise['reject'] = ZoneAwarePromise.reject;
	    ZoneAwarePromise['race'] = ZoneAwarePromise.race;
	    ZoneAwarePromise['all'] = ZoneAwarePromise.all;
	    var NativePromise = global[__symbol__('Promise')] = global['Promise'];
	    global['Promise'] = ZoneAwarePromise;
	    function patchThen(NativePromise) {
	        var NativePromiseProtototype = NativePromise.prototype;
	        var NativePromiseThen = NativePromiseProtototype[__symbol__('then')] =
	            NativePromiseProtototype.then;
	        NativePromiseProtototype.then = function (onResolve, onReject) {
	            var nativePromise = this;
	            return new ZoneAwarePromise(function (resolve, reject) {
	                NativePromiseThen.call(nativePromise, resolve, reject);
	            })
	                .then(onResolve, onReject);
	        };
	    }
	    if (NativePromise) {
	        patchThen(NativePromise);
	        if (typeof global['fetch'] !== 'undefined') {
	            var fetchPromise = void 0;
	            try {
	                // In MS Edge this throws
	                fetchPromise = global['fetch']();
	            }
	            catch (e) {
	                // In Chrome this throws instead.
	                fetchPromise = global['fetch']('about:blank');
	            }
	            // ignore output to prevent error;
	            fetchPromise.then(function () { return null; }, function () { return null; });
	            if (fetchPromise.constructor != NativePromise &&
	                fetchPromise.constructor != ZoneAwarePromise) {
	                patchThen(fetchPromise.constructor);
	            }
	        }
	    }
	    // This is not part of public API, but it is usefull for tests, so we expose it.
	    Promise[Zone.__symbol__('uncaughtPromiseErrors')] = _uncaughtPromiseErrors;
	    /*
	     * This code patches Error so that:
	     *   - It ignores un-needed stack frames.
	     *   - It Shows the associated Zone for reach frame.
	     */
	    var FrameType;
	    (function (FrameType) {
	        /// Skip this frame when printing out stack
	        FrameType[FrameType["blackList"] = 0] = "blackList";
	        /// This frame marks zone transition
	        FrameType[FrameType["transition"] = 1] = "transition";
	    })(FrameType || (FrameType = {}));
	    var NativeError = global[__symbol__('Error')] = global.Error;
	    // Store the frames which should be removed from the stack frames
	    var blackListedStackFrames = {};
	    // We must find the frame where Error was created, otherwise we assume we don't understand stack
	    var zoneAwareFrame;
	    global.Error = ZoneAwareError;
	    // How should the stack frames be parsed.
	    var frameParserStrategy = null;
	    var stackRewrite = 'stackRewrite';
	    // fix #595, create property descriptor
	    // for error properties
	    var createProperty = function (props, key) {
	        // if property is already defined, skip it.
	        if (props[key]) {
	            return;
	        }
	        // define a local property
	        // in case error property is not settable
	        var name = __symbol__(key);
	        props[key] = {
	            configurable: true,
	            enumerable: true,
	            get: function () {
	                // if local property has no value
	                // use internal error's property value
	                if (!this[name]) {
	                    var error_2 = this[__symbol__('error')];
	                    if (error_2) {
	                        this[name] = error_2[key];
	                    }
	                }
	                return this[name];
	            },
	            set: function (value) {
	                // setter will set value to local property value
	                this[name] = value;
	            }
	        };
	    };
	    // fix #595, create property descriptor
	    // for error method properties
	    var createMethodProperty = function (props, key) {
	        if (props[key]) {
	            return;
	        }
	        props[key] = {
	            configurable: true,
	            enumerable: true,
	            writable: true,
	            value: function () {
	                var error = this[__symbol__('error')];
	                var errorMethod = (error && error[key]) || this[key];
	                if (errorMethod) {
	                    return errorMethod.apply(error, arguments);
	                }
	            }
	        };
	    };
	    var createErrorProperties = function () {
	        var props = Object.create(null);
	        var error = new NativeError();
	        var keys = Object.getOwnPropertyNames(error);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            // Avoid bugs when hasOwnProperty is shadowed
	            if (Object.prototype.hasOwnProperty.call(error, key)) {
	                createProperty(props, key);
	            }
	        }
	        var proto = NativeError.prototype;
	        if (proto) {
	            var pKeys = Object.getOwnPropertyNames(proto);
	            for (var i = 0; i < pKeys.length; i++) {
	                var key = pKeys[i];
	                // skip constructor
	                if (key !== 'constructor' && key !== 'toString' && key !== 'toSource') {
	                    createProperty(props, key);
	                }
	            }
	        }
	        // some other properties are not
	        // in NativeError
	        createProperty(props, 'originalStack');
	        createProperty(props, 'zoneAwareStack');
	        // define toString, toSource as method property
	        createMethodProperty(props, 'toString');
	        createMethodProperty(props, 'toSource');
	        return props;
	    };
	    var errorProperties = createErrorProperties();
	    // for derived Error class which extends ZoneAwareError
	    // we should not override the derived class's property
	    // so we create a new props object only copy the properties
	    // from errorProperties which not exist in derived Error's prototype
	    var getErrorPropertiesForPrototype = function (prototype) {
	        // if the prototype is ZoneAwareError.prototype
	        // we just return the prebuilt errorProperties.
	        if (prototype === ZoneAwareError.prototype) {
	            return errorProperties;
	        }
	        var newProps = Object.create(null);
	        var cKeys = Object.getOwnPropertyNames(errorProperties);
	        var keys = Object.getOwnPropertyNames(prototype);
	        cKeys.forEach(function (cKey) {
	            if (keys.filter(function (key) {
	                return key === cKey;
	            })
	                .length === 0) {
	                newProps[cKey] = errorProperties[cKey];
	            }
	        });
	        return newProps;
	    };
	    /**
	     * This is ZoneAwareError which processes the stack frame and cleans up extra frames as well as
	     * adds zone information to it.
	     */
	    function ZoneAwareError() {
	        // make sure we have a valid this
	        // if this is undefined(call Error without new) or this is global
	        // or this is some other objects, we should force to create a
	        // valid ZoneAwareError by call Object.create()
	        if (!(this instanceof ZoneAwareError)) {
	            return ZoneAwareError.apply(Object.create(ZoneAwareError.prototype), arguments);
	        }
	        // Create an Error.
	        var error = NativeError.apply(this, arguments);
	        this[__symbol__('error')] = error;
	        // Save original stack trace
	        error.originalStack = error.stack;
	        // Process the stack trace and rewrite the frames.
	        if (ZoneAwareError[stackRewrite] && error.originalStack) {
	            var frames_1 = error.originalStack.split('\n');
	            var zoneFrame = _currentZoneFrame;
	            var i = 0;
	            // Find the first frame
	            while (frames_1[i] !== zoneAwareFrame && i < frames_1.length) {
	                i++;
	            }
	            for (; i < frames_1.length && zoneFrame; i++) {
	                var frame = frames_1[i];
	                if (frame.trim()) {
	                    var frameType = blackListedStackFrames.hasOwnProperty(frame) && blackListedStackFrames[frame];
	                    if (frameType === FrameType.blackList) {
	                        frames_1.splice(i, 1);
	                        i--;
	                    }
	                    else if (frameType === FrameType.transition) {
	                        if (zoneFrame.parent) {
	                            // This is the special frame where zone changed. Print and process it accordingly
	                            frames_1[i] += " [" + zoneFrame.parent.zone.name + " => " + zoneFrame.zone.name + "]";
	                            zoneFrame = zoneFrame.parent;
	                        }
	                        else {
	                            zoneFrame = null;
	                        }
	                    }
	                    else {
	                        frames_1[i] += " [" + zoneFrame.zone.name + "]";
	                    }
	                }
	            }
	            error.stack = error.zoneAwareStack = frames_1.join('\n');
	        }
	        // use defineProperties here instead of copy property value
	        // because of issue #595 which will break angular2.
	        Object.defineProperties(this, getErrorPropertiesForPrototype(Object.getPrototypeOf(this)));
	        return this;
	    }
	    // Copy the prototype so that instanceof operator works as expected
	    ZoneAwareError.prototype = NativeError.prototype;
	    ZoneAwareError[Zone.__symbol__('blacklistedStackFrames')] = blackListedStackFrames;
	    ZoneAwareError[stackRewrite] = false;
	    if (NativeError.hasOwnProperty('stackTraceLimit')) {
	        // Extend default stack limit as we will be removing few frames.
	        NativeError.stackTraceLimit = Math.max(NativeError.stackTraceLimit, 15);
	        // make sure that ZoneAwareError has the same property which forwards to NativeError.
	        Object.defineProperty(ZoneAwareError, 'stackTraceLimit', {
	            get: function () {
	                return NativeError.stackTraceLimit;
	            },
	            set: function (value) {
	                return NativeError.stackTraceLimit = value;
	            }
	        });
	    }
	    if (NativeError.hasOwnProperty('captureStackTrace')) {
	        Object.defineProperty(ZoneAwareError, 'captureStackTrace', {
	            // add named function here because we need to remove this
	            // stack frame when prepareStackTrace below
	            value: function zoneCaptureStackTrace(targetObject, constructorOpt) {
	                NativeError.captureStackTrace(targetObject, constructorOpt);
	            }
	        });
	    }
	    Object.defineProperty(ZoneAwareError, 'prepareStackTrace', {
	        get: function () {
	            return NativeError.prepareStackTrace;
	        },
	        set: function (value) {
	            if (!value || typeof value !== 'function') {
	                return NativeError.prepareStackTrace = value;
	            }
	            return NativeError.prepareStackTrace = function (error, structuredStackTrace) {
	                // remove additional stack information from ZoneAwareError.captureStackTrace
	                if (structuredStackTrace) {
	                    for (var i = 0; i < structuredStackTrace.length; i++) {
	                        var st = structuredStackTrace[i];
	                        // remove the first function which name is zoneCaptureStackTrace
	                        if (st.getFunctionName() === 'zoneCaptureStackTrace') {
	                            structuredStackTrace.splice(i, 1);
	                            break;
	                        }
	                    }
	                }
	                return value.apply(this, [error, structuredStackTrace]);
	            };
	        }
	    });
	    // Now we need to populet the `blacklistedStackFrames` as well as find the
	    // run/runGuraded/runTask frames. This is done by creating a detect zone and then threading
	    // the execution through all of the above methods so that we can look at the stack trace and
	    // find the frames of interest.
	    var detectZone = Zone.current.fork({
	        name: 'detect',
	        onInvoke: function (parentZoneDelegate, currentZone, targetZone, delegate, applyThis, applyArgs, source) {
	            // Here only so that it will show up in the stack frame so that it can be black listed.
	            return parentZoneDelegate.invoke(targetZone, delegate, applyThis, applyArgs, source);
	        },
	        onHandleError: function (parentZD, current, target, error) {
	            if (error.originalStack && Error === ZoneAwareError) {
	                var frames_2 = error.originalStack.split(/\n/);
	                var runFrame = false, runGuardedFrame = false, runTaskFrame = false;
	                while (frames_2.length) {
	                    var frame = frames_2.shift();
	                    // On safari it is possible to have stack frame with no line number.
	                    // This check makes sure that we don't filter frames on name only (must have
	                    // linenumber)
	                    if (/:\d+:\d+/.test(frame)) {
	                        // Get rid of the path so that we don't accidintely find function name in path.
	                        // In chrome the seperator is `(` and `@` in FF and safari
	                        // Chrome: at Zone.run (zone.js:100)
	                        // Chrome: at Zone.run (http://localhost:9876/base/build/lib/zone.js:100:24)
	                        // FireFox: Zone.prototype.run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        // Safari: run@http://localhost:9876/base/build/lib/zone.js:101:24
	                        var fnName = frame.split('(')[0].split('@')[0];
	                        var frameType = FrameType.transition;
	                        if (fnName.indexOf('ZoneAwareError') !== -1) {
	                            zoneAwareFrame = frame;
	                        }
	                        if (fnName.indexOf('runGuarded') !== -1) {
	                            runGuardedFrame = true;
	                        }
	                        else if (fnName.indexOf('runTask') !== -1) {
	                            runTaskFrame = true;
	                        }
	                        else if (fnName.indexOf('run') !== -1) {
	                            runFrame = true;
	                        }
	                        else {
	                            frameType = FrameType.blackList;
	                        }
	                        blackListedStackFrames[frame] = frameType;
	                        // Once we find all of the frames we can stop looking.
	                        if (runFrame && runGuardedFrame && runTaskFrame) {
	                            ZoneAwareError[stackRewrite] = true;
	                            break;
	                        }
	                    }
	                }
	            }
	            return false;
	        }
	    });
	    // carefully constructor a stack frame which contains all of the frames of interest which
	    // need to be detected and blacklisted.
	    var detectRunFn = function () {
	        detectZone.run(function () {
	            detectZone.runGuarded(function () {
	                throw new Error('blacklistStackFrames');
	            });
	        });
	    };
	    // Cause the error to extract the stack frames.
	    detectZone.runTask(detectZone.scheduleMacroTask('detect', detectRunFn, null, function () { return null; }, null));
	    return global['Zone'] = Zone;
	})(typeof window === 'object' && window || typeof self === 'object' && self || global);

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/**
	 * Suppress closure compiler errors about unknown 'Zone' variable
	 * @fileoverview
	 * @suppress {undefinedVars}
	 */
	var zoneSymbol = function (n) { return "__zone_symbol__" + n; };
	var _global$1 = typeof window === 'object' && window || typeof self === 'object' && self || global;
	function bindArguments(args, source) {
	    for (var i = args.length - 1; i >= 0; i--) {
	        if (typeof args[i] === 'function') {
	            args[i] = Zone.current.wrap(args[i], source + '_' + i);
	        }
	    }
	    return args;
	}
	function patchPrototype(prototype, fnNames) {
	    var source = prototype.constructor['name'];
	    var _loop_1 = function (i) {
	        var name_1 = fnNames[i];
	        var delegate = prototype[name_1];
	        if (delegate) {
	            prototype[name_1] = (function (delegate) {
	                return function () {
	                    return delegate.apply(this, bindArguments(arguments, source + '.' + name_1));
	                };
	            })(delegate);
	        }
	    };
	    for (var i = 0; i < fnNames.length; i++) {
	        _loop_1(i);
	    }
	}
	var isWebWorker = (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope);
	var isNode = (!('nw' in _global$1) && typeof process !== 'undefined' &&
	    {}.toString.call(process) === '[object process]');
	var isBrowser = !isNode && !isWebWorker && !!(typeof window !== 'undefined' && window['HTMLElement']);
	function patchProperty(obj, prop) {
	    var desc = Object.getOwnPropertyDescriptor(obj, prop) || { enumerable: true, configurable: true };
	    var originalDesc = Object.getOwnPropertyDescriptor(obj, 'original' + prop);
	    if (!originalDesc && desc.get) {
	        Object.defineProperty(obj, 'original' + prop, { enumerable: false, configurable: true, get: desc.get });
	    }
	    // A property descriptor cannot have getter/setter and be writable
	    // deleting the writable and value properties avoids this error:
	    //
	    // TypeError: property descriptors must not specify a value or be writable when a
	    // getter or setter has been specified
	    delete desc.writable;
	    delete desc.value;
	    // substr(2) cuz 'onclick' -> 'click', etc
	    var eventName = prop.substr(2);
	    var _prop = '_' + prop;
	    desc.set = function (fn) {
	        if (this[_prop]) {
	            this.removeEventListener(eventName, this[_prop]);
	        }
	        if (typeof fn === 'function') {
	            var wrapFn = function (event) {
	                var result;
	                result = fn.apply(this, arguments);
	                if (result != undefined && !result)
	                    event.preventDefault();
	            };
	            this[_prop] = wrapFn;
	            this.addEventListener(eventName, wrapFn, false);
	        }
	        else {
	            this[_prop] = null;
	        }
	    };
	    // The getter would return undefined for unassigned properties but the default value of an
	    // unassigned property is null
	    desc.get = function () {
	        var r = this[_prop] || null;
	        // result will be null when use inline event attribute,
	        // such as <button onclick="func();">OK</button>
	        // because the onclick function is internal raw uncompiled handler
	        // the onclick will be evaluated when first time event was triggered or
	        // the property is accessed, https://github.com/angular/zone.js/issues/525
	        // so we should use original native get to retrieve the handler
	        if (r === null) {
	            if (originalDesc && originalDesc.get) {
	                r = originalDesc.get.apply(this, arguments);
	                if (r) {
	                    desc.set.apply(this, [r]);
	                    if (typeof this['removeAttribute'] === 'function') {
	                        this.removeAttribute(prop);
	                    }
	                }
	            }
	        }
	        return this[_prop] || null;
	    };
	    Object.defineProperty(obj, prop, desc);
	}

	function patchOnProperties(obj, properties) {
	    var onProperties = [];
	    for (var prop in obj) {
	        if (prop.substr(0, 2) == 'on') {
	            onProperties.push(prop);
	        }
	    }
	    for (var j = 0; j < onProperties.length; j++) {
	        patchProperty(obj, onProperties[j]);
	    }
	    if (properties) {
	        for (var i = 0; i < properties.length; i++) {
	            patchProperty(obj, 'on' + properties[i]);
	        }
	    }
	}

	var EVENT_TASKS = zoneSymbol('eventTasks');
	// For EventTarget
	var ADD_EVENT_LISTENER = 'addEventListener';
	var REMOVE_EVENT_LISTENER = 'removeEventListener';
	function findExistingRegisteredTask(target, handler, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        for (var i = 0; i < eventTasks.length; i++) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            var listener = data.handler;
	            if ((data.handler === handler || listener.listener === handler) &&
	                data.useCapturing === capture && data.eventName === name) {
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	                return eventTask;
	            }
	        }
	    }
	    return null;
	}
	function findAllExistingRegisteredTasks(target, name, capture, remove) {
	    var eventTasks = target[EVENT_TASKS];
	    if (eventTasks) {
	        var result = [];
	        for (var i = eventTasks.length - 1; i >= 0; i--) {
	            var eventTask = eventTasks[i];
	            var data = eventTask.data;
	            if (data.eventName === name && data.useCapturing === capture) {
	                result.push(eventTask);
	                if (remove) {
	                    eventTasks.splice(i, 1);
	                }
	            }
	        }
	        return result;
	    }
	    return null;
	}
	function attachRegisteredEvent(target, eventTask, isPrepend) {
	    var eventTasks = target[EVENT_TASKS];
	    if (!eventTasks) {
	        eventTasks = target[EVENT_TASKS] = [];
	    }
	    if (isPrepend) {
	        eventTasks.unshift(eventTask);
	    }
	    else {
	        eventTasks.push(eventTask);
	    }
	}
	var defaultListenerMetaCreator = function (self, args) {
	    return {
	        useCapturing: args[2],
	        eventName: args[0],
	        handler: args[1],
	        target: self || _global$1,
	        name: args[0],
	        invokeAddFunc: function (addFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[addFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[addFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        },
	        invokeRemoveFunc: function (removeFnSymbol, delegate) {
	            if (delegate && delegate.invoke) {
	                return this.target[removeFnSymbol](this.eventName, delegate.invoke, this.useCapturing);
	            }
	            else {
	                return this.target[removeFnSymbol](this.eventName, delegate, this.useCapturing);
	            }
	        }
	    };
	};
	function makeZoneAwareAddListener(addFnName, removeFnName, useCapturingParam, allowDuplicates, isPrepend, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (allowDuplicates === void 0) { allowDuplicates = false; }
	    if (isPrepend === void 0) { isPrepend = false; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var addFnSymbol = zoneSymbol(addFnName);
	    var removeFnSymbol = zoneSymbol(removeFnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    function scheduleEventListener(eventTask) {
	        var meta = eventTask.data;
	        attachRegisteredEvent(meta.target, eventTask, isPrepend);
	        return meta.invokeAddFunc(addFnSymbol, eventTask);
	    }
	    function cancelEventListener(eventTask) {
	        var meta = eventTask.data;
	        findExistingRegisteredTask(meta.target, eventTask.invoke, meta.eventName, meta.useCapturing, true);
	        return meta.invokeRemoveFunc(removeFnSymbol, eventTask);
	    }
	    return function zoneAwareAddListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var delegate = null;
	        if (typeof data.handler == 'function') {
	            delegate = data.handler;
	        }
	        else if (data.handler && data.handler.handleEvent) {
	            delegate = function (event) { return data.handler.handleEvent(event); };
	        }
	        var validZoneHandler = false;
	        try {
	            // In cross site contexts (such as WebDriver frameworks like Selenium),
	            // accessing the handler object here will cause an exception to be thrown which
	            // will fail tests prematurely.
	            validZoneHandler = data.handler && data.handler.toString() === '[object FunctionWrapper]';
	        }
	        catch (e) {
	            // Returning nothing here is fine, because objects in a cross-site context are unusable
	            return;
	        }
	        // Ignore special listeners of IE11 & Edge dev tools, see
	        // https://github.com/angular/zone.js/issues/150
	        if (!delegate || validZoneHandler) {
	            return data.invokeAddFunc(addFnSymbol, data.handler);
	        }
	        if (!allowDuplicates) {
	            var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, false);
	            if (eventTask) {
	                // we already registered, so this will have noop.
	                return data.invokeAddFunc(addFnSymbol, eventTask);
	            }
	        }
	        var zone = Zone.current;
	        var source = data.target.constructor['name'] + '.' + addFnName + ':' + data.eventName;
	        zone.scheduleEventTask(source, delegate, data, scheduleEventListener, cancelEventListener);
	    };
	}
	function makeZoneAwareRemoveListener(fnName, useCapturingParam, metaCreator) {
	    if (useCapturingParam === void 0) { useCapturingParam = true; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    var symbol = zoneSymbol(fnName);
	    var defaultUseCapturing = useCapturingParam ? false : undefined;
	    return function zoneAwareRemoveListener(self, args) {
	        var data = metaCreator(self, args);
	        data.useCapturing = data.useCapturing || defaultUseCapturing;
	        // - Inside a Web Worker, `this` is undefined, the context is `global`
	        // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	        // see https://github.com/angular/zone.js/issues/190
	        var eventTask = findExistingRegisteredTask(data.target, data.handler, data.eventName, data.useCapturing, true);
	        if (eventTask) {
	            eventTask.zone.cancelTask(eventTask);
	        }
	        else {
	            data.invokeRemoveFunc(symbol, data.handler);
	        }
	    };
	}


	var zoneAwareAddEventListener = makeZoneAwareAddListener(ADD_EVENT_LISTENER, REMOVE_EVENT_LISTENER);
	var zoneAwareRemoveEventListener = makeZoneAwareRemoveListener(REMOVE_EVENT_LISTENER);
	function patchEventTargetMethods(obj, addFnName, removeFnName, metaCreator) {
	    if (addFnName === void 0) { addFnName = ADD_EVENT_LISTENER; }
	    if (removeFnName === void 0) { removeFnName = REMOVE_EVENT_LISTENER; }
	    if (metaCreator === void 0) { metaCreator = defaultListenerMetaCreator; }
	    if (obj && obj[addFnName]) {
	        patchMethod(obj, addFnName, function () { return makeZoneAwareAddListener(addFnName, removeFnName, true, false, false, metaCreator); });
	        patchMethod(obj, removeFnName, function () { return makeZoneAwareRemoveListener(removeFnName, true, metaCreator); });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	var originalInstanceKey = zoneSymbol('originalInstance');
	// wrap some native API on `window`
	function patchClass(className) {
	    var OriginalClass = _global$1[className];
	    if (!OriginalClass)
	        return;
	    _global$1[className] = function () {
	        var a = bindArguments(arguments, className);
	        switch (a.length) {
	            case 0:
	                this[originalInstanceKey] = new OriginalClass();
	                break;
	            case 1:
	                this[originalInstanceKey] = new OriginalClass(a[0]);
	                break;
	            case 2:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1]);
	                break;
	            case 3:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]);
	                break;
	            case 4:
	                this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]);
	                break;
	            default:
	                throw new Error('Arg list too long.');
	        }
	    };
	    var instance = new OriginalClass(function () { });
	    var prop;
	    for (prop in instance) {
	        // https://bugs.webkit.org/show_bug.cgi?id=44721
	        if (className === 'XMLHttpRequest' && prop === 'responseBlob')
	            continue;
	        (function (prop) {
	            if (typeof instance[prop] === 'function') {
	                _global$1[className].prototype[prop] = function () {
	                    return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	                };
	            }
	            else {
	                Object.defineProperty(_global$1[className].prototype, prop, {
	                    set: function (fn) {
	                        if (typeof fn === 'function') {
	                            this[originalInstanceKey][prop] = Zone.current.wrap(fn, className + '.' + prop);
	                        }
	                        else {
	                            this[originalInstanceKey][prop] = fn;
	                        }
	                    },
	                    get: function () {
	                        return this[originalInstanceKey][prop];
	                    }
	                });
	            }
	        }(prop));
	    }
	    for (prop in OriginalClass) {
	        if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	            _global$1[className][prop] = OriginalClass[prop];
	        }
	    }
	}

	function createNamedFn(name, delegate) {
	    try {
	        return (Function('f', "return function " + name + "(){return f(this, arguments)}"))(delegate);
	    }
	    catch (e) {
	        // if we fail, we must be CSP, just return delegate.
	        return function () {
	            return delegate(this, arguments);
	        };
	    }
	}
	function patchMethod(target, name, patchFn) {
	    var proto = target;
	    while (proto && Object.getOwnPropertyNames(proto).indexOf(name) === -1) {
	        proto = Object.getPrototypeOf(proto);
	    }
	    if (!proto && target[name]) {
	        // somehow we did not find it, but we can see it. This happens on IE for Window properties.
	        proto = target;
	    }
	    var delegateName = zoneSymbol(name);
	    var delegate;
	    if (proto && !(delegate = proto[delegateName])) {
	        delegate = proto[delegateName] = proto[name];
	        proto[name] = createNamedFn(name, patchFn(delegate, delegateName, name));
	    }
	    return delegate;
	}
	// TODO: support cancel task later if necessary

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function patchTimer(window, setName, cancelName, nameSuffix) {
	    var setNative = null;
	    var clearNative = null;
	    setName += nameSuffix;
	    cancelName += nameSuffix;
	    var tasksByHandleId = {};
	    function scheduleTask(task) {
	        var data = task.data;
	        data.args[0] = function () {
	            task.invoke.apply(this, arguments);
	            delete tasksByHandleId[data.handleId];
	        };
	        data.handleId = setNative.apply(window, data.args);
	        tasksByHandleId[data.handleId] = task;
	        return task;
	    }
	    function clearTask(task) {
	        delete tasksByHandleId[task.data.handleId];
	        return clearNative(task.data.handleId);
	    }
	    setNative =
	        patchMethod(window, setName, function (delegate) { return function (self, args) {
	            if (typeof args[0] === 'function') {
	                var zone = Zone.current;
	                var options = {
	                    handleId: null,
	                    isPeriodic: nameSuffix === 'Interval',
	                    delay: (nameSuffix === 'Timeout' || nameSuffix === 'Interval') ? args[1] || 0 : null,
	                    args: args
	                };
	                var task = zone.scheduleMacroTask(setName, args[0], options, scheduleTask, clearTask);
	                if (!task) {
	                    return task;
	                }
	                // Node.js must additionally support the ref and unref functions.
	                var handle = task.data.handleId;
	                if (handle.ref && handle.unref) {
	                    task.ref = handle.ref.bind(handle);
	                    task.unref = handle.unref.bind(handle);
	                }
	                return task;
	            }
	            else {
	                // cause an error by calling it directly.
	                return delegate.apply(window, args);
	            }
	        }; });
	    clearNative =
	        patchMethod(window, cancelName, function (delegate) { return function (self, args) {
	            var task = typeof args[0] === 'number' ? tasksByHandleId[args[0]] : args[0];
	            if (task && typeof task.type === 'string') {
	                if (task.cancelFn && task.data.isPeriodic || task.runCount === 0) {
	                    // Do not cancel already canceled functions
	                    task.zone.cancelTask(task);
	                }
	            }
	            else {
	                // cause an error by calling it directly.
	                delegate.apply(window, args);
	            }
	        }; });
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	/*
	 * This is necessary for Chrome and Chrome mobile, to enable
	 * things like redefining `createdCallback` on an element.
	 */
	var _defineProperty = Object[zoneSymbol('defineProperty')] = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object[zoneSymbol('getOwnPropertyDescriptor')] =
	    Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = zoneSymbol('unconfigurables');
	function propertyPatch() {
	    Object.defineProperty = function (obj, prop, desc) {
	        if (isUnconfigurable(obj, prop)) {
	            throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	        }
	        var originalConfigurableFlag = desc.configurable;
	        if (prop !== 'prototype') {
	            desc = rewriteDescriptor(obj, prop, desc);
	        }
	        return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	    };
	    Object.defineProperties = function (obj, props) {
	        Object.keys(props).forEach(function (prop) {
	            Object.defineProperty(obj, prop, props[prop]);
	        });
	        return obj;
	    };
	    Object.create = function (obj, proto) {
	        if (typeof proto === 'object' && !Object.isFrozen(proto)) {
	            Object.keys(proto).forEach(function (prop) {
	                proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	            });
	        }
	        return _create(obj, proto);
	    };
	    Object.getOwnPropertyDescriptor = function (obj, prop) {
	        var desc = _getOwnPropertyDescriptor(obj, prop);
	        if (isUnconfigurable(obj, prop)) {
	            desc.configurable = false;
	        }
	        return desc;
	    };
	}

	function _redefineProperty(obj, prop, desc) {
	    var originalConfigurableFlag = desc.configurable;
	    desc = rewriteDescriptor(obj, prop, desc);
	    return _tryDefineProperty(obj, prop, desc, originalConfigurableFlag);
	}

	function isUnconfigurable(obj, prop) {
	    return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	function rewriteDescriptor(obj, prop, desc) {
	    desc.configurable = true;
	    if (!desc.configurable) {
	        if (!obj[unconfigurablesKey]) {
	            _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	        }
	        obj[unconfigurablesKey][prop] = true;
	    }
	    return desc;
	}
	function _tryDefineProperty(obj, prop, desc, originalConfigurableFlag) {
	    try {
	        return _defineProperty(obj, prop, desc);
	    }
	    catch (e) {
	        if (desc.configurable) {
	            // In case of errors, when the configurable flag was likely set by rewriteDescriptor(), let's
	            // retry with the original flag value
	            if (typeof originalConfigurableFlag == 'undefined') {
	                delete desc.configurable;
	            }
	            else {
	                desc.configurable = originalConfigurableFlag;
	            }
	            try {
	                return _defineProperty(obj, prop, desc);
	            }
	            catch (e) {
	                var descJson = null;
	                try {
	                    descJson = JSON.stringify(desc);
	                }
	                catch (e) {
	                    descJson = descJson.toString();
	                }
	                console.log("Attempting to configure '" + prop + "' with descriptor '" + descJson + "' on object '" + obj + "' and got error, giving up: " + e);
	            }
	        }
	        else {
	            throw e;
	        }
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var WTF_ISSUE_555 = 'Anchor,Area,Audio,BR,Base,BaseFont,Body,Button,Canvas,Content,DList,Directory,Div,Embed,FieldSet,Font,Form,Frame,FrameSet,HR,Head,Heading,Html,IFrame,Image,Input,Keygen,LI,Label,Legend,Link,Map,Marquee,Media,Menu,Meta,Meter,Mod,OList,Object,OptGroup,Option,Output,Paragraph,Pre,Progress,Quote,Script,Select,Source,Span,Style,TableCaption,TableCell,TableCol,Table,TableRow,TableSection,TextArea,Title,Track,UList,Unknown,Video';
	var NO_EVENT_TARGET = 'ApplicationCache,EventSource,FileReader,InputMethodContext,MediaController,MessagePort,Node,Performance,SVGElementInstance,SharedWorker,TextTrack,TextTrackCue,TextTrackList,WebKitNamedFlow,Window,Worker,WorkerGlobalScope,XMLHttpRequest,XMLHttpRequestEventTarget,XMLHttpRequestUpload,IDBRequest,IDBOpenDBRequest,IDBDatabase,IDBTransaction,IDBCursor,DBIndex,WebSocket'
	    .split(',');
	var EVENT_TARGET = 'EventTarget';
	function eventTargetPatch(_global) {
	    var apis = [];
	    var isWtf = _global['wtf'];
	    if (isWtf) {
	        // Workaround for: https://github.com/google/tracing-framework/issues/555
	        apis = WTF_ISSUE_555.split(',').map(function (v) { return 'HTML' + v + 'Element'; }).concat(NO_EVENT_TARGET);
	    }
	    else if (_global[EVENT_TARGET]) {
	        apis.push(EVENT_TARGET);
	    }
	    else {
	        // Note: EventTarget is not available in all browsers,
	        // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	        apis = NO_EVENT_TARGET;
	    }
	    for (var i = 0; i < apis.length; i++) {
	        var type = _global[apis[i]];
	        patchEventTargetMethods(type && type.prototype);
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	// we have to patch the instance since the proto is non-configurable
	function apply(_global) {
	    var WS = _global.WebSocket;
	    // On Safari window.EventTarget doesn't exist so need to patch WS add/removeEventListener
	    // On older Chrome, no need since EventTarget was already patched
	    if (!_global.EventTarget) {
	        patchEventTargetMethods(WS.prototype);
	    }
	    _global.WebSocket = function (a, b) {
	        var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	        var proxySocket;
	        // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	        var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	        if (onmessageDesc && onmessageDesc.configurable === false) {
	            proxySocket = Object.create(socket);
	            ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function (propName) {
	                proxySocket[propName] = function () {
	                    return socket[propName].apply(socket, arguments);
	                };
	            });
	        }
	        else {
	            // we can patch the real socket
	            proxySocket = socket;
	        }
	        patchOnProperties(proxySocket, ['close', 'error', 'message', 'open']);
	        return proxySocket;
	    };
	    for (var prop in WS) {
	        _global.WebSocket[prop] = WS[prop];
	    }
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'
	    .split(' ');
	function propertyDescriptorPatch(_global) {
	    if (isNode) {
	        return;
	    }
	    var supportsWebSocket = typeof WebSocket !== 'undefined';
	    if (canPatchViaPropertyDescriptor()) {
	        // for browsers that we can patch the descriptor:  Chrome & Firefox
	        if (isBrowser) {
	            patchOnProperties(HTMLElement.prototype, eventNames);
	        }
	        patchOnProperties(XMLHttpRequest.prototype, null);
	        if (typeof IDBIndex !== 'undefined') {
	            patchOnProperties(IDBIndex.prototype, null);
	            patchOnProperties(IDBRequest.prototype, null);
	            patchOnProperties(IDBOpenDBRequest.prototype, null);
	            patchOnProperties(IDBDatabase.prototype, null);
	            patchOnProperties(IDBTransaction.prototype, null);
	            patchOnProperties(IDBCursor.prototype, null);
	        }
	        if (supportsWebSocket) {
	            patchOnProperties(WebSocket.prototype, null);
	        }
	    }
	    else {
	        // Safari, Android browsers (Jelly Bean)
	        patchViaCapturingAllTheEvents();
	        patchClass('XMLHttpRequest');
	        if (supportsWebSocket) {
	            apply(_global);
	        }
	    }
	}
	function canPatchViaPropertyDescriptor() {
	    if (isBrowser && !Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') &&
	        typeof Element !== 'undefined') {
	        // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	        // IDL interface attributes are not configurable
	        var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	        if (desc && !desc.configurable)
	            return false;
	    }
	    var xhrDesc = Object.getOwnPropertyDescriptor(XMLHttpRequest.prototype, 'onreadystatechange');
	    // add enumerable and configurable here because in opera
	    // by default XMLHttpRequest.prototype.onreadystatechange is undefined
	    // without adding enumerable and configurable will cause onreadystatechange
	    // non-configurable
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', {
	        enumerable: true,
	        configurable: true,
	        get: function () {
	            return true;
	        }
	    });
	    var req = new XMLHttpRequest();
	    var result = !!req.onreadystatechange;
	    // restore original desc
	    Object.defineProperty(XMLHttpRequest.prototype, 'onreadystatechange', xhrDesc || {});
	    return result;
	}

	var unboundKey = zoneSymbol('unbound');
	// Whenever any eventListener fires, we check the eventListener target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	    var _loop_1 = function (i) {
	        var property = eventNames[i];
	        var onproperty = 'on' + property;
	        self.addEventListener(property, function (event) {
	            var elt = event.target, bound, source;
	            if (elt) {
	                source = elt.constructor['name'] + '.' + onproperty;
	            }
	            else {
	                source = 'unknown.' + onproperty;
	            }
	            while (elt) {
	                if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	                    bound = Zone.current.wrap(elt[onproperty], source);
	                    bound[unboundKey] = elt[onproperty];
	                    elt[onproperty] = bound;
	                }
	                elt = elt.parentElement;
	            }
	        }, true);
	    };
	    for (var i = 0; i < eventNames.length; i++) {
	        _loop_1(i);
	    }
	    
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	function registerElementPatch(_global) {
	    if (!isBrowser || !('registerElement' in _global.document)) {
	        return;
	    }
	    var _registerElement = document.registerElement;
	    var callbacks = ['createdCallback', 'attachedCallback', 'detachedCallback', 'attributeChangedCallback'];
	    document.registerElement = function (name, opts) {
	        if (opts && opts.prototype) {
	            callbacks.forEach(function (callback) {
	                var source = 'Document.registerElement::' + callback;
	                if (opts.prototype.hasOwnProperty(callback)) {
	                    var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	                    if (descriptor && descriptor.value) {
	                        descriptor.value = Zone.current.wrap(descriptor.value, source);
	                        _redefineProperty(opts.prototype, callback, descriptor);
	                    }
	                    else {
	                        opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                    }
	                }
	                else if (opts.prototype[callback]) {
	                    opts.prototype[callback] = Zone.current.wrap(opts.prototype[callback], source);
	                }
	            });
	        }
	        return _registerElement.apply(document, [name, opts]);
	    };
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */
	var set = 'set';
	var clear = 'clear';
	var blockingMethods = ['alert', 'prompt', 'confirm'];
	var _global = typeof window === 'object' && window || typeof self === 'object' && self || global;
	patchTimer(_global, set, clear, 'Timeout');
	patchTimer(_global, set, clear, 'Interval');
	patchTimer(_global, set, clear, 'Immediate');
	patchTimer(_global, 'request', 'cancel', 'AnimationFrame');
	patchTimer(_global, 'mozRequest', 'mozCancel', 'AnimationFrame');
	patchTimer(_global, 'webkitRequest', 'webkitCancel', 'AnimationFrame');
	for (var i = 0; i < blockingMethods.length; i++) {
	    var name_1 = blockingMethods[i];
	    patchMethod(_global, name_1, function (delegate, symbol, name) {
	        return function (s, args) {
	            return Zone.current.run(delegate, _global, args, name);
	        };
	    });
	}
	eventTargetPatch(_global);
	propertyDescriptorPatch(_global);
	patchClass('MutationObserver');
	patchClass('WebKitMutationObserver');
	patchClass('FileReader');
	propertyPatch();
	registerElementPatch(_global);
	// Treat XMLHTTPRequest as a macrotask.
	patchXHR(_global);
	var XHR_TASK = zoneSymbol('xhrTask');
	var XHR_SYNC = zoneSymbol('xhrSync');
	var XHR_LISTENER = zoneSymbol('xhrListener');
	var XHR_SCHEDULED = zoneSymbol('xhrScheduled');
	function patchXHR(window) {
	    function findPendingTask(target) {
	        var pendingTask = target[XHR_TASK];
	        return pendingTask;
	    }
	    function scheduleTask(task) {
	        self[XHR_SCHEDULED] = false;
	        var data = task.data;
	        // remove existing event listener
	        var listener = data.target[XHR_LISTENER];
	        if (listener) {
	            data.target.removeEventListener('readystatechange', listener);
	        }
	        var newListener = data.target[XHR_LISTENER] = function () {
	            if (data.target.readyState === data.target.DONE) {
	                if (!data.aborted && self[XHR_SCHEDULED]) {
	                    task.invoke();
	                }
	            }
	        };
	        data.target.addEventListener('readystatechange', newListener);
	        var storedTask = data.target[XHR_TASK];
	        if (!storedTask) {
	            data.target[XHR_TASK] = task;
	        }
	        sendNative.apply(data.target, data.args);
	        self[XHR_SCHEDULED] = true;
	        return task;
	    }
	    function placeholderCallback() { }
	    function clearTask(task) {
	        var data = task.data;
	        // Note - ideally, we would call data.target.removeEventListener here, but it's too late
	        // to prevent it from firing. So instead, we store info for the event listener.
	        data.aborted = true;
	        return abortNative.apply(data.target, data.args);
	    }
	    var openNative = patchMethod(window.XMLHttpRequest.prototype, 'open', function () { return function (self, args) {
	        self[XHR_SYNC] = args[2] == false;
	        return openNative.apply(self, args);
	    }; });
	    var sendNative = patchMethod(window.XMLHttpRequest.prototype, 'send', function () { return function (self, args) {
	        var zone = Zone.current;
	        if (self[XHR_SYNC]) {
	            // if the XHR is sync there is no task to schedule, just execute the code.
	            return sendNative.apply(self, args);
	        }
	        else {
	            var options = { target: self, isPeriodic: false, delay: null, args: args, aborted: false };
	            return zone.scheduleMacroTask('XMLHttpRequest.send', placeholderCallback, options, scheduleTask, clearTask);
	        }
	    }; });
	    var abortNative = patchMethod(window.XMLHttpRequest.prototype, 'abort', function (delegate) { return function (self, args) {
	        var task = findPendingTask(self);
	        if (task && typeof task.type == 'string') {
	            // If the XHR has already completed, do nothing.
	            // If the XHR has already been aborted, do nothing.
	            // Fix #569, call abort multiple times before done will cause
	            // macroTask task count be negative number
	            if (task.cancelFn == null || (task.data && task.data.aborted)) {
	                return;
	            }
	            task.zone.cancelTask(task);
	        }
	        // Otherwise, we are trying to abort an XHR which has not yet been sent, so there is no task
	        // to cancel. Do nothing.
	    }; });
	}
	/// GEO_LOCATION
	if (_global['navigator'] && _global['navigator'].geolocation) {
	    patchPrototype(_global['navigator'].geolocation, ['getCurrentPosition', 'watchPosition']);
	}

	/**
	 * @license
	 * Copyright Google Inc. All Rights Reserved.
	 *
	 * Use of this source code is governed by an MIT-style license that can be
	 * found in the LICENSE file at https://angular.io/license
	 */

	})));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(83)))

/***/ },
/* 83 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.5
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(85), __webpack_require__(86), __webpack_require__(104)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.platformBrowser));
	}(this, function (exports,_angular_compiler,_angular_core,_angular_platformBrowser) { 'use strict';

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;

	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResourceLoaderImpl = (function (_super) {
	        __extends(ResourceLoaderImpl, _super);
	        function ResourceLoaderImpl() {
	            _super.apply(this, arguments);
	        }
	        ResourceLoaderImpl.prototype.get = function (url) {
	            var resolve;
	            var reject;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var xhr = new XMLHttpRequest();
	            xhr.open('GET', url, true);
	            xhr.responseType = 'text';
	            xhr.onload = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	                // by IE10)
	                var response = xhr.response || xhr.responseText;
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = xhr.status === 1223 ? 204 : xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = response ? 200 : 0;
	                }
	                if (200 <= status && status <= 300) {
	                    resolve(response);
	                }
	                else {
	                    reject("Failed to load " + url);
	                }
	            };
	            xhr.onerror = function () { reject("Failed to load " + url); };
	            xhr.send();
	            return promise;
	        };
	        ResourceLoaderImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        ResourceLoaderImpl.ctorParameters = function () { return []; };
	        return ResourceLoaderImpl;
	    }(_angular_compiler.ResourceLoader));

	    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        {
	            provide: _angular_core.COMPILER_OPTIONS,
	            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	            multi: true
	        },
	    ];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var _global = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	     * ResourceLoader.
	     *
	     * The template cache needs to be built and loaded into window.$templateCache
	     * via a separate mechanism.
	     */
	    var CachedResourceLoader = (function (_super) {
	        __extends$1(CachedResourceLoader, _super);
	        function CachedResourceLoader() {
	            _super.call(this);
	            this._cache = _global.$templateCache;
	            if (this._cache == null) {
	                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	            }
	        }
	        CachedResourceLoader.prototype.get = function (url) {
	            if (this._cache.hasOwnProperty(url)) {
	                return Promise.resolve(this._cache[url]);
	            }
	            else {
	                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	            }
	        };
	        return CachedResourceLoader;
	    }(_angular_compiler.ResourceLoader));

	    var __platform_browser_dynamic_private__ = {
	        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
	        ResourceLoaderImpl: ResourceLoaderImpl
	    };

	    /**
	     * @stable
	     */
	    var VERSION = new _angular_core.Version('2.4.5');

	    /**
	     * @experimental
	     */
	    var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	    /**
	     * @stable
	     */
	    var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	    exports.platformBrowserDynamic = platformBrowserDynamic;
	    exports.VERSION = VERSION;
	    exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.4.5
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(86)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.5');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A segment of text within the template.
	     */
	    var TextAst = (function () {
	        /**
	         * @param {?} value
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function TextAst(value, ngContentIndex, sourceSpan) {
	            this.value = value;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return TextAst;
	    }());
	    /**
	     * A bound expression within the text of a template.
	     */
	    var BoundTextAst = (function () {
	        /**
	         * @param {?} value
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function BoundTextAst(value, ngContentIndex, sourceSpan) {
	            this.value = value;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundTextAst.prototype.visit = function (visitor, context) {
	            return visitor.visitBoundText(this, context);
	        };
	        return BoundTextAst;
	    }());
	    /**
	     * A plain attribute on an element.
	     */
	    var AttrAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function AttrAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	        return AttrAst;
	    }());
	    /**
	     * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	     * `[\@trigger]="stateExp"`)
	     */
	    var BoundElementPropertyAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} type
	         * @param {?} securityContext
	         * @param {?} needsRuntimeSecurityContext
	         * @param {?} value
	         * @param {?} unit
	         * @param {?} sourceSpan
	         */
	        function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
	            this.name = name;
	            this.type = type;
	            this.securityContext = securityContext;
	            this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
	            this.value = value;
	            this.unit = unit;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	            return visitor.visitElementProperty(this, context);
	        };
	        Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === PropertyBindingType.Animation; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundElementPropertyAst;
	    }());
	    /**
	     * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	     * `(\@trigger.phase)="callback($event)"`).
	     */
	    var BoundEventAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} target
	         * @param {?} phase
	         * @param {?} handler
	         * @param {?} sourceSpan
	         */
	        function BoundEventAst(name, target, phase, handler, sourceSpan) {
	            this.name = name;
	            this.target = target;
	            this.phase = phase;
	            this.handler = handler;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} name
	         * @param {?} target
	         * @param {?} phase
	         * @return {?}
	         */
	        BoundEventAst.calcFullName = function (name, target, phase) {
	            if (target) {
	                return target + ":" + name;
	            }
	            else if (phase) {
	                return "@" + name + "." + phase;
	            }
	            else {
	                return name;
	            }
	        };
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundEventAst.prototype.visit = function (visitor, context) {
	            return visitor.visitEvent(this, context);
	        };
	        Object.defineProperty(BoundEventAst.prototype, "fullName", {
	            /**
	             * @return {?}
	             */
	            get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return !!this.phase; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundEventAst;
	    }());
	    /**
	     * A reference declaration on an element (e.g. `let someName="expression"`).
	     */
	    var ReferenceAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function ReferenceAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReferenceAst.prototype.visit = function (visitor, context) {
	            return visitor.visitReference(this, context);
	        };
	        return ReferenceAst;
	    }());
	    /**
	     * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	     */
	    var VariableAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function VariableAst(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        VariableAst.prototype.visit = function (visitor, context) {
	            return visitor.visitVariable(this, context);
	        };
	        return VariableAst;
	    }());
	    /**
	     * An element declaration in a template.
	     */
	    var ElementAst = (function () {
	        /**
	         * @param {?} name
	         * @param {?} attrs
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} references
	         * @param {?} directives
	         * @param {?} providers
	         * @param {?} hasViewContainer
	         * @param {?} children
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         * @param {?} endSourceSpan
	         */
	        function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
	            this.name = name;
	            this.attrs = attrs;
	            this.inputs = inputs;
	            this.outputs = outputs;
	            this.references = references;
	            this.directives = directives;
	            this.providers = providers;
	            this.hasViewContainer = hasViewContainer;
	            this.children = children;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	            this.endSourceSpan = endSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ElementAst.prototype.visit = function (visitor, context) {
	            return visitor.visitElement(this, context);
	        };
	        return ElementAst;
	    }());
	    /**
	     * A `<template>` element included in an Angular template.
	     */
	    var EmbeddedTemplateAst = (function () {
	        /**
	         * @param {?} attrs
	         * @param {?} outputs
	         * @param {?} references
	         * @param {?} variables
	         * @param {?} directives
	         * @param {?} providers
	         * @param {?} hasViewContainer
	         * @param {?} children
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	            this.attrs = attrs;
	            this.outputs = outputs;
	            this.references = references;
	            this.variables = variables;
	            this.directives = directives;
	            this.providers = providers;
	            this.hasViewContainer = hasViewContainer;
	            this.children = children;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	            return visitor.visitEmbeddedTemplate(this, context);
	        };
	        return EmbeddedTemplateAst;
	    }());
	    /**
	     * A directive property with a bound value (e.g. `*ngIf="condition").
	     */
	    var BoundDirectivePropertyAst = (function () {
	        /**
	         * @param {?} directiveName
	         * @param {?} templateName
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	            this.directiveName = directiveName;
	            this.templateName = templateName;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	            return visitor.visitDirectiveProperty(this, context);
	        };
	        return BoundDirectivePropertyAst;
	    }());
	    /**
	     * A directive declared on an element.
	     */
	    var DirectiveAst = (function () {
	        /**
	         * @param {?} directive
	         * @param {?} inputs
	         * @param {?} hostProperties
	         * @param {?} hostEvents
	         * @param {?} sourceSpan
	         */
	        function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	            this.directive = directive;
	            this.inputs = inputs;
	            this.hostProperties = hostProperties;
	            this.hostEvents = hostEvents;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DirectiveAst.prototype.visit = function (visitor, context) {
	            return visitor.visitDirective(this, context);
	        };
	        return DirectiveAst;
	    }());
	    /**
	     * A provider declared on an element
	     */
	    var ProviderAst = (function () {
	        /**
	         * @param {?} token
	         * @param {?} multiProvider
	         * @param {?} eager
	         * @param {?} providers
	         * @param {?} providerType
	         * @param {?} lifecycleHooks
	         * @param {?} sourceSpan
	         */
	        function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	            this.token = token;
	            this.multiProvider = multiProvider;
	            this.eager = eager;
	            this.providers = providers;
	            this.providerType = providerType;
	            this.lifecycleHooks = lifecycleHooks;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ProviderAst.prototype.visit = function (visitor, context) {
	            // No visit method in the visitor for now...
	            return null;
	        };
	        return ProviderAst;
	    }());
	    var ProviderAstType = {};
	    ProviderAstType.PublicService = 0;
	    ProviderAstType.PrivateService = 1;
	    ProviderAstType.Component = 2;
	    ProviderAstType.Directive = 3;
	    ProviderAstType.Builtin = 4;
	    ProviderAstType[ProviderAstType.PublicService] = "PublicService";
	    ProviderAstType[ProviderAstType.PrivateService] = "PrivateService";
	    ProviderAstType[ProviderAstType.Component] = "Component";
	    ProviderAstType[ProviderAstType.Directive] = "Directive";
	    ProviderAstType[ProviderAstType.Builtin] = "Builtin";
	    /**
	     * Position where content is to be projected (instance of `<ng-content>` in a template).
	     */
	    var NgContentAst = (function () {
	        /**
	         * @param {?} index
	         * @param {?} ngContentIndex
	         * @param {?} sourceSpan
	         */
	        function NgContentAst(index, ngContentIndex, sourceSpan) {
	            this.index = index;
	            this.ngContentIndex = ngContentIndex;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        NgContentAst.prototype.visit = function (visitor, context) {
	            return visitor.visitNgContent(this, context);
	        };
	        return NgContentAst;
	    }());
	    var PropertyBindingType = {};
	    PropertyBindingType.Property = 0;
	    PropertyBindingType.Attribute = 1;
	    PropertyBindingType.Class = 2;
	    PropertyBindingType.Style = 3;
	    PropertyBindingType.Animation = 4;
	    PropertyBindingType[PropertyBindingType.Property] = "Property";
	    PropertyBindingType[PropertyBindingType.Attribute] = "Attribute";
	    PropertyBindingType[PropertyBindingType.Class] = "Class";
	    PropertyBindingType[PropertyBindingType.Style] = "Style";
	    PropertyBindingType[PropertyBindingType.Animation] = "Animation";
	    /**
	     * Visit every node in a list of {\@link TemplateAst}s with the given {\@link TemplateAstVisitor}.
	     * @param {?} visitor
	     * @param {?} asts
	     * @param {?=} context
	     * @return {?}
	     */
	    function templateVisitAll(visitor, asts, context) {
	        if (context === void 0) { context = null; }
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ visit = visitor.visit ?
	            function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	            function (ast) { return ast.visit(visitor, context); };
	        asts.forEach(function (ast) {
	            var /** @type {?} */ astResult = visit(ast);
	            if (astResult) {
	                result.push(astResult);
	            }
	        });
	        return result;
	    }

	    /**
	     * A token representing the a reference to a static type.
	     *
	     * This token is unique for a filePath and name and can be used as a hash table key.
	     */
	    var StaticSymbol = (function () {
	        /**
	         * @param {?} filePath
	         * @param {?} name
	         * @param {?=} members
	         */
	        function StaticSymbol(filePath, name, members) {
	            this.filePath = filePath;
	            this.name = name;
	            this.members = members;
	        }
	        return StaticSymbol;
	    }());
	    /**
	     * A cache of static symbol used by the StaticReflector to return the same symbol for the
	     * same symbol values.
	     */
	    var StaticSymbolCache = (function () {
	        function StaticSymbolCache() {
	            this.cache = new Map();
	        }
	        /**
	         * @param {?} declarationFile
	         * @param {?} name
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticSymbolCache.prototype.get = function (declarationFile, name, members) {
	            members = members || [];
	            var /** @type {?} */ memberSuffix = members.length ? "." + members.join('.') : '';
	            var /** @type {?} */ key = "\"" + declarationFile + "\"." + name + memberSuffix;
	            var /** @type {?} */ result = this.cache.get(key);
	            if (!result) {
	                result = new StaticSymbol(declarationFile, name, members);
	                this.cache.set(key, result);
	            }
	            return result;
	        };
	        return StaticSymbolCache;
	    }());

	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    var /** @type {?} */ STRING_MAP_PROTO = Object.getPrototypeOf({});
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isStrictStringMap(obj) {
	        return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var /** @type {?} */ result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }
	    /**
	     * @param {?} s
	     * @return {?}
	     */
	    function escapeRegExp(s) {
	        return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	    }

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());

	    var /** @type {?} */ isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
	    var /** @type {?} */ ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
	    var /** @type {?} */ LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
	    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
	    var /** @type {?} */ ReflectorReader = _angular_core.__core_private__.ReflectorReader;
	    var /** @type {?} */ ViewContainer = _angular_core.__core_private__.ViewContainer;
	    var /** @type {?} */ CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
	    var /** @type {?} */ ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
	    var /** @type {?} */ AppView = _angular_core.__core_private__.AppView;
	    var /** @type {?} */ DebugAppView = _angular_core.__core_private__.DebugAppView;
	    var /** @type {?} */ NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
	    var /** @type {?} */ registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
	    var /** @type {?} */ ViewType = _angular_core.__core_private__.ViewType;
	    var /** @type {?} */ view_utils = _angular_core.__core_private__.view_utils;
	    var /** @type {?} */ DebugContext = _angular_core.__core_private__.DebugContext;
	    var /** @type {?} */ StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
	    var /** @type {?} */ devModeEqual = _angular_core.__core_private__.devModeEqual;
	    var /** @type {?} */ UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
	    var /** @type {?} */ ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
	    var /** @type {?} */ TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
	    var /** @type {?} */ Console = _angular_core.__core_private__.Console;
	    var /** @type {?} */ reflector = _angular_core.__core_private__.reflector;
	    var /** @type {?} */ Reflector = _angular_core.__core_private__.Reflector;
	    var /** @type {?} */ ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
	    var /** @type {?} */ NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
	    var /** @type {?} */ AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
	    var /** @type {?} */ AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
	    var /** @type {?} */ AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
	    var /** @type {?} */ AnimationStyles = _angular_core.__core_private__.AnimationStyles;
	    var /** @type {?} */ ANY_STATE = _angular_core.__core_private__.ANY_STATE;
	    var /** @type {?} */ DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
	    var /** @type {?} */ EMPTY_STATE = _angular_core.__core_private__.EMPTY_STATE;
	    var /** @type {?} */ FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
	    var /** @type {?} */ prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
	    var /** @type {?} */ balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
	    var /** @type {?} */ clearStyles = _angular_core.__core_private__.clearStyles;
	    var /** @type {?} */ collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
	    var /** @type {?} */ renderStyles = _angular_core.__core_private__.renderStyles;
	    var /** @type {?} */ ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
	    var /** @type {?} */ AnimationTransition = _angular_core.__core_private__.AnimationTransition;

	    var TagContentType = {};
	    TagContentType.RAW_TEXT = 0;
	    TagContentType.ESCAPABLE_RAW_TEXT = 1;
	    TagContentType.PARSABLE_DATA = 2;
	    TagContentType[TagContentType.RAW_TEXT] = "RAW_TEXT";
	    TagContentType[TagContentType.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	    TagContentType[TagContentType.PARSABLE_DATA] = "PARSABLE_DATA";
	    /**
	     * @param {?} elementName
	     * @return {?}
	     */
	    function splitNsName(elementName) {
	        if (elementName[0] != ':') {
	            return [null, elementName];
	        }
	        var /** @type {?} */ colonIndex = elementName.indexOf(':', 1);
	        if (colonIndex == -1) {
	            throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	        }
	        return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	    }
	    /**
	     * @param {?} fullName
	     * @return {?}
	     */
	    function getNsPrefix(fullName) {
	        return fullName === null ? null : splitNsName(fullName)[0];
	    }
	    /**
	     * @param {?} prefix
	     * @param {?} localName
	     * @return {?}
	     */
	    function mergeNsAndName(prefix, localName) {
	        return prefix ? ":" + prefix + ":" + localName : localName;
	    }
	    // see http://www.w3.org/TR/html51/syntax.html#named-character-references
	    // see https://html.spec.whatwg.org/multipage/entities.json
	    // This list is not exhaustive to keep the compiler footprint low.
	    // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	    var /** @type {?} */ NAMED_ENTITIES = {
	        'Aacute': '\u00C1',
	        'aacute': '\u00E1',
	        'Acirc': '\u00C2',
	        'acirc': '\u00E2',
	        'acute': '\u00B4',
	        'AElig': '\u00C6',
	        'aelig': '\u00E6',
	        'Agrave': '\u00C0',
	        'agrave': '\u00E0',
	        'alefsym': '\u2135',
	        'Alpha': '\u0391',
	        'alpha': '\u03B1',
	        'amp': '&',
	        'and': '\u2227',
	        'ang': '\u2220',
	        'apos': '\u0027',
	        'Aring': '\u00C5',
	        'aring': '\u00E5',
	        'asymp': '\u2248',
	        'Atilde': '\u00C3',
	        'atilde': '\u00E3',
	        'Auml': '\u00C4',
	        'auml': '\u00E4',
	        'bdquo': '\u201E',
	        'Beta': '\u0392',
	        'beta': '\u03B2',
	        'brvbar': '\u00A6',
	        'bull': '\u2022',
	        'cap': '\u2229',
	        'Ccedil': '\u00C7',
	        'ccedil': '\u00E7',
	        'cedil': '\u00B8',
	        'cent': '\u00A2',
	        'Chi': '\u03A7',
	        'chi': '\u03C7',
	        'circ': '\u02C6',
	        'clubs': '\u2663',
	        'cong': '\u2245',
	        'copy': '\u00A9',
	        'crarr': '\u21B5',
	        'cup': '\u222A',
	        'curren': '\u00A4',
	        'dagger': '\u2020',
	        'Dagger': '\u2021',
	        'darr': '\u2193',
	        'dArr': '\u21D3',
	        'deg': '\u00B0',
	        'Delta': '\u0394',
	        'delta': '\u03B4',
	        'diams': '\u2666',
	        'divide': '\u00F7',
	        'Eacute': '\u00C9',
	        'eacute': '\u00E9',
	        'Ecirc': '\u00CA',
	        'ecirc': '\u00EA',
	        'Egrave': '\u00C8',
	        'egrave': '\u00E8',
	        'empty': '\u2205',
	        'emsp': '\u2003',
	        'ensp': '\u2002',
	        'Epsilon': '\u0395',
	        'epsilon': '\u03B5',
	        'equiv': '\u2261',
	        'Eta': '\u0397',
	        'eta': '\u03B7',
	        'ETH': '\u00D0',
	        'eth': '\u00F0',
	        'Euml': '\u00CB',
	        'euml': '\u00EB',
	        'euro': '\u20AC',
	        'exist': '\u2203',
	        'fnof': '\u0192',
	        'forall': '\u2200',
	        'frac12': '\u00BD',
	        'frac14': '\u00BC',
	        'frac34': '\u00BE',
	        'frasl': '\u2044',
	        'Gamma': '\u0393',
	        'gamma': '\u03B3',
	        'ge': '\u2265',
	        'gt': '>',
	        'harr': '\u2194',
	        'hArr': '\u21D4',
	        'hearts': '\u2665',
	        'hellip': '\u2026',
	        'Iacute': '\u00CD',
	        'iacute': '\u00ED',
	        'Icirc': '\u00CE',
	        'icirc': '\u00EE',
	        'iexcl': '\u00A1',
	        'Igrave': '\u00CC',
	        'igrave': '\u00EC',
	        'image': '\u2111',
	        'infin': '\u221E',
	        'int': '\u222B',
	        'Iota': '\u0399',
	        'iota': '\u03B9',
	        'iquest': '\u00BF',
	        'isin': '\u2208',
	        'Iuml': '\u00CF',
	        'iuml': '\u00EF',
	        'Kappa': '\u039A',
	        'kappa': '\u03BA',
	        'Lambda': '\u039B',
	        'lambda': '\u03BB',
	        'lang': '\u27E8',
	        'laquo': '\u00AB',
	        'larr': '\u2190',
	        'lArr': '\u21D0',
	        'lceil': '\u2308',
	        'ldquo': '\u201C',
	        'le': '\u2264',
	        'lfloor': '\u230A',
	        'lowast': '\u2217',
	        'loz': '\u25CA',
	        'lrm': '\u200E',
	        'lsaquo': '\u2039',
	        'lsquo': '\u2018',
	        'lt': '<',
	        'macr': '\u00AF',
	        'mdash': '\u2014',
	        'micro': '\u00B5',
	        'middot': '\u00B7',
	        'minus': '\u2212',
	        'Mu': '\u039C',
	        'mu': '\u03BC',
	        'nabla': '\u2207',
	        'nbsp': '\u00A0',
	        'ndash': '\u2013',
	        'ne': '\u2260',
	        'ni': '\u220B',
	        'not': '\u00AC',
	        'notin': '\u2209',
	        'nsub': '\u2284',
	        'Ntilde': '\u00D1',
	        'ntilde': '\u00F1',
	        'Nu': '\u039D',
	        'nu': '\u03BD',
	        'Oacute': '\u00D3',
	        'oacute': '\u00F3',
	        'Ocirc': '\u00D4',
	        'ocirc': '\u00F4',
	        'OElig': '\u0152',
	        'oelig': '\u0153',
	        'Ograve': '\u00D2',
	        'ograve': '\u00F2',
	        'oline': '\u203E',
	        'Omega': '\u03A9',
	        'omega': '\u03C9',
	        'Omicron': '\u039F',
	        'omicron': '\u03BF',
	        'oplus': '\u2295',
	        'or': '\u2228',
	        'ordf': '\u00AA',
	        'ordm': '\u00BA',
	        'Oslash': '\u00D8',
	        'oslash': '\u00F8',
	        'Otilde': '\u00D5',
	        'otilde': '\u00F5',
	        'otimes': '\u2297',
	        'Ouml': '\u00D6',
	        'ouml': '\u00F6',
	        'para': '\u00B6',
	        'permil': '\u2030',
	        'perp': '\u22A5',
	        'Phi': '\u03A6',
	        'phi': '\u03C6',
	        'Pi': '\u03A0',
	        'pi': '\u03C0',
	        'piv': '\u03D6',
	        'plusmn': '\u00B1',
	        'pound': '\u00A3',
	        'prime': '\u2032',
	        'Prime': '\u2033',
	        'prod': '\u220F',
	        'prop': '\u221D',
	        'Psi': '\u03A8',
	        'psi': '\u03C8',
	        'quot': '\u0022',
	        'radic': '\u221A',
	        'rang': '\u27E9',
	        'raquo': '\u00BB',
	        'rarr': '\u2192',
	        'rArr': '\u21D2',
	        'rceil': '\u2309',
	        'rdquo': '\u201D',
	        'real': '\u211C',
	        'reg': '\u00AE',
	        'rfloor': '\u230B',
	        'Rho': '\u03A1',
	        'rho': '\u03C1',
	        'rlm': '\u200F',
	        'rsaquo': '\u203A',
	        'rsquo': '\u2019',
	        'sbquo': '\u201A',
	        'Scaron': '\u0160',
	        'scaron': '\u0161',
	        'sdot': '\u22C5',
	        'sect': '\u00A7',
	        'shy': '\u00AD',
	        'Sigma': '\u03A3',
	        'sigma': '\u03C3',
	        'sigmaf': '\u03C2',
	        'sim': '\u223C',
	        'spades': '\u2660',
	        'sub': '\u2282',
	        'sube': '\u2286',
	        'sum': '\u2211',
	        'sup': '\u2283',
	        'sup1': '\u00B9',
	        'sup2': '\u00B2',
	        'sup3': '\u00B3',
	        'supe': '\u2287',
	        'szlig': '\u00DF',
	        'Tau': '\u03A4',
	        'tau': '\u03C4',
	        'there4': '\u2234',
	        'Theta': '\u0398',
	        'theta': '\u03B8',
	        'thetasym': '\u03D1',
	        'thinsp': '\u2009',
	        'THORN': '\u00DE',
	        'thorn': '\u00FE',
	        'tilde': '\u02DC',
	        'times': '\u00D7',
	        'trade': '\u2122',
	        'Uacute': '\u00DA',
	        'uacute': '\u00FA',
	        'uarr': '\u2191',
	        'uArr': '\u21D1',
	        'Ucirc': '\u00DB',
	        'ucirc': '\u00FB',
	        'Ugrave': '\u00D9',
	        'ugrave': '\u00F9',
	        'uml': '\u00A8',
	        'upsih': '\u03D2',
	        'Upsilon': '\u03A5',
	        'upsilon': '\u03C5',
	        'Uuml': '\u00DC',
	        'uuml': '\u00FC',
	        'weierp': '\u2118',
	        'Xi': '\u039E',
	        'xi': '\u03BE',
	        'Yacute': '\u00DD',
	        'yacute': '\u00FD',
	        'yen': '\u00A5',
	        'yuml': '\u00FF',
	        'Yuml': '\u0178',
	        'Zeta': '\u0396',
	        'zeta': '\u03B6',
	        'zwj': '\u200D',
	        'zwnj': '\u200C',
	    };

	    var HtmlTagDefinition = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function HtmlTagDefinition(_a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	            this.closedByChildren = {};
	            this.closedByParent = false;
	            this.canSelfClose = false;
	            if (closedByChildren && closedByChildren.length > 0) {
	                closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	            }
	            this.isVoid = isVoid;
	            this.closedByParent = closedByParent || isVoid;
	            if (requiredParents && requiredParents.length > 0) {
	                this.requiredParents = {};
	                // The first parent is the list is automatically when none of the listed parents are present
	                this.parentToAdd = requiredParents[0];
	                requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	            }
	            this.implicitNamespacePrefix = implicitNamespacePrefix;
	            this.contentType = contentType;
	            this.ignoreFirstLf = ignoreFirstLf;
	        }
	        /**
	         * @param {?} currentParent
	         * @return {?}
	         */
	        HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	            if (!this.requiredParents) {
	                return false;
	            }
	            if (!currentParent) {
	                return true;
	            }
	            var /** @type {?} */ lcParent = currentParent.toLowerCase();
	            return this.requiredParents[lcParent] != true && lcParent != 'template';
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	            return this.isVoid || name.toLowerCase() in this.closedByChildren;
	        };
	        return HtmlTagDefinition;
	    }());
	    // see http://www.w3.org/TR/html51/syntax.html#optional-tags
	    // This implementation does not fully conform to the HTML5 spec.
	    var /** @type {?} */ TAG_DEFINITIONS = {
	        'base': new HtmlTagDefinition({ isVoid: true }),
	        'meta': new HtmlTagDefinition({ isVoid: true }),
	        'area': new HtmlTagDefinition({ isVoid: true }),
	        'embed': new HtmlTagDefinition({ isVoid: true }),
	        'link': new HtmlTagDefinition({ isVoid: true }),
	        'img': new HtmlTagDefinition({ isVoid: true }),
	        'input': new HtmlTagDefinition({ isVoid: true }),
	        'param': new HtmlTagDefinition({ isVoid: true }),
	        'hr': new HtmlTagDefinition({ isVoid: true }),
	        'br': new HtmlTagDefinition({ isVoid: true }),
	        'source': new HtmlTagDefinition({ isVoid: true }),
	        'track': new HtmlTagDefinition({ isVoid: true }),
	        'wbr': new HtmlTagDefinition({ isVoid: true }),
	        'p': new HtmlTagDefinition({
	            closedByChildren: [
	                'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	                'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	                'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	            ],
	            closedByParent: true
	        }),
	        'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	        'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	        'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	        'tr': new HtmlTagDefinition({
	            closedByChildren: ['tr'],
	            requiredParents: ['tbody', 'tfoot', 'thead'],
	            closedByParent: true
	        }),
	        'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	        'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	        'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	        'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	        'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	        'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	        'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	        'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	        'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	        'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	        'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	        'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	        'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	        'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	        'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	        'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	        'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	        'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	    };
	    var /** @type {?} */ _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	    /**
	     * @param {?} tagName
	     * @return {?}
	     */
	    function getHtmlTagDefinition(tagName) {
	        return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	    }

	    var /** @type {?} */ _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	        '([-\\w]+)|' +
	        '(?:\\.([-\\w]+))|' +
	        // "-" should appear first in the regexp below as FF31 parses "[.-\w]" as a range
	        '(?:\\[([-.\\w*]+)(?:=([^\\]]*))?\\])|' +
	        '(\\))|' +
	        '(\\s*,\\s*)', // ","
	    'g');
	    /**
	     * A css selector contains an element name,
	     * css classes and attribute/value pairs with the purpose
	     * of selecting subsets out of them.
	     */
	    var CssSelector = (function () {
	        function CssSelector() {
	            this.element = null;
	            this.classNames = [];
	            this.attrs = [];
	            this.notSelectors = [];
	        }
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        CssSelector.parse = function (selector) {
	            var /** @type {?} */ results = [];
	            var /** @type {?} */ _addResult = function (res, cssSel) {
	                if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                    cssSel.attrs.length == 0) {
	                    cssSel.element = '*';
	                }
	                res.push(cssSel);
	            };
	            var /** @type {?} */ cssSelector = new CssSelector();
	            var /** @type {?} */ match;
	            var /** @type {?} */ current = cssSelector;
	            var /** @type {?} */ inNot = false;
	            _SELECTOR_REGEXP.lastIndex = 0;
	            while (match = _SELECTOR_REGEXP.exec(selector)) {
	                if (match[1]) {
	                    if (inNot) {
	                        throw new Error('Nesting :not is not allowed in a selector');
	                    }
	                    inNot = true;
	                    current = new CssSelector();
	                    cssSelector.notSelectors.push(current);
	                }
	                if (match[2]) {
	                    current.setElement(match[2]);
	                }
	                if (match[3]) {
	                    current.addClassName(match[3]);
	                }
	                if (match[4]) {
	                    current.addAttribute(match[4], match[5]);
	                }
	                if (match[6]) {
	                    inNot = false;
	                    current = cssSelector;
	                }
	                if (match[7]) {
	                    if (inNot) {
	                        throw new Error('Multiple selectors in :not are not supported');
	                    }
	                    _addResult(results, cssSelector);
	                    cssSelector = current = new CssSelector();
	                }
	            }
	            _addResult(results, cssSelector);
	            return results;
	        };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.isElementSelector = function () {
	            return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	                this.notSelectors.length === 0;
	        };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	        /**
	         * @param {?=} element
	         * @return {?}
	         */
	        CssSelector.prototype.setElement = function (element) {
	            if (element === void 0) { element = null; }
	            this.element = element;
	        };
	        /**
	         * Gets a template string for an element that matches the selector.
	         * @return {?}
	         */
	        CssSelector.prototype.getMatchingElementTemplate = function () {
	            var /** @type {?} */ tagName = this.element || 'div';
	            var /** @type {?} */ classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	            var /** @type {?} */ attrs = '';
	            for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                var /** @type {?} */ attrName = this.attrs[i];
	                var /** @type {?} */ attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	                attrs += " " + attrName + attrValue;
	            }
	            return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	                "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	        };
	        /**
	         * @param {?} name
	         * @param {?=} value
	         * @return {?}
	         */
	        CssSelector.prototype.addAttribute = function (name, value) {
	            if (value === void 0) { value = ''; }
	            this.attrs.push(name, value && value.toLowerCase() || '');
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	        /**
	         * @return {?}
	         */
	        CssSelector.prototype.toString = function () {
	            var /** @type {?} */ res = this.element || '';
	            if (this.classNames) {
	                this.classNames.forEach(function (klass) { return res += "." + klass; });
	            }
	            if (this.attrs) {
	                for (var /** @type {?} */ i = 0; i < this.attrs.length; i += 2) {
	                    var /** @type {?} */ name_1 = this.attrs[i];
	                    var /** @type {?} */ value = this.attrs[i + 1];
	                    res += "[" + name_1 + (value ? '=' + value : '') + "]";
	                }
	            }
	            this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	            return res;
	        };
	        return CssSelector;
	    }());
	    /**
	     * Reads a list of CssSelectors and allows to calculate which ones
	     * are contained in a given CssSelector.
	     */
	    var SelectorMatcher = (function () {
	        function SelectorMatcher() {
	            this._elementMap = new Map();
	            this._elementPartialMap = new Map();
	            this._classMap = new Map();
	            this._classPartialMap = new Map();
	            this._attrValueMap = new Map();
	            this._attrValuePartialMap = new Map();
	            this._listContexts = [];
	        }
	        /**
	         * @param {?} notSelectors
	         * @return {?}
	         */
	        SelectorMatcher.createNotMatcher = function (notSelectors) {
	            var /** @type {?} */ notMatcher = new SelectorMatcher();
	            notMatcher.addSelectables(notSelectors, null);
	            return notMatcher;
	        };
	        /**
	         * @param {?} cssSelectors
	         * @param {?=} callbackCtxt
	         * @return {?}
	         */
	        SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	            var /** @type {?} */ listContext = null;
	            if (cssSelectors.length > 1) {
	                listContext = new SelectorListContext(cssSelectors);
	                this._listContexts.push(listContext);
	            }
	            for (var /** @type {?} */ i = 0; i < cssSelectors.length; i++) {
	                this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	            }
	        };
	        /**
	         * Add an object that can be found later on by calling `match`.
	         * @param {?} cssSelector A css selector
	         * @param {?} callbackCtxt An opaque object that will be given to the callback of the `match` function
	         * @param {?} listContext
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	            var /** @type {?} */ matcher = this;
	            var /** @type {?} */ element = cssSelector.element;
	            var /** @type {?} */ classNames = cssSelector.classNames;
	            var /** @type {?} */ attrs = cssSelector.attrs;
	            var /** @type {?} */ selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	            if (element) {
	                var /** @type {?} */ isTerminal = attrs.length === 0 && classNames.length === 0;
	                if (isTerminal) {
	                    this._addTerminal(matcher._elementMap, element, selectable);
	                }
	                else {
	                    matcher = this._addPartial(matcher._elementPartialMap, element);
	                }
	            }
	            if (classNames) {
	                for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                    var /** @type {?} */ isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                    var /** @type {?} */ className = classNames[i];
	                    if (isTerminal) {
	                        this._addTerminal(matcher._classMap, className, selectable);
	                    }
	                    else {
	                        matcher = this._addPartial(matcher._classPartialMap, className);
	                    }
	                }
	            }
	            if (attrs) {
	                for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                    var /** @type {?} */ isTerminal = i === attrs.length - 2;
	                    var /** @type {?} */ name_2 = attrs[i];
	                    var /** @type {?} */ value = attrs[i + 1];
	                    if (isTerminal) {
	                        var /** @type {?} */ terminalMap = matcher._attrValueMap;
	                        var /** @type {?} */ terminalValuesMap = terminalMap.get(name_2);
	                        if (!terminalValuesMap) {
	                            terminalValuesMap = new Map();
	                            terminalMap.set(name_2, terminalValuesMap);
	                        }
	                        this._addTerminal(terminalValuesMap, value, selectable);
	                    }
	                    else {
	                        var /** @type {?} */ partialMap = matcher._attrValuePartialMap;
	                        var /** @type {?} */ partialValuesMap = partialMap.get(name_2);
	                        if (!partialValuesMap) {
	                            partialValuesMap = new Map();
	                            partialMap.set(name_2, partialValuesMap);
	                        }
	                        matcher = this._addPartial(partialValuesMap, value);
	                    }
	                }
	            }
	        };
	        /**
	         * @param {?} map
	         * @param {?} name
	         * @param {?} selectable
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	            var /** @type {?} */ terminalList = map.get(name);
	            if (!terminalList) {
	                terminalList = [];
	                map.set(name, terminalList);
	            }
	            terminalList.push(selectable);
	        };
	        /**
	         * @param {?} map
	         * @param {?} name
	         * @return {?}
	         */
	        SelectorMatcher.prototype._addPartial = function (map, name) {
	            var /** @type {?} */ matcher = map.get(name);
	            if (!matcher) {
	                matcher = new SelectorMatcher();
	                map.set(name, matcher);
	            }
	            return matcher;
	        };
	        /**
	         * Find the objects that have been added via `addSelectable`
	         * whose css selector is contained in the given css selector.
	         * @param {?} cssSelector A css selector
	         * @param {?} matchedCallback This callback will be called with the object handed into `addSelectable`
	         * @return {?} boolean true if a match was found
	         */
	        SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	            var /** @type {?} */ result = false;
	            var /** @type {?} */ element = cssSelector.element;
	            var /** @type {?} */ classNames = cssSelector.classNames;
	            var /** @type {?} */ attrs = cssSelector.attrs;
	            for (var /** @type {?} */ i = 0; i < this._listContexts.length; i++) {
	                this._listContexts[i].alreadyMatched = false;
	            }
	            result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	            result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	                result;
	            if (classNames) {
	                for (var /** @type {?} */ i = 0; i < classNames.length; i++) {
	                    var /** @type {?} */ className = classNames[i];
	                    result =
	                        this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                    result =
	                        this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                            result;
	                }
	            }
	            if (attrs) {
	                for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                    var /** @type {?} */ name_3 = attrs[i];
	                    var /** @type {?} */ value = attrs[i + 1];
	                    var /** @type {?} */ terminalValuesMap = this._attrValueMap.get(name_3);
	                    if (value) {
	                        result =
	                            this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                    }
	                    result =
	                        this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                    var /** @type {?} */ partialValuesMap = this._attrValuePartialMap.get(name_3);
	                    if (value) {
	                        result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                    }
	                    result =
	                        this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	                }
	            }
	            return result;
	        };
	        /**
	         * \@internal
	         * @param {?} map
	         * @param {?} name
	         * @param {?} cssSelector
	         * @param {?} matchedCallback
	         * @return {?}
	         */
	        SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	            if (!map || typeof name !== 'string') {
	                return false;
	            }
	            var /** @type {?} */ selectables = map.get(name) || [];
	            var /** @type {?} */ starSelectables = map.get('*');
	            if (starSelectables) {
	                selectables = selectables.concat(starSelectables);
	            }
	            if (selectables.length === 0) {
	                return false;
	            }
	            var /** @type {?} */ selectable;
	            var /** @type {?} */ result = false;
	            for (var /** @type {?} */ i = 0; i < selectables.length; i++) {
	                selectable = selectables[i];
	                result = selectable.finalize(cssSelector, matchedCallback) || result;
	            }
	            return result;
	        };
	        /**
	         * \@internal
	         * @param {?} map
	         * @param {?} name
	         * @param {?} cssSelector
	         * @param {?} matchedCallback
	         * @return {?}
	         */
	        SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	            if (!map || typeof name !== 'string') {
	                return false;
	            }
	            var /** @type {?} */ nestedSelector = map.get(name);
	            if (!nestedSelector) {
	                return false;
	            }
	            // TODO(perf): get rid of recursion and measure again
	            // TODO(perf): don't pass the whole selector into the recursion,
	            // but only the not processed parts
	            return nestedSelector.match(cssSelector, matchedCallback);
	        };
	        return SelectorMatcher;
	    }());
	    var SelectorListContext = (function () {
	        /**
	         * @param {?} selectors
	         */
	        function SelectorListContext(selectors) {
	            this.selectors = selectors;
	            this.alreadyMatched = false;
	        }
	        return SelectorListContext;
	    }());
	    var SelectorContext = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} cbContext
	         * @param {?} listContext
	         */
	        function SelectorContext(selector, cbContext, listContext) {
	            this.selector = selector;
	            this.cbContext = cbContext;
	            this.listContext = listContext;
	            this.notSelectors = selector.notSelectors;
	        }
	        /**
	         * @param {?} cssSelector
	         * @param {?} callback
	         * @return {?}
	         */
	        SelectorContext.prototype.finalize = function (cssSelector, callback) {
	            var /** @type {?} */ result = true;
	            if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	                var /** @type {?} */ notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	                result = !notMatcher.match(cssSelector, null);
	            }
	            if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	                if (this.listContext) {
	                    this.listContext.alreadyMatched = true;
	                }
	                callback(this.selector, this.cbContext);
	            }
	            return result;
	        };
	        return SelectorContext;
	    }());

	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends$3(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$3(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ MODULE_SUFFIX = '';
	    var /** @type {?} */ DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function dashCaseToCamelCase(input) {
	        return input.replace(DASH_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return m[1].toUpperCase();
	        });
	    }
	    /**
	     * @param {?} input
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function splitAtColon(input, defaultValues) {
	        return _splitAt(input, ':', defaultValues);
	    }
	    /**
	     * @param {?} input
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function splitAtPeriod(input, defaultValues) {
	        return _splitAt(input, '.', defaultValues);
	    }
	    /**
	     * @param {?} input
	     * @param {?} character
	     * @param {?} defaultValues
	     * @return {?}
	     */
	    function _splitAt(input, character, defaultValues) {
	        var /** @type {?} */ characterIndex = input.indexOf(character);
	        if (characterIndex == -1)
	            return defaultValues;
	        return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	    }
	    /**
	     * @param {?} value
	     * @param {?} visitor
	     * @param {?} context
	     * @return {?}
	     */
	    function visitValue(value, visitor, context) {
	        if (Array.isArray(value)) {
	            return visitor.visitArray(/** @type {?} */ (value), context);
	        }
	        if (isStrictStringMap(value)) {
	            return visitor.visitStringMap(/** @type {?} */ (value), context);
	        }
	        if (value == null || isPrimitive(value)) {
	            return visitor.visitPrimitive(value, context);
	        }
	        return visitor.visitOther(value, context);
	    }
	    var ValueTransformer = (function () {
	        function ValueTransformer() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitArray = function (arr, context) {
	            var _this = this;
	            return arr.map(function (value) { return visitValue(value, _this, context); });
	        };
	        /**
	         * @param {?} map
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitStringMap = function (map, context) {
	            var _this = this;
	            var /** @type {?} */ result = {};
	            Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	        return ValueTransformer;
	    }());
	    var SyncAsyncResult = (function () {
	        /**
	         * @param {?} syncResult
	         * @param {?=} asyncResult
	         */
	        function SyncAsyncResult(syncResult, asyncResult) {
	            if (asyncResult === void 0) { asyncResult = null; }
	            this.syncResult = syncResult;
	            this.asyncResult = asyncResult;
	            if (!asyncResult) {
	                this.asyncResult = Promise.resolve(syncResult);
	            }
	        }
	        return SyncAsyncResult;
	    }());
	    var SyntaxError = (function (_super) {
	        __extends$2(SyntaxError, _super);
	        function SyntaxError() {
	            _super.apply(this, arguments);
	        }
	        return SyntaxError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    // group 0: "[prop] or (event) or @trigger"
	    // group 1: "prop" from "[prop]"
	    // group 2: "event" from "(event)"
	    // group 3: "@trigger" from "@trigger"
	    var /** @type {?} */ HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	    var CompileAnimationEntryMetadata = (function () {
	        /**
	         * @param {?=} name
	         * @param {?=} definitions
	         */
	        function CompileAnimationEntryMetadata(name, definitions) {
	            if (name === void 0) { name = null; }
	            if (definitions === void 0) { definitions = null; }
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return CompileAnimationEntryMetadata;
	    }());
	    /**
	     * @abstract
	     */
	    var CompileAnimationStateMetadata = (function () {
	        function CompileAnimationStateMetadata() {
	        }
	        return CompileAnimationStateMetadata;
	    }());
	    var CompileAnimationStateDeclarationMetadata = (function (_super) {
	        __extends$1(CompileAnimationStateDeclarationMetadata, _super);
	        /**
	         * @param {?} stateNameExpr
	         * @param {?} styles
	         */
	        function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return CompileAnimationStateDeclarationMetadata;
	    }(CompileAnimationStateMetadata));
	    var CompileAnimationStateTransitionMetadata = (function (_super) {
	        __extends$1(CompileAnimationStateTransitionMetadata, _super);
	        /**
	         * @param {?} stateChangeExpr
	         * @param {?} steps
	         */
	        function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return CompileAnimationStateTransitionMetadata;
	    }(CompileAnimationStateMetadata));
	    /**
	     * @abstract
	     */
	    var CompileAnimationMetadata = (function () {
	        function CompileAnimationMetadata() {
	        }
	        return CompileAnimationMetadata;
	    }());
	    var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$1(CompileAnimationKeyframesSequenceMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationKeyframesSequenceMetadata(steps) {
	            if (steps === void 0) { steps = []; }
	            _super.call(this);
	            this.steps = steps;
	        }
	        return CompileAnimationKeyframesSequenceMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationStyleMetadata = (function (_super) {
	        __extends$1(CompileAnimationStyleMetadata, _super);
	        /**
	         * @param {?} offset
	         * @param {?=} styles
	         */
	        function CompileAnimationStyleMetadata(offset, styles) {
	            if (styles === void 0) { styles = null; }
	            _super.call(this);
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return CompileAnimationStyleMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationAnimateMetadata = (function (_super) {
	        __extends$1(CompileAnimationAnimateMetadata, _super);
	        /**
	         * @param {?=} timings
	         * @param {?=} styles
	         */
	        function CompileAnimationAnimateMetadata(timings, styles) {
	            if (timings === void 0) { timings = 0; }
	            if (styles === void 0) { styles = null; }
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return CompileAnimationAnimateMetadata;
	    }(CompileAnimationMetadata));
	    /**
	     * @abstract
	     */
	    var CompileAnimationWithStepsMetadata = (function (_super) {
	        __extends$1(CompileAnimationWithStepsMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationWithStepsMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this);
	            this.steps = steps;
	        }
	        return CompileAnimationWithStepsMetadata;
	    }(CompileAnimationMetadata));
	    var CompileAnimationSequenceMetadata = (function (_super) {
	        __extends$1(CompileAnimationSequenceMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationSequenceMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this, steps);
	        }
	        return CompileAnimationSequenceMetadata;
	    }(CompileAnimationWithStepsMetadata));
	    var CompileAnimationGroupMetadata = (function (_super) {
	        __extends$1(CompileAnimationGroupMetadata, _super);
	        /**
	         * @param {?=} steps
	         */
	        function CompileAnimationGroupMetadata(steps) {
	            if (steps === void 0) { steps = null; }
	            _super.call(this, steps);
	        }
	        return CompileAnimationGroupMetadata;
	    }(CompileAnimationWithStepsMetadata));
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function _sanitizeIdentifier(name) {
	        return name.replace(/\W/g, '_');
	    }
	    var /** @type {?} */ _anonymousTypeIndex = 0;
	    /**
	     * @param {?} compileIdentifier
	     * @return {?}
	     */
	    function identifierName(compileIdentifier) {
	        if (!compileIdentifier || !compileIdentifier.reference) {
	            return null;
	        }
	        var /** @type {?} */ ref = compileIdentifier.reference;
	        if (ref instanceof StaticSymbol) {
	            return ref.name;
	        }
	        if (ref['__anonymousType']) {
	            return ref['__anonymousType'];
	        }
	        var /** @type {?} */ identifier = stringify(ref);
	        if (identifier.indexOf('(') >= 0) {
	            // case: anonymous functions!
	            identifier = "anonymous_" + _anonymousTypeIndex++;
	            ref['__anonymousType'] = identifier;
	        }
	        else {
	            identifier = _sanitizeIdentifier(identifier);
	        }
	        return identifier;
	    }
	    /**
	     * @param {?} compileIdentifier
	     * @return {?}
	     */
	    function identifierModuleUrl(compileIdentifier) {
	        var /** @type {?} */ ref = compileIdentifier.reference;
	        if (ref instanceof StaticSymbol) {
	            return ref.filePath;
	        }
	        return reflector.importUri(ref);
	    }
	    var CompileSummaryKind = {};
	    CompileSummaryKind.Pipe = 0;
	    CompileSummaryKind.Directive = 1;
	    CompileSummaryKind.NgModule = 2;
	    CompileSummaryKind.Injectable = 3;
	    CompileSummaryKind[CompileSummaryKind.Pipe] = "Pipe";
	    CompileSummaryKind[CompileSummaryKind.Directive] = "Directive";
	    CompileSummaryKind[CompileSummaryKind.NgModule] = "NgModule";
	    CompileSummaryKind[CompileSummaryKind.Injectable] = "Injectable";
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function tokenName(token) {
	        return isPresent(token.value) ? _sanitizeIdentifier(token.value) :
	            identifierName(token.identifier);
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function tokenReference(token) {
	        if (isPresent(token.identifier)) {
	            return token.identifier.reference;
	        }
	        else {
	            return token.value;
	        }
	    }
	    /**
	     * Metadata about a stylesheet
	     */
	    var CompileStylesheetMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileStylesheetMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	            this.moduleUrl = moduleUrl;
	            this.styles = _normalizeArray(styles);
	            this.styleUrls = _normalizeArray(styleUrls);
	        }
	        return CompileStylesheetMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a template.
	     */
	    var CompileTemplateMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileTemplateMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	            this.encapsulation = encapsulation;
	            this.template = template;
	            this.templateUrl = templateUrl;
	            this.styles = _normalizeArray(styles);
	            this.styleUrls = _normalizeArray(styleUrls);
	            this.externalStylesheets = _normalizeArray(externalStylesheets);
	            this.animations = animations ? ListWrapper.flatten(animations) : [];
	            this.ngContentSelectors = ngContentSelectors || [];
	            if (interpolation && interpolation.length != 2) {
	                throw new Error("'interpolation' should have a start and an end symbol.");
	            }
	            this.interpolation = interpolation;
	        }
	        /**
	         * @return {?}
	         */
	        CompileTemplateMetadata.prototype.toSummary = function () {
	            return {
	                animations: this.animations.map(function (anim) { return anim.name; }),
	                ngContentSelectors: this.ngContentSelectors,
	                encapsulation: this.encapsulation
	            };
	        };
	        return CompileTemplateMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a directive.
	     */
	    var CompileDirectiveMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileDirectiveMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	            this.isHost = !!isHost;
	            this.type = type;
	            this.isComponent = isComponent;
	            this.selector = selector;
	            this.exportAs = exportAs;
	            this.changeDetection = changeDetection;
	            this.inputs = inputs;
	            this.outputs = outputs;
	            this.hostListeners = hostListeners;
	            this.hostProperties = hostProperties;
	            this.hostAttributes = hostAttributes;
	            this.providers = _normalizeArray(providers);
	            this.viewProviders = _normalizeArray(viewProviders);
	            this.queries = _normalizeArray(queries);
	            this.viewQueries = _normalizeArray(viewQueries);
	            this.entryComponents = _normalizeArray(entryComponents);
	            this.template = template;
	        }
	        /**
	         * @param {?=} __0
	         * @return {?}
	         */
	        CompileDirectiveMetadata.create = function (_a) {
	            var _b = _a === void 0 ? {} : _a, isHost = _b.isHost, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	            var /** @type {?} */ hostListeners = {};
	            var /** @type {?} */ hostProperties = {};
	            var /** @type {?} */ hostAttributes = {};
	            if (isPresent(host)) {
	                Object.keys(host).forEach(function (key) {
	                    var /** @type {?} */ value = host[key];
	                    var /** @type {?} */ matches = key.match(HOST_REG_EXP);
	                    if (matches === null) {
	                        hostAttributes[key] = value;
	                    }
	                    else if (isPresent(matches[1])) {
	                        hostProperties[matches[1]] = value;
	                    }
	                    else if (isPresent(matches[2])) {
	                        hostListeners[matches[2]] = value;
	                    }
	                });
	            }
	            var /** @type {?} */ inputsMap = {};
	            if (isPresent(inputs)) {
	                inputs.forEach(function (bindConfig) {
	                    // canonical syntax: `dirProp: elProp`
	                    // if there is no `:`, use dirProp = elProp
	                    var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                    inputsMap[parts[0]] = parts[1];
	                });
	            }
	            var /** @type {?} */ outputsMap = {};
	            if (isPresent(outputs)) {
	                outputs.forEach(function (bindConfig) {
	                    // canonical syntax: `dirProp: elProp`
	                    // if there is no `:`, use dirProp = elProp
	                    var /** @type {?} */ parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                    outputsMap[parts[0]] = parts[1];
	                });
	            }
	            return new CompileDirectiveMetadata({
	                isHost: isHost,
	                type: type,
	                isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	                inputs: inputsMap,
	                outputs: outputsMap,
	                hostListeners: hostListeners,
	                hostProperties: hostProperties,
	                hostAttributes: hostAttributes,
	                providers: providers,
	                viewProviders: viewProviders,
	                queries: queries,
	                viewQueries: viewQueries,
	                entryComponents: entryComponents,
	                template: template,
	            });
	        };
	        /**
	         * @return {?}
	         */
	        CompileDirectiveMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.Directive,
	                type: this.type,
	                isComponent: this.isComponent,
	                selector: this.selector,
	                exportAs: this.exportAs,
	                inputs: this.inputs,
	                outputs: this.outputs,
	                hostListeners: this.hostListeners,
	                hostProperties: this.hostProperties,
	                hostAttributes: this.hostAttributes,
	                providers: this.providers,
	                viewProviders: this.viewProviders,
	                queries: this.queries,
	                entryComponents: this.entryComponents,
	                changeDetection: this.changeDetection,
	                template: this.template && this.template.toSummary()
	            };
	        };
	        return CompileDirectiveMetadata;
	    }());
	    /**
	     * Construct {\@link CompileDirectiveMetadata} from {\@link ComponentTypeMetadata} and a selector.
	     * @param {?} typeReference
	     * @param {?} compMeta
	     * @return {?}
	     */
	    function createHostComponentMeta(typeReference, compMeta) {
	        var /** @type {?} */ template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	        return CompileDirectiveMetadata.create({
	            isHost: true,
	            type: { reference: typeReference, diDeps: [], lifecycleHooks: [] },
	            template: new CompileTemplateMetadata({
	                encapsulation: _angular_core.ViewEncapsulation.None,
	                template: template,
	                templateUrl: '',
	                styles: [],
	                styleUrls: [],
	                ngContentSelectors: [],
	                animations: []
	            }),
	            changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	            inputs: [],
	            outputs: [],
	            host: {},
	            isComponent: true,
	            selector: '*',
	            providers: [],
	            viewProviders: [],
	            queries: [],
	            viewQueries: []
	        });
	    }
	    var CompilePipeMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompilePipeMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	            this.type = type;
	            this.name = name;
	            this.pure = !!pure;
	        }
	        /**
	         * @return {?}
	         */
	        CompilePipeMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.Pipe,
	                type: this.type,
	                name: this.name,
	                pure: this.pure
	            };
	        };
	        return CompilePipeMetadata;
	    }());
	    /**
	     * Metadata regarding compilation of a module.
	     */
	    var CompileNgModuleMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompileNgModuleMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	            this.type = type;
	            this.declaredDirectives = _normalizeArray(declaredDirectives);
	            this.exportedDirectives = _normalizeArray(exportedDirectives);
	            this.declaredPipes = _normalizeArray(declaredPipes);
	            this.exportedPipes = _normalizeArray(exportedPipes);
	            this.providers = _normalizeArray(providers);
	            this.entryComponents = _normalizeArray(entryComponents);
	            this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	            this.importedModules = _normalizeArray(importedModules);
	            this.exportedModules = _normalizeArray(exportedModules);
	            this.schemas = _normalizeArray(schemas);
	            this.id = id;
	            this.transitiveModule = transitiveModule;
	        }
	        /**
	         * @return {?}
	         */
	        CompileNgModuleMetadata.prototype.toSummary = function () {
	            return {
	                summaryKind: CompileSummaryKind.NgModule,
	                type: this.type,
	                entryComponents: this.transitiveModule.entryComponents,
	                providers: this.transitiveModule.providers,
	                modules: this.transitiveModule.modules,
	                exportedDirectives: this.transitiveModule.exportedDirectives,
	                exportedPipes: this.transitiveModule.exportedPipes
	            };
	        };
	        return CompileNgModuleMetadata;
	    }());
	    var TransitiveCompileNgModuleMetadata = (function () {
	        function TransitiveCompileNgModuleMetadata() {
	            this.directivesSet = new Set();
	            this.directives = [];
	            this.exportedDirectivesSet = new Set();
	            this.exportedDirectives = [];
	            this.pipesSet = new Set();
	            this.pipes = [];
	            this.exportedPipesSet = new Set();
	            this.exportedPipes = [];
	            this.modulesSet = new Set();
	            this.modules = [];
	            this.entryComponentsSet = new Set();
	            this.entryComponents = [];
	            this.providers = [];
	        }
	        /**
	         * @param {?} provider
	         * @param {?} module
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addProvider = function (provider, module) {
	            this.providers.push({ provider: provider, module: module });
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addDirective = function (id) {
	            if (!this.directivesSet.has(id.reference)) {
	                this.directivesSet.add(id.reference);
	                this.directives.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addExportedDirective = function (id) {
	            if (!this.exportedDirectivesSet.has(id.reference)) {
	                this.exportedDirectivesSet.add(id.reference);
	                this.exportedDirectives.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addPipe = function (id) {
	            if (!this.pipesSet.has(id.reference)) {
	                this.pipesSet.add(id.reference);
	                this.pipes.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addExportedPipe = function (id) {
	            if (!this.exportedPipesSet.has(id.reference)) {
	                this.exportedPipesSet.add(id.reference);
	                this.exportedPipes.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addModule = function (id) {
	            if (!this.modulesSet.has(id.reference)) {
	                this.modulesSet.add(id.reference);
	                this.modules.push(id);
	            }
	        };
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        TransitiveCompileNgModuleMetadata.prototype.addEntryComponent = function (id) {
	            if (!this.entryComponentsSet.has(id.reference)) {
	                this.entryComponentsSet.add(id.reference);
	                this.entryComponents.push(id);
	            }
	        };
	        return TransitiveCompileNgModuleMetadata;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _normalizeArray(obj) {
	        return obj || [];
	    }
	    var ProviderMeta = (function () {
	        /**
	         * @param {?} token
	         * @param {?} __1
	         */
	        function ProviderMeta(token, _a) {
	            var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	            this.token = token;
	            this.useClass = useClass;
	            this.useValue = useValue;
	            this.useExisting = useExisting;
	            this.useFactory = useFactory;
	            this.dependencies = deps;
	            this.multi = !!multi;
	        }
	        return ProviderMeta;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ $EOF = 0;
	    var /** @type {?} */ $TAB = 9;
	    var /** @type {?} */ $LF = 10;
	    var /** @type {?} */ $VTAB = 11;
	    var /** @type {?} */ $FF = 12;
	    var /** @type {?} */ $CR = 13;
	    var /** @type {?} */ $SPACE = 32;
	    var /** @type {?} */ $BANG = 33;
	    var /** @type {?} */ $DQ = 34;
	    var /** @type {?} */ $HASH = 35;
	    var /** @type {?} */ $$ = 36;
	    var /** @type {?} */ $PERCENT = 37;
	    var /** @type {?} */ $AMPERSAND = 38;
	    var /** @type {?} */ $SQ = 39;
	    var /** @type {?} */ $LPAREN = 40;
	    var /** @type {?} */ $RPAREN = 41;
	    var /** @type {?} */ $STAR = 42;
	    var /** @type {?} */ $PLUS = 43;
	    var /** @type {?} */ $COMMA = 44;
	    var /** @type {?} */ $MINUS = 45;
	    var /** @type {?} */ $PERIOD = 46;
	    var /** @type {?} */ $SLASH = 47;
	    var /** @type {?} */ $COLON = 58;
	    var /** @type {?} */ $SEMICOLON = 59;
	    var /** @type {?} */ $LT = 60;
	    var /** @type {?} */ $EQ = 61;
	    var /** @type {?} */ $GT = 62;
	    var /** @type {?} */ $QUESTION = 63;
	    var /** @type {?} */ $0 = 48;
	    var /** @type {?} */ $9 = 57;
	    var /** @type {?} */ $A = 65;
	    var /** @type {?} */ $E = 69;
	    var /** @type {?} */ $F = 70;
	    var /** @type {?} */ $X = 88;
	    var /** @type {?} */ $Z = 90;
	    var /** @type {?} */ $LBRACKET = 91;
	    var /** @type {?} */ $BACKSLASH = 92;
	    var /** @type {?} */ $RBRACKET = 93;
	    var /** @type {?} */ $CARET = 94;
	    var /** @type {?} */ $_ = 95;
	    var /** @type {?} */ $a = 97;
	    var /** @type {?} */ $e = 101;
	    var /** @type {?} */ $f = 102;
	    var /** @type {?} */ $n = 110;
	    var /** @type {?} */ $r = 114;
	    var /** @type {?} */ $t = 116;
	    var /** @type {?} */ $u = 117;
	    var /** @type {?} */ $v = 118;
	    var /** @type {?} */ $x = 120;
	    var /** @type {?} */ $z = 122;
	    var /** @type {?} */ $LBRACE = 123;
	    var /** @type {?} */ $BAR = 124;
	    var /** @type {?} */ $RBRACE = 125;
	    var /** @type {?} */ $NBSP = 160;
	    var /** @type {?} */ $BT = 96;
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isWhitespace(code) {
	        return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isDigit(code) {
	        return $0 <= code && code <= $9;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isAsciiLetter(code) {
	        return code >= $a && code <= $z || code >= $A && code <= $Z;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isAsciiHexDigit(code) {
	        return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	    }

	    /**
	     * A replacement for \@Injectable to be used in the compiler, so that
	     * we don't try to evaluate the metadata in the compiler during AoT.
	     * This decorator is enough to make the compiler work with the ReflectiveInjector though.
	     * @return {?}
	     */
	    function CompilerInjectable() {
	        return function (x) { return x; };
	    }

	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @return {?}
	     */
	    function assertArrayOfStrings(identifier, value) {
	        if (!_angular_core.isDevMode() || isBlank(value)) {
	            return;
	        }
	        if (!Array.isArray(value)) {
	            throw new Error("Expected '" + identifier + "' to be an array of strings.");
	        }
	        for (var /** @type {?} */ i = 0; i < value.length; i += 1) {
	            if (typeof value[i] !== 'string') {
	                throw new Error("Expected '" + identifier + "' to be an array of strings.");
	            }
	        }
	    }
	    var /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [
	        /^\s*$/,
	        /[<>]/,
	        /^[{}]$/,
	        /&(#|[a-z])/i,
	        /^\/\//,
	    ];
	    /**
	     * @param {?} identifier
	     * @param {?} value
	     * @return {?}
	     */
	    function assertInterpolationSymbols(identifier, value) {
	        if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
	            throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	        }
	        else if (_angular_core.isDevMode() && !isBlank(value)) {
	            var /** @type {?} */ start_1 = (value[0]);
	            var /** @type {?} */ end_1 = (value[1]);
	            // black list checking
	            INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	                if (regexp.test(start_1) || regexp.test(end_1)) {
	                    throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	                }
	            });
	        }
	    }

	    var InterpolationConfig = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         */
	        function InterpolationConfig(start, end) {
	            this.start = start;
	            this.end = end;
	        }
	        /**
	         * @param {?} markers
	         * @return {?}
	         */
	        InterpolationConfig.fromArray = function (markers) {
	            if (!markers) {
	                return DEFAULT_INTERPOLATION_CONFIG;
	            }
	            assertInterpolationSymbols('interpolation', markers);
	            return new InterpolationConfig(markers[0], markers[1]);
	        };
	        ;
	        return InterpolationConfig;
	    }());
	    var /** @type {?} */ DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ParserError = (function () {
	        /**
	         * @param {?} message
	         * @param {?} input
	         * @param {?} errLocation
	         * @param {?=} ctxLocation
	         */
	        function ParserError(message, input, errLocation, ctxLocation) {
	            this.input = input;
	            this.errLocation = errLocation;
	            this.ctxLocation = ctxLocation;
	            this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	        }
	        return ParserError;
	    }());
	    var ParseSpan = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         */
	        function ParseSpan(start, end) {
	            this.start = start;
	            this.end = end;
	        }
	        return ParseSpan;
	    }());
	    var AST = (function () {
	        /**
	         * @param {?} span
	         */
	        function AST(span) {
	            this.span = span;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        AST.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return null;
	        };
	        /**
	         * @return {?}
	         */
	        AST.prototype.toString = function () { return 'AST'; };
	        return AST;
	    }());
	    /**
	     * Represents a quoted expression of the form:
	     *
	     * quote = prefix `:` uninterpretedExpression
	     * prefix = identifier
	     * uninterpretedExpression = arbitrary string
	     *
	     * A quoted expression is meant to be pre-processed by an AST transformer that
	     * converts it into another AST that no longer contains quoted expressions.
	     * It is meant to allow third-party developers to extend Angular template
	     * expression language. The `uninterpretedExpression` part of the quote is
	     * therefore not interpreted by the Angular's own expression parser.
	     */
	    var Quote = (function (_super) {
	        __extends$4(Quote, _super);
	        /**
	         * @param {?} span
	         * @param {?} prefix
	         * @param {?} uninterpretedExpression
	         * @param {?} location
	         */
	        function Quote(span, prefix, uninterpretedExpression, location) {
	            _super.call(this, span);
	            this.prefix = prefix;
	            this.uninterpretedExpression = uninterpretedExpression;
	            this.location = location;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Quote.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitQuote(this, context);
	        };
	        /**
	         * @return {?}
	         */
	        Quote.prototype.toString = function () { return 'Quote'; };
	        return Quote;
	    }(AST));
	    var EmptyExpr = (function (_super) {
	        __extends$4(EmptyExpr, _super);
	        function EmptyExpr() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        EmptyExpr.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            // do nothing
	        };
	        return EmptyExpr;
	    }(AST));
	    var ImplicitReceiver = (function (_super) {
	        __extends$4(ImplicitReceiver, _super);
	        function ImplicitReceiver() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        ImplicitReceiver.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitImplicitReceiver(this, context);
	        };
	        return ImplicitReceiver;
	    }(AST));
	    /**
	     * Multiple expressions separated by a semicolon.
	     */
	    var Chain = (function (_super) {
	        __extends$4(Chain, _super);
	        /**
	         * @param {?} span
	         * @param {?} expressions
	         */
	        function Chain(span, expressions) {
	            _super.call(this, span);
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Chain.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitChain(this, context);
	        };
	        return Chain;
	    }(AST));
	    var Conditional = (function (_super) {
	        __extends$4(Conditional, _super);
	        /**
	         * @param {?} span
	         * @param {?} condition
	         * @param {?} trueExp
	         * @param {?} falseExp
	         */
	        function Conditional(span, condition, trueExp, falseExp) {
	            _super.call(this, span);
	            this.condition = condition;
	            this.trueExp = trueExp;
	            this.falseExp = falseExp;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Conditional.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitConditional(this, context);
	        };
	        return Conditional;
	    }(AST));
	    var PropertyRead = (function (_super) {
	        __extends$4(PropertyRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         */
	        function PropertyRead(span, receiver, name) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PropertyRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPropertyRead(this, context);
	        };
	        return PropertyRead;
	    }(AST));
	    var PropertyWrite = (function (_super) {
	        __extends$4(PropertyWrite, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} value
	         */
	        function PropertyWrite(span, receiver, name, value) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PropertyWrite.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPropertyWrite(this, context);
	        };
	        return PropertyWrite;
	    }(AST));
	    var SafePropertyRead = (function (_super) {
	        __extends$4(SafePropertyRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         */
	        function SafePropertyRead(span, receiver, name) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        SafePropertyRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitSafePropertyRead(this, context);
	        };
	        return SafePropertyRead;
	    }(AST));
	    var KeyedRead = (function (_super) {
	        __extends$4(KeyedRead, _super);
	        /**
	         * @param {?} span
	         * @param {?} obj
	         * @param {?} key
	         */
	        function KeyedRead(span, obj, key) {
	            _super.call(this, span);
	            this.obj = obj;
	            this.key = key;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        KeyedRead.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitKeyedRead(this, context);
	        };
	        return KeyedRead;
	    }(AST));
	    var KeyedWrite = (function (_super) {
	        __extends$4(KeyedWrite, _super);
	        /**
	         * @param {?} span
	         * @param {?} obj
	         * @param {?} key
	         * @param {?} value
	         */
	        function KeyedWrite(span, obj, key, value) {
	            _super.call(this, span);
	            this.obj = obj;
	            this.key = key;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        KeyedWrite.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitKeyedWrite(this, context);
	        };
	        return KeyedWrite;
	    }(AST));
	    var BindingPipe = (function (_super) {
	        __extends$4(BindingPipe, _super);
	        /**
	         * @param {?} span
	         * @param {?} exp
	         * @param {?} name
	         * @param {?} args
	         */
	        function BindingPipe(span, exp, name, args) {
	            _super.call(this, span);
	            this.exp = exp;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        BindingPipe.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPipe(this, context);
	        };
	        return BindingPipe;
	    }(AST));
	    var LiteralPrimitive = (function (_super) {
	        __extends$4(LiteralPrimitive, _super);
	        /**
	         * @param {?} span
	         * @param {?} value
	         */
	        function LiteralPrimitive(span, value) {
	            _super.call(this, span);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralPrimitive.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralPrimitive(this, context);
	        };
	        return LiteralPrimitive;
	    }(AST));
	    var LiteralArray = (function (_super) {
	        __extends$4(LiteralArray, _super);
	        /**
	         * @param {?} span
	         * @param {?} expressions
	         */
	        function LiteralArray(span, expressions) {
	            _super.call(this, span);
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralArray.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralArray(this, context);
	        };
	        return LiteralArray;
	    }(AST));
	    var LiteralMap = (function (_super) {
	        __extends$4(LiteralMap, _super);
	        /**
	         * @param {?} span
	         * @param {?} keys
	         * @param {?} values
	         */
	        function LiteralMap(span, keys, values) {
	            _super.call(this, span);
	            this.keys = keys;
	            this.values = values;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        LiteralMap.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitLiteralMap(this, context);
	        };
	        return LiteralMap;
	    }(AST));
	    var Interpolation = (function (_super) {
	        __extends$4(Interpolation, _super);
	        /**
	         * @param {?} span
	         * @param {?} strings
	         * @param {?} expressions
	         */
	        function Interpolation(span, strings, expressions) {
	            _super.call(this, span);
	            this.strings = strings;
	            this.expressions = expressions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Interpolation.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitInterpolation(this, context);
	        };
	        return Interpolation;
	    }(AST));
	    var Binary = (function (_super) {
	        __extends$4(Binary, _super);
	        /**
	         * @param {?} span
	         * @param {?} operation
	         * @param {?} left
	         * @param {?} right
	         */
	        function Binary(span, operation, left, right) {
	            _super.call(this, span);
	            this.operation = operation;
	            this.left = left;
	            this.right = right;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Binary.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitBinary(this, context);
	        };
	        return Binary;
	    }(AST));
	    var PrefixNot = (function (_super) {
	        __extends$4(PrefixNot, _super);
	        /**
	         * @param {?} span
	         * @param {?} expression
	         */
	        function PrefixNot(span, expression) {
	            _super.call(this, span);
	            this.expression = expression;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        PrefixNot.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitPrefixNot(this, context);
	        };
	        return PrefixNot;
	    }(AST));
	    var MethodCall = (function (_super) {
	        __extends$4(MethodCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} args
	         */
	        function MethodCall(span, receiver, name, args) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        MethodCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitMethodCall(this, context);
	        };
	        return MethodCall;
	    }(AST));
	    var SafeMethodCall = (function (_super) {
	        __extends$4(SafeMethodCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} args
	         */
	        function SafeMethodCall(span, receiver, name, args) {
	            _super.call(this, span);
	            this.receiver = receiver;
	            this.name = name;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        SafeMethodCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitSafeMethodCall(this, context);
	        };
	        return SafeMethodCall;
	    }(AST));
	    var FunctionCall = (function (_super) {
	        __extends$4(FunctionCall, _super);
	        /**
	         * @param {?} span
	         * @param {?} target
	         * @param {?} args
	         */
	        function FunctionCall(span, target, args) {
	            _super.call(this, span);
	            this.target = target;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        FunctionCall.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return visitor.visitFunctionCall(this, context);
	        };
	        return FunctionCall;
	    }(AST));
	    var ASTWithSource = (function (_super) {
	        __extends$4(ASTWithSource, _super);
	        /**
	         * @param {?} ast
	         * @param {?} source
	         * @param {?} location
	         * @param {?} errors
	         */
	        function ASTWithSource(ast, source, location, errors) {
	            _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
	            this.ast = ast;
	            this.source = source;
	            this.location = location;
	            this.errors = errors;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        ASTWithSource.prototype.visit = function (visitor, context) {
	            if (context === void 0) { context = null; }
	            return this.ast.visit(visitor, context);
	        };
	        /**
	         * @return {?}
	         */
	        ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	        return ASTWithSource;
	    }(AST));
	    var TemplateBinding = (function () {
	        /**
	         * @param {?} span
	         * @param {?} key
	         * @param {?} keyIsVar
	         * @param {?} name
	         * @param {?} expression
	         */
	        function TemplateBinding(span, key, keyIsVar, name, expression) {
	            this.span = span;
	            this.key = key;
	            this.keyIsVar = keyIsVar;
	            this.name = name;
	            this.expression = expression;
	        }
	        return TemplateBinding;
	    }());
	    var RecursiveAstVisitor = (function () {
	        function RecursiveAstVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	            ast.left.visit(this);
	            ast.right.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	            ast.condition.visit(this);
	            ast.trueExp.visit(this);
	            ast.falseExp.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	            ast.exp.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	            ast.target.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	            return this.visitAll(ast.expressions, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	            ast.obj.visit(this);
	            ast.key.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	            ast.obj.visit(this);
	            ast.key.visit(this);
	            ast.value.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	            return this.visitAll(ast.expressions, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	            ast.receiver.visit(this);
	            return this.visitAll(ast.args, context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	            ast.expression.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	            ast.receiver.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	            ast.receiver.visit(this);
	            ast.value.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	            ast.receiver.visit(this);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	            ast.receiver.visit(this);
	            return this.visitAll(ast.args, context);
	        };
	        /**
	         * @param {?} asts
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	            var _this = this;
	            asts.forEach(function (ast) { return ast.visit(_this, context); });
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	        return RecursiveAstVisitor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$2 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var TokenType = {};
	    TokenType.Character = 0;
	    TokenType.Identifier = 1;
	    TokenType.Keyword = 2;
	    TokenType.String = 3;
	    TokenType.Operator = 4;
	    TokenType.Number = 5;
	    TokenType.Error = 6;
	    TokenType[TokenType.Character] = "Character";
	    TokenType[TokenType.Identifier] = "Identifier";
	    TokenType[TokenType.Keyword] = "Keyword";
	    TokenType[TokenType.String] = "String";
	    TokenType[TokenType.Operator] = "Operator";
	    TokenType[TokenType.Number] = "Number";
	    TokenType[TokenType.Error] = "Error";
	    var /** @type {?} */ KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	    var Lexer = (function () {
	        function Lexer() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        Lexer.prototype.tokenize = function (text) {
	            var /** @type {?} */ scanner = new _Scanner(text);
	            var /** @type {?} */ tokens = [];
	            var /** @type {?} */ token = scanner.scanToken();
	            while (token != null) {
	                tokens.push(token);
	                token = scanner.scanToken();
	            }
	            return tokens;
	        };
	        Lexer = __decorate$2([
	            CompilerInjectable(), 
	            __metadata$2('design:paramtypes', [])
	        ], Lexer);
	        return Lexer;
	    }());
	    var Token = (function () {
	        /**
	         * @param {?} index
	         * @param {?} type
	         * @param {?} numValue
	         * @param {?} strValue
	         */
	        function Token(index, type, numValue, strValue) {
	            this.index = index;
	            this.type = type;
	            this.numValue = numValue;
	            this.strValue = strValue;
	        }
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        Token.prototype.isCharacter = function (code) {
	            return this.type == TokenType.Character && this.numValue == code;
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isNumber = function () { return this.type == TokenType.Number; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isString = function () { return this.type == TokenType.String; };
	        /**
	         * @param {?} operater
	         * @return {?}
	         */
	        Token.prototype.isOperator = function (operater) {
	            return this.type == TokenType.Operator && this.strValue == operater;
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isIdentifier = function () { return this.type == TokenType.Identifier; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeyword = function () { return this.type == TokenType.Keyword; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordLet = function () { return this.type == TokenType.Keyword && this.strValue == 'let'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordNull = function () { return this.type == TokenType.Keyword && this.strValue == 'null'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordUndefined = function () {
	            return this.type == TokenType.Keyword && this.strValue == 'undefined';
	        };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordTrue = function () { return this.type == TokenType.Keyword && this.strValue == 'true'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordFalse = function () { return this.type == TokenType.Keyword && this.strValue == 'false'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isKeywordThis = function () { return this.type == TokenType.Keyword && this.strValue == 'this'; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.isError = function () { return this.type == TokenType.Error; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.toNumber = function () { return this.type == TokenType.Number ? this.numValue : -1; };
	        /**
	         * @return {?}
	         */
	        Token.prototype.toString = function () {
	            switch (this.type) {
	                case TokenType.Character:
	                case TokenType.Identifier:
	                case TokenType.Keyword:
	                case TokenType.Operator:
	                case TokenType.String:
	                case TokenType.Error:
	                    return this.strValue;
	                case TokenType.Number:
	                    return this.numValue.toString();
	                default:
	                    return null;
	            }
	        };
	        return Token;
	    }());
	    /**
	     * @param {?} index
	     * @param {?} code
	     * @return {?}
	     */
	    function newCharacterToken(index, code) {
	        return new Token(index, TokenType.Character, code, String.fromCharCode(code));
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newIdentifierToken(index, text) {
	        return new Token(index, TokenType.Identifier, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newKeywordToken(index, text) {
	        return new Token(index, TokenType.Keyword, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newOperatorToken(index, text) {
	        return new Token(index, TokenType.Operator, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} text
	     * @return {?}
	     */
	    function newStringToken(index, text) {
	        return new Token(index, TokenType.String, 0, text);
	    }
	    /**
	     * @param {?} index
	     * @param {?} n
	     * @return {?}
	     */
	    function newNumberToken(index, n) {
	        return new Token(index, TokenType.Number, n, '');
	    }
	    /**
	     * @param {?} index
	     * @param {?} message
	     * @return {?}
	     */
	    function newErrorToken(index, message) {
	        return new Token(index, TokenType.Error, 0, message);
	    }
	    var /** @type {?} */ EOF = new Token(-1, TokenType.Character, 0, '');
	    var _Scanner = (function () {
	        /**
	         * @param {?} input
	         */
	        function _Scanner(input) {
	            this.input = input;
	            this.peek = 0;
	            this.index = -1;
	            this.length = input.length;
	            this.advance();
	        }
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.advance = function () {
	            this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanToken = function () {
	            var /** @type {?} */ input = this.input, /** @type {?} */ length = this.length;
	            var /** @type {?} */ peek = this.peek, /** @type {?} */ index = this.index;
	            // Skip whitespace.
	            while (peek <= $SPACE) {
	                if (++index >= length) {
	                    peek = $EOF;
	                    break;
	                }
	                else {
	                    peek = input.charCodeAt(index);
	                }
	            }
	            this.peek = peek;
	            this.index = index;
	            if (index >= length) {
	                return null;
	            }
	            // Handle identifiers and numbers.
	            if (isIdentifierStart(peek))
	                return this.scanIdentifier();
	            if (isDigit(peek))
	                return this.scanNumber(index);
	            var /** @type {?} */ start = index;
	            switch (peek) {
	                case $PERIOD:
	                    this.advance();
	                    return isDigit(this.peek) ? this.scanNumber(start) :
	                        newCharacterToken(start, $PERIOD);
	                case $LPAREN:
	                case $RPAREN:
	                case $LBRACE:
	                case $RBRACE:
	                case $LBRACKET:
	                case $RBRACKET:
	                case $COMMA:
	                case $COLON:
	                case $SEMICOLON:
	                    return this.scanCharacter(start, peek);
	                case $SQ:
	                case $DQ:
	                    return this.scanString();
	                case $HASH:
	                case $PLUS:
	                case $MINUS:
	                case $STAR:
	                case $SLASH:
	                case $PERCENT:
	                case $CARET:
	                    return this.scanOperator(start, String.fromCharCode(peek));
	                case $QUESTION:
	                    return this.scanComplexOperator(start, '?', $PERIOD, '.');
	                case $LT:
	                case $GT:
	                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	                case $BANG:
	                case $EQ:
	                    return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	                case $AMPERSAND:
	                    return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	                case $BAR:
	                    return this.scanComplexOperator(start, '|', $BAR, '|');
	                case $NBSP:
	                    while (isWhitespace(this.peek))
	                        this.advance();
	                    return this.scanToken();
	            }
	            this.advance();
	            return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	        };
	        /**
	         * @param {?} start
	         * @param {?} code
	         * @return {?}
	         */
	        _Scanner.prototype.scanCharacter = function (start, code) {
	            this.advance();
	            return newCharacterToken(start, code);
	        };
	        /**
	         * @param {?} start
	         * @param {?} str
	         * @return {?}
	         */
	        _Scanner.prototype.scanOperator = function (start, str) {
	            this.advance();
	            return newOperatorToken(start, str);
	        };
	        /**
	         * Tokenize a 2/3 char long operator
	         *
	         * @param {?} start start index in the expression
	         * @param {?} one first symbol (always part of the operator)
	         * @param {?} twoCode code point for the second symbol
	         * @param {?} two second symbol (part of the operator when the second code point matches)
	         * @param {?=} threeCode code point for the third symbol
	         * @param {?=} three third symbol (part of the operator when provided and matches source expression)
	         * @return {?}
	         */
	        _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	            this.advance();
	            var /** @type {?} */ str = one;
	            if (this.peek == twoCode) {
	                this.advance();
	                str += two;
	            }
	            if (threeCode != null && this.peek == threeCode) {
	                this.advance();
	                str += three;
	            }
	            return newOperatorToken(start, str);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanIdentifier = function () {
	            var /** @type {?} */ start = this.index;
	            this.advance();
	            while (isIdentifierPart(this.peek))
	                this.advance();
	            var /** @type {?} */ str = this.input.substring(start, this.index);
	            return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	                newIdentifierToken(start, str);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Scanner.prototype.scanNumber = function (start) {
	            var /** @type {?} */ simple = (this.index === start);
	            this.advance(); // Skip initial digit.
	            while (true) {
	                if (isDigit(this.peek)) {
	                }
	                else if (this.peek == $PERIOD) {
	                    simple = false;
	                }
	                else if (isExponentStart(this.peek)) {
	                    this.advance();
	                    if (isExponentSign(this.peek))
	                        this.advance();
	                    if (!isDigit(this.peek))
	                        return this.error('Invalid exponent', -1);
	                    simple = false;
	                }
	                else {
	                    break;
	                }
	                this.advance();
	            }
	            var /** @type {?} */ str = this.input.substring(start, this.index);
	            var /** @type {?} */ value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
	            return newNumberToken(start, value);
	        };
	        /**
	         * @return {?}
	         */
	        _Scanner.prototype.scanString = function () {
	            var /** @type {?} */ start = this.index;
	            var /** @type {?} */ quote = this.peek;
	            this.advance(); // Skip initial quote.
	            var /** @type {?} */ buffer = '';
	            var /** @type {?} */ marker = this.index;
	            var /** @type {?} */ input = this.input;
	            while (this.peek != quote) {
	                if (this.peek == $BACKSLASH) {
	                    buffer += input.substring(marker, this.index);
	                    this.advance();
	                    var /** @type {?} */ unescapedCode = void 0;
	                    if (this.peek == $u) {
	                        // 4 character hex code for unicode character.
	                        var /** @type {?} */ hex = input.substring(this.index + 1, this.index + 5);
	                        if (/^[0-9a-f]+$/i.test(hex)) {
	                            unescapedCode = parseInt(hex, 16);
	                        }
	                        else {
	                            return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                        }
	                        for (var /** @type {?} */ i = 0; i < 5; i++) {
	                            this.advance();
	                        }
	                    }
	                    else {
	                        unescapedCode = unescape(this.peek);
	                        this.advance();
	                    }
	                    buffer += String.fromCharCode(unescapedCode);
	                    marker = this.index;
	                }
	                else if (this.peek == $EOF) {
	                    return this.error('Unterminated quote', 0);
	                }
	                else {
	                    this.advance();
	                }
	            }
	            var /** @type {?} */ last = input.substring(marker, this.index);
	            this.advance(); // Skip terminating quote.
	            return newStringToken(start, buffer + last);
	        };
	        /**
	         * @param {?} message
	         * @param {?} offset
	         * @return {?}
	         */
	        _Scanner.prototype.error = function (message, offset) {
	            var /** @type {?} */ position = this.index + offset;
	            return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	        };
	        return _Scanner;
	    }());
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isIdentifierStart(code) {
	        return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	            (code == $_) || (code == $$);
	    }
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function isIdentifier(input) {
	        if (input.length == 0)
	            return false;
	        var /** @type {?} */ scanner = new _Scanner(input);
	        if (!isIdentifierStart(scanner.peek))
	            return false;
	        scanner.advance();
	        while (scanner.peek !== $EOF) {
	            if (!isIdentifierPart(scanner.peek))
	                return false;
	            scanner.advance();
	        }
	        return true;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isIdentifierPart(code) {
	        return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	            (code == $$);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isExponentStart(code) {
	        return code == $e || code == $E;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isExponentSign(code) {
	        return code == $MINUS || code == $PLUS;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isQuote(code) {
	        return code === $SQ || code === $DQ || code === $BT;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function unescape(code) {
	        switch (code) {
	            case $n:
	                return $LF;
	            case $f:
	                return $FF;
	            case $r:
	                return $CR;
	            case $t:
	                return $TAB;
	            case $v:
	                return $VTAB;
	            default:
	                return code;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$1 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var SplitInterpolation = (function () {
	        /**
	         * @param {?} strings
	         * @param {?} expressions
	         * @param {?} offsets
	         */
	        function SplitInterpolation(strings, expressions, offsets) {
	            this.strings = strings;
	            this.expressions = expressions;
	            this.offsets = offsets;
	        }
	        return SplitInterpolation;
	    }());
	    var TemplateBindingParseResult = (function () {
	        /**
	         * @param {?} templateBindings
	         * @param {?} warnings
	         * @param {?} errors
	         */
	        function TemplateBindingParseResult(templateBindings, warnings, errors) {
	            this.templateBindings = templateBindings;
	            this.warnings = warnings;
	            this.errors = errors;
	        }
	        return TemplateBindingParseResult;
	    }());
	    /**
	     * @param {?} config
	     * @return {?}
	     */
	    function _createInterpolateRegExp(config) {
	        var /** @type {?} */ pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	        return new RegExp(pattern, 'g');
	    }
	    var Parser = (function () {
	        /**
	         * @param {?} _lexer
	         */
	        function Parser(_lexer) {
	            this._lexer = _lexer;
	            this.errors = [];
	        }
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            this._checkNoInterpolation(input, location, interpolationConfig);
	            var /** @type {?} */ sourceToLex = this._stripComments(input);
	            var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(input));
	            var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	                .parseChain();
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ ast = this._parseBindingAst(input, location, interpolationConfig);
	            var /** @type {?} */ errors = SimpleExpressionChecker.check(ast);
	            if (errors.length > 0) {
	                this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	            }
	            return new ASTWithSource(ast, input, location, this.errors);
	        };
	        /**
	         * @param {?} message
	         * @param {?} input
	         * @param {?} errLocation
	         * @param {?=} ctxLocation
	         * @return {?}
	         */
	        Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	            this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	            // Quotes expressions use 3rd-party expression language. We don't want to use
	            // our lexer or parser for that, so we check for that ahead of time.
	            var /** @type {?} */ quote = this._parseQuote(input, location);
	            if (isPresent(quote)) {
	                return quote;
	            }
	            this._checkNoInterpolation(input, location, interpolationConfig);
	            var /** @type {?} */ sourceToLex = this._stripComments(input);
	            var /** @type {?} */ tokens = this._lexer.tokenize(sourceToLex);
	            return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	                .parseChain();
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype._parseQuote = function (input, location) {
	            if (isBlank(input))
	                return null;
	            var /** @type {?} */ prefixSeparatorIndex = input.indexOf(':');
	            if (prefixSeparatorIndex == -1)
	                return null;
	            var /** @type {?} */ prefix = input.substring(0, prefixSeparatorIndex).trim();
	            if (!isIdentifier(prefix))
	                return null;
	            var /** @type {?} */ uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	            return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	            var /** @type {?} */ tokens = this._lexer.tokenize(input);
	            if (prefixToken) {
	                // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	                var /** @type {?} */ prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                    t.index = 0;
	                    return t;
	                });
	                tokens.unshift.apply(tokens, prefixTokens);
	            }
	            return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	                .parseTemplateBindings();
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ split = this.splitInterpolation(input, location, interpolationConfig);
	            if (split == null)
	                return null;
	            var /** @type {?} */ expressions = [];
	            for (var /** @type {?} */ i = 0; i < split.expressions.length; ++i) {
	                var /** @type {?} */ expressionText = split.expressions[i];
	                var /** @type {?} */ sourceToLex = this._stripComments(expressionText);
	                var /** @type {?} */ tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	                var /** @type {?} */ ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                    .parseChain();
	                expressions.push(ast);
	            }
	            return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	            var /** @type {?} */ parts = input.split(regexp);
	            if (parts.length <= 1) {
	                return null;
	            }
	            var /** @type {?} */ strings = [];
	            var /** @type {?} */ expressions = [];
	            var /** @type {?} */ offsets = [];
	            var /** @type {?} */ offset = 0;
	            for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                var /** @type {?} */ part = parts[i];
	                if (i % 2 === 0) {
	                    // fixed string
	                    strings.push(part);
	                    offset += part.length;
	                }
	                else if (part.trim().length > 0) {
	                    offset += interpolationConfig.start.length;
	                    expressions.push(part);
	                    offsets.push(offset);
	                    offset += part.length + interpolationConfig.end.length;
	                }
	                else {
	                    this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                    expressions.push('$implict');
	                    offsets.push(offset);
	                }
	            }
	            return new SplitInterpolation(strings, expressions, offsets);
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @return {?}
	         */
	        Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	            return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
	        };
	        /**
	         * @param {?} input
	         * @return {?}
	         */
	        Parser.prototype._stripComments = function (input) {
	            var /** @type {?} */ i = this._commentStart(input);
	            return isPresent(i) ? input.substring(0, i).trim() : input;
	        };
	        /**
	         * @param {?} input
	         * @return {?}
	         */
	        Parser.prototype._commentStart = function (input) {
	            var /** @type {?} */ outerQuote = null;
	            for (var /** @type {?} */ i = 0; i < input.length - 1; i++) {
	                var /** @type {?} */ char = input.charCodeAt(i);
	                var /** @type {?} */ nextChar = input.charCodeAt(i + 1);
	                if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
	                    return i;
	                if (outerQuote === char) {
	                    outerQuote = null;
	                }
	                else if (isBlank(outerQuote) && isQuote(char)) {
	                    outerQuote = char;
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	            var /** @type {?} */ regexp = _createInterpolateRegExp(interpolationConfig);
	            var /** @type {?} */ parts = input.split(regexp);
	            if (parts.length > 1) {
	                this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	            }
	        };
	        /**
	         * @param {?} parts
	         * @param {?} partInErrIdx
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	            var /** @type {?} */ errLocation = '';
	            for (var /** @type {?} */ j = 0; j < partInErrIdx; j++) {
	                errLocation += j % 2 === 0 ?
	                    parts[j] :
	                    "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	            }
	            return errLocation.length;
	        };
	        Parser = __decorate$1([
	            CompilerInjectable(), 
	            __metadata$1('design:paramtypes', [Lexer])
	        ], Parser);
	        return Parser;
	    }());
	    var _ParseAST = (function () {
	        /**
	         * @param {?} input
	         * @param {?} location
	         * @param {?} tokens
	         * @param {?} inputLength
	         * @param {?} parseAction
	         * @param {?} errors
	         * @param {?} offset
	         */
	        function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	            this.input = input;
	            this.location = location;
	            this.tokens = tokens;
	            this.inputLength = inputLength;
	            this.parseAction = parseAction;
	            this.errors = errors;
	            this.offset = offset;
	            this.rparensExpected = 0;
	            this.rbracketsExpected = 0;
	            this.rbracesExpected = 0;
	            this.index = 0;
	        }
	        /**
	         * @param {?} offset
	         * @return {?}
	         */
	        _ParseAST.prototype.peek = function (offset) {
	            var /** @type {?} */ i = this.index + offset;
	            return i < this.tokens.length ? this.tokens[i] : EOF;
	        };
	        Object.defineProperty(_ParseAST.prototype, "next", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.peek(0); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                    this.inputLength + this.offset;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.advance = function () { this.index++; };
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        _ParseAST.prototype.optionalCharacter = function (code) {
	            if (this.next.isCharacter(code)) {
	                this.advance();
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	        /**
	         * @param {?} code
	         * @return {?}
	         */
	        _ParseAST.prototype.expectCharacter = function (code) {
	            if (this.optionalCharacter(code))
	                return;
	            this.error("Missing expected " + String.fromCharCode(code));
	        };
	        /**
	         * @param {?} op
	         * @return {?}
	         */
	        _ParseAST.prototype.optionalOperator = function (op) {
	            if (this.next.isOperator(op)) {
	                this.advance();
	                return true;
	            }
	            else {
	                return false;
	            }
	        };
	        /**
	         * @param {?} operator
	         * @return {?}
	         */
	        _ParseAST.prototype.expectOperator = function (operator) {
	            if (this.optionalOperator(operator))
	                return;
	            this.error("Missing expected operator " + operator);
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	            var /** @type {?} */ n = this.next;
	            if (!n.isIdentifier() && !n.isKeyword()) {
	                this.error("Unexpected token " + n + ", expected identifier or keyword");
	                return '';
	            }
	            this.advance();
	            return n.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	            var /** @type {?} */ n = this.next;
	            if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	                this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	                return '';
	            }
	            this.advance();
	            return n.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseChain = function () {
	            var /** @type {?} */ exprs = [];
	            var /** @type {?} */ start = this.inputIndex;
	            while (this.index < this.tokens.length) {
	                var /** @type {?} */ expr = this.parsePipe();
	                exprs.push(expr);
	                if (this.optionalCharacter($SEMICOLON)) {
	                    if (!this.parseAction) {
	                        this.error('Binding expression cannot contain chained expression');
	                    }
	                    while (this.optionalCharacter($SEMICOLON)) {
	                    } // read all semicolons
	                }
	                else if (this.index < this.tokens.length) {
	                    this.error("Unexpected token '" + this.next + "'");
	                }
	            }
	            if (exprs.length == 0)
	                return new EmptyExpr(this.span(start));
	            if (exprs.length == 1)
	                return exprs[0];
	            return new Chain(this.span(start), exprs);
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePipe = function () {
	            var /** @type {?} */ result = this.parseExpression();
	            if (this.optionalOperator('|')) {
	                if (this.parseAction) {
	                    this.error('Cannot have a pipe in an action expression');
	                }
	                do {
	                    var /** @type {?} */ name_1 = this.expectIdentifierOrKeyword();
	                    var /** @type {?} */ args = [];
	                    while (this.optionalCharacter($COLON)) {
	                        args.push(this.parseExpression());
	                    }
	                    result = new BindingPipe(this.span(result.span.start), result, name_1, args);
	                } while (this.optionalOperator('|'));
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseConditional = function () {
	            var /** @type {?} */ start = this.inputIndex;
	            var /** @type {?} */ result = this.parseLogicalOr();
	            if (this.optionalOperator('?')) {
	                var /** @type {?} */ yes = this.parsePipe();
	                var /** @type {?} */ no = void 0;
	                if (!this.optionalCharacter($COLON)) {
	                    var /** @type {?} */ end = this.inputIndex;
	                    var /** @type {?} */ expression = this.input.substring(start, end);
	                    this.error("Conditional expression " + expression + " requires all 3 expressions");
	                    no = new EmptyExpr(this.span(start));
	                }
	                else {
	                    no = this.parsePipe();
	                }
	                return new Conditional(this.span(start), result, yes, no);
	            }
	            else {
	                return result;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLogicalOr = function () {
	            // '||'
	            var /** @type {?} */ result = this.parseLogicalAnd();
	            while (this.optionalOperator('||')) {
	                var /** @type {?} */ right = this.parseLogicalAnd();
	                result = new Binary(this.span(result.span.start), '||', result, right);
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLogicalAnd = function () {
	            // '&&'
	            var /** @type {?} */ result = this.parseEquality();
	            while (this.optionalOperator('&&')) {
	                var /** @type {?} */ right = this.parseEquality();
	                result = new Binary(this.span(result.span.start), '&&', result, right);
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseEquality = function () {
	            // '==','!=','===','!=='
	            var /** @type {?} */ result = this.parseRelational();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '==':
	                    case '===':
	                    case '!=':
	                    case '!==':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseRelational();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseRelational = function () {
	            // '<', '>', '<=', '>='
	            var /** @type {?} */ result = this.parseAdditive();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '<':
	                    case '>':
	                    case '<=':
	                    case '>=':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseAdditive();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseAdditive = function () {
	            // '+', '-'
	            var /** @type {?} */ result = this.parseMultiplicative();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '+':
	                    case '-':
	                        this.advance();
	                        var /** @type {?} */ right = this.parseMultiplicative();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseMultiplicative = function () {
	            // '*', '%', '/'
	            var /** @type {?} */ result = this.parsePrefix();
	            while (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ operator = this.next.strValue;
	                switch (operator) {
	                    case '*':
	                    case '%':
	                    case '/':
	                        this.advance();
	                        var /** @type {?} */ right = this.parsePrefix();
	                        result = new Binary(this.span(result.span.start), operator, result, right);
	                        continue;
	                }
	                break;
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePrefix = function () {
	            if (this.next.type == TokenType.Operator) {
	                var /** @type {?} */ start = this.inputIndex;
	                var /** @type {?} */ operator = this.next.strValue;
	                var /** @type {?} */ result = void 0;
	                switch (operator) {
	                    case '+':
	                        this.advance();
	                        return this.parsePrefix();
	                    case '-':
	                        this.advance();
	                        result = this.parsePrefix();
	                        return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                    case '!':
	                        this.advance();
	                        result = this.parsePrefix();
	                        return new PrefixNot(this.span(start), result);
	                }
	            }
	            return this.parseCallChain();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseCallChain = function () {
	            var /** @type {?} */ result = this.parsePrimary();
	            while (true) {
	                if (this.optionalCharacter($PERIOD)) {
	                    result = this.parseAccessMemberOrMethodCall(result, false);
	                }
	                else if (this.optionalOperator('?.')) {
	                    result = this.parseAccessMemberOrMethodCall(result, true);
	                }
	                else if (this.optionalCharacter($LBRACKET)) {
	                    this.rbracketsExpected++;
	                    var /** @type {?} */ key = this.parsePipe();
	                    this.rbracketsExpected--;
	                    this.expectCharacter($RBRACKET);
	                    if (this.optionalOperator('=')) {
	                        var /** @type {?} */ value = this.parseConditional();
	                        result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                    }
	                    else {
	                        result = new KeyedRead(this.span(result.span.start), result, key);
	                    }
	                }
	                else if (this.optionalCharacter($LPAREN)) {
	                    this.rparensExpected++;
	                    var /** @type {?} */ args = this.parseCallArguments();
	                    this.rparensExpected--;
	                    this.expectCharacter($RPAREN);
	                    result = new FunctionCall(this.span(result.span.start), result, args);
	                }
	                else {
	                    return result;
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parsePrimary = function () {
	            var /** @type {?} */ start = this.inputIndex;
	            if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ result = this.parsePipe();
	                this.rparensExpected--;
	                this.expectCharacter($RPAREN);
	                return result;
	            }
	            else if (this.next.isKeywordNull()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), null);
	            }
	            else if (this.next.isKeywordUndefined()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), void 0);
	            }
	            else if (this.next.isKeywordTrue()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), true);
	            }
	            else if (this.next.isKeywordFalse()) {
	                this.advance();
	                return new LiteralPrimitive(this.span(start), false);
	            }
	            else if (this.next.isKeywordThis()) {
	                this.advance();
	                return new ImplicitReceiver(this.span(start));
	            }
	            else if (this.optionalCharacter($LBRACKET)) {
	                this.rbracketsExpected++;
	                var /** @type {?} */ elements = this.parseExpressionList($RBRACKET);
	                this.rbracketsExpected--;
	                this.expectCharacter($RBRACKET);
	                return new LiteralArray(this.span(start), elements);
	            }
	            else if (this.next.isCharacter($LBRACE)) {
	                return this.parseLiteralMap();
	            }
	            else if (this.next.isIdentifier()) {
	                return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	            }
	            else if (this.next.isNumber()) {
	                var /** @type {?} */ value = this.next.toNumber();
	                this.advance();
	                return new LiteralPrimitive(this.span(start), value);
	            }
	            else if (this.next.isString()) {
	                var /** @type {?} */ literalValue = this.next.toString();
	                this.advance();
	                return new LiteralPrimitive(this.span(start), literalValue);
	            }
	            else if (this.index >= this.tokens.length) {
	                this.error("Unexpected end of expression: " + this.input);
	                return new EmptyExpr(this.span(start));
	            }
	            else {
	                this.error("Unexpected token " + this.next);
	                return new EmptyExpr(this.span(start));
	            }
	        };
	        /**
	         * @param {?} terminator
	         * @return {?}
	         */
	        _ParseAST.prototype.parseExpressionList = function (terminator) {
	            var /** @type {?} */ result = [];
	            if (!this.next.isCharacter(terminator)) {
	                do {
	                    result.push(this.parsePipe());
	                } while (this.optionalCharacter($COMMA));
	            }
	            return result;
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseLiteralMap = function () {
	            var /** @type {?} */ keys = [];
	            var /** @type {?} */ values = [];
	            var /** @type {?} */ start = this.inputIndex;
	            this.expectCharacter($LBRACE);
	            if (!this.optionalCharacter($RBRACE)) {
	                this.rbracesExpected++;
	                do {
	                    var /** @type {?} */ key = this.expectIdentifierOrKeywordOrString();
	                    keys.push(key);
	                    this.expectCharacter($COLON);
	                    values.push(this.parsePipe());
	                } while (this.optionalCharacter($COMMA));
	                this.rbracesExpected--;
	                this.expectCharacter($RBRACE);
	            }
	            return new LiteralMap(this.span(start), keys, values);
	        };
	        /**
	         * @param {?} receiver
	         * @param {?=} isSafe
	         * @return {?}
	         */
	        _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	            if (isSafe === void 0) { isSafe = false; }
	            var /** @type {?} */ start = receiver.span.start;
	            var /** @type {?} */ id = this.expectIdentifierOrKeyword();
	            if (this.optionalCharacter($LPAREN)) {
	                this.rparensExpected++;
	                var /** @type {?} */ args = this.parseCallArguments();
	                this.expectCharacter($RPAREN);
	                this.rparensExpected--;
	                var /** @type {?} */ span = this.span(start);
	                return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                    new MethodCall(span, receiver, id, args);
	            }
	            else {
	                if (isSafe) {
	                    if (this.optionalOperator('=')) {
	                        this.error('The \'?.\' operator cannot be used in the assignment');
	                        return new EmptyExpr(this.span(start));
	                    }
	                    else {
	                        return new SafePropertyRead(this.span(start), receiver, id);
	                    }
	                }
	                else {
	                    if (this.optionalOperator('=')) {
	                        if (!this.parseAction) {
	                            this.error('Bindings cannot contain assignments');
	                            return new EmptyExpr(this.span(start));
	                        }
	                        var /** @type {?} */ value = this.parseConditional();
	                        return new PropertyWrite(this.span(start), receiver, id, value);
	                    }
	                    else {
	                        return new PropertyRead(this.span(start), receiver, id);
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseCallArguments = function () {
	            if (this.next.isCharacter($RPAREN))
	                return [];
	            var /** @type {?} */ positionals = [];
	            do {
	                positionals.push(this.parsePipe());
	            } while (this.optionalCharacter($COMMA));
	            return (positionals);
	        };
	        /**
	         * An identifier, a keyword, a string with an optional `-` inbetween.
	         * @return {?}
	         */
	        _ParseAST.prototype.expectTemplateBindingKey = function () {
	            var /** @type {?} */ result = '';
	            var /** @type {?} */ operatorFound = false;
	            do {
	                result += this.expectIdentifierOrKeywordOrString();
	                operatorFound = this.optionalOperator('-');
	                if (operatorFound) {
	                    result += '-';
	                }
	            } while (operatorFound);
	            return result.toString();
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.parseTemplateBindings = function () {
	            var /** @type {?} */ bindings = [];
	            var /** @type {?} */ prefix = null;
	            var /** @type {?} */ warnings = [];
	            while (this.index < this.tokens.length) {
	                var /** @type {?} */ start = this.inputIndex;
	                var /** @type {?} */ keyIsVar = this.peekKeywordLet();
	                if (keyIsVar) {
	                    this.advance();
	                }
	                var /** @type {?} */ key = this.expectTemplateBindingKey();
	                if (!keyIsVar) {
	                    if (prefix == null) {
	                        prefix = key;
	                    }
	                    else {
	                        key = prefix + key[0].toUpperCase() + key.substring(1);
	                    }
	                }
	                this.optionalCharacter($COLON);
	                var /** @type {?} */ name_2 = null;
	                var /** @type {?} */ expression = null;
	                if (keyIsVar) {
	                    if (this.optionalOperator('=')) {
	                        name_2 = this.expectTemplateBindingKey();
	                    }
	                    else {
	                        name_2 = '\$implicit';
	                    }
	                }
	                else if (this.next !== EOF && !this.peekKeywordLet()) {
	                    var /** @type {?} */ start_1 = this.inputIndex;
	                    var /** @type {?} */ ast = this.parsePipe();
	                    var /** @type {?} */ source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
	                    expression = new ASTWithSource(ast, source, this.location, this.errors);
	                }
	                bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
	                if (!this.optionalCharacter($SEMICOLON)) {
	                    this.optionalCharacter($COMMA);
	                }
	            }
	            return new TemplateBindingParseResult(bindings, warnings, this.errors);
	        };
	        /**
	         * @param {?} message
	         * @param {?=} index
	         * @return {?}
	         */
	        _ParseAST.prototype.error = function (message, index) {
	            if (index === void 0) { index = null; }
	            this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	            this.skip();
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        _ParseAST.prototype.locationText = function (index) {
	            if (index === void 0) { index = null; }
	            if (isBlank(index))
	                index = this.index;
	            return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	                "at the end of the expression";
	        };
	        /**
	         * @return {?}
	         */
	        _ParseAST.prototype.skip = function () {
	            var /** @type {?} */ n = this.next;
	            while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	                (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	                (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	                (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	                if (this.next.isError()) {
	                    this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	                }
	                this.advance();
	                n = this.next;
	            }
	        };
	        return _ParseAST;
	    }());
	    var SimpleExpressionChecker = (function () {
	        function SimpleExpressionChecker() {
	            this.errors = [];
	        }
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        SimpleExpressionChecker.check = function (ast) {
	            var /** @type {?} */ s = new SimpleExpressionChecker();
	            ast.visit(s);
	            return s.errors;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	        /**
	         * @param {?} asts
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitAll = function (asts) {
	            var _this = this;
	            return asts.map(function (node) { return node.visit(_this); });
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	        return SimpleExpressionChecker;
	    }());

	    var ParseLocation = (function () {
	        /**
	         * @param {?} file
	         * @param {?} offset
	         * @param {?} line
	         * @param {?} col
	         */
	        function ParseLocation(file, offset, line, col) {
	            this.file = file;
	            this.offset = offset;
	            this.line = line;
	            this.col = col;
	        }
	        /**
	         * @return {?}
	         */
	        ParseLocation.prototype.toString = function () {
	            return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	        };
	        /**
	         * @param {?} delta
	         * @return {?}
	         */
	        ParseLocation.prototype.moveBy = function (delta) {
	            var /** @type {?} */ source = this.file.content;
	            var /** @type {?} */ len = source.length;
	            var /** @type {?} */ offset = this.offset;
	            var /** @type {?} */ line = this.line;
	            var /** @type {?} */ col = this.col;
	            while (offset > 0 && delta < 0) {
	                offset--;
	                delta++;
	                var /** @type {?} */ ch = source.charCodeAt(offset);
	                if (ch == $LF) {
	                    line--;
	                    var /** @type {?} */ priorLine = source.substr(0, offset - 1).lastIndexOf(String.fromCharCode($LF));
	                    col = priorLine > 0 ? offset - priorLine : offset;
	                }
	                else {
	                    col--;
	                }
	            }
	            while (offset < len && delta > 0) {
	                var /** @type {?} */ ch = source.charCodeAt(offset);
	                offset++;
	                delta--;
	                if (ch == $LF) {
	                    line++;
	                    col = 0;
	                }
	                else {
	                    col++;
	                }
	            }
	            return new ParseLocation(this.file, offset, line, col);
	        };
	        return ParseLocation;
	    }());
	    var ParseSourceFile = (function () {
	        /**
	         * @param {?} content
	         * @param {?} url
	         */
	        function ParseSourceFile(content, url) {
	            this.content = content;
	            this.url = url;
	        }
	        return ParseSourceFile;
	    }());
	    var ParseSourceSpan = (function () {
	        /**
	         * @param {?} start
	         * @param {?} end
	         * @param {?=} details
	         */
	        function ParseSourceSpan(start, end, details) {
	            if (details === void 0) { details = null; }
	            this.start = start;
	            this.end = end;
	            this.details = details;
	        }
	        /**
	         * @return {?}
	         */
	        ParseSourceSpan.prototype.toString = function () {
	            return this.start.file.content.substring(this.start.offset, this.end.offset);
	        };
	        return ParseSourceSpan;
	    }());
	    var ParseErrorLevel = {};
	    ParseErrorLevel.WARNING = 0;
	    ParseErrorLevel.FATAL = 1;
	    ParseErrorLevel[ParseErrorLevel.WARNING] = "WARNING";
	    ParseErrorLevel[ParseErrorLevel.FATAL] = "FATAL";
	    var ParseError = (function () {
	        /**
	         * @param {?} span
	         * @param {?} msg
	         * @param {?=} level
	         */
	        function ParseError(span, msg, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this.span = span;
	            this.msg = msg;
	            this.level = level;
	        }
	        /**
	         * @return {?}
	         */
	        ParseError.prototype.toString = function () {
	            var /** @type {?} */ source = this.span.start.file.content;
	            var /** @type {?} */ ctxStart = this.span.start.offset;
	            var /** @type {?} */ contextStr = '';
	            var /** @type {?} */ details = '';
	            if (isPresent(ctxStart)) {
	                if (ctxStart > source.length - 1) {
	                    ctxStart = source.length - 1;
	                }
	                var /** @type {?} */ ctxEnd = ctxStart;
	                var /** @type {?} */ ctxLen = 0;
	                var /** @type {?} */ ctxLines = 0;
	                while (ctxLen < 100 && ctxStart > 0) {
	                    ctxStart--;
	                    ctxLen++;
	                    if (source[ctxStart] == '\n') {
	                        if (++ctxLines == 3) {
	                            break;
	                        }
	                    }
	                }
	                ctxLen = 0;
	                ctxLines = 0;
	                while (ctxLen < 100 && ctxEnd < source.length - 1) {
	                    ctxEnd++;
	                    ctxLen++;
	                    if (source[ctxEnd] == '\n') {
	                        if (++ctxLines == 3) {
	                            break;
	                        }
	                    }
	                }
	                var /** @type {?} */ context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
	                    source.substring(this.span.start.offset, ctxEnd + 1);
	                contextStr = " (\"" + context + "\")";
	            }
	            if (this.span.details) {
	                details = ", " + this.span.details;
	            }
	            return "" + this.msg + contextStr + ": " + this.span.start + details;
	        };
	        return ParseError;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Text = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Text(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return Text;
	    }());
	    var Expansion = (function () {
	        /**
	         * @param {?} switchValue
	         * @param {?} type
	         * @param {?} cases
	         * @param {?} sourceSpan
	         * @param {?} switchValueSourceSpan
	         */
	        function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	            this.switchValue = switchValue;
	            this.type = type;
	            this.cases = cases;
	            this.sourceSpan = sourceSpan;
	            this.switchValueSourceSpan = switchValueSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	        return Expansion;
	    }());
	    var ExpansionCase = (function () {
	        /**
	         * @param {?} value
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} valueSourceSpan
	         * @param {?} expSourceSpan
	         */
	        function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	            this.value = value;
	            this.expression = expression;
	            this.sourceSpan = sourceSpan;
	            this.valueSourceSpan = valueSourceSpan;
	            this.expSourceSpan = expSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	        return ExpansionCase;
	    }());
	    var Attribute$1 = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?=} valueSpan
	         */
	        function Attribute(name, value, sourceSpan, valueSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	            this.valueSpan = valueSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	        return Attribute;
	    }());
	    var Element = (function () {
	        /**
	         * @param {?} name
	         * @param {?} attrs
	         * @param {?} children
	         * @param {?} sourceSpan
	         * @param {?} startSourceSpan
	         * @param {?} endSourceSpan
	         */
	        function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	            this.name = name;
	            this.attrs = attrs;
	            this.children = children;
	            this.sourceSpan = sourceSpan;
	            this.startSourceSpan = startSourceSpan;
	            this.endSourceSpan = endSourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	        return Element;
	    }());
	    var Comment = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Comment(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	        return Comment;
	    }());
	    /**
	     * @param {?} visitor
	     * @param {?} nodes
	     * @param {?=} context
	     * @return {?}
	     */
	    function visitAll(visitor, nodes, context) {
	        if (context === void 0) { context = null; }
	        var /** @type {?} */ result = [];
	        var /** @type {?} */ visit = visitor.visit ?
	            function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	            function (ast) { return ast.visit(visitor, context); };
	        nodes.forEach(function (ast) {
	            var /** @type {?} */ astResult = visit(ast);
	            if (astResult) {
	                result.push(astResult);
	            }
	        });
	        return result;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TokenType$1 = {};
	    TokenType$1.TAG_OPEN_START = 0;
	    TokenType$1.TAG_OPEN_END = 1;
	    TokenType$1.TAG_OPEN_END_VOID = 2;
	    TokenType$1.TAG_CLOSE = 3;
	    TokenType$1.TEXT = 4;
	    TokenType$1.ESCAPABLE_RAW_TEXT = 5;
	    TokenType$1.RAW_TEXT = 6;
	    TokenType$1.COMMENT_START = 7;
	    TokenType$1.COMMENT_END = 8;
	    TokenType$1.CDATA_START = 9;
	    TokenType$1.CDATA_END = 10;
	    TokenType$1.ATTR_NAME = 11;
	    TokenType$1.ATTR_VALUE = 12;
	    TokenType$1.DOC_TYPE = 13;
	    TokenType$1.EXPANSION_FORM_START = 14;
	    TokenType$1.EXPANSION_CASE_VALUE = 15;
	    TokenType$1.EXPANSION_CASE_EXP_START = 16;
	    TokenType$1.EXPANSION_CASE_EXP_END = 17;
	    TokenType$1.EXPANSION_FORM_END = 18;
	    TokenType$1.EOF = 19;
	    TokenType$1[TokenType$1.TAG_OPEN_START] = "TAG_OPEN_START";
	    TokenType$1[TokenType$1.TAG_OPEN_END] = "TAG_OPEN_END";
	    TokenType$1[TokenType$1.TAG_OPEN_END_VOID] = "TAG_OPEN_END_VOID";
	    TokenType$1[TokenType$1.TAG_CLOSE] = "TAG_CLOSE";
	    TokenType$1[TokenType$1.TEXT] = "TEXT";
	    TokenType$1[TokenType$1.ESCAPABLE_RAW_TEXT] = "ESCAPABLE_RAW_TEXT";
	    TokenType$1[TokenType$1.RAW_TEXT] = "RAW_TEXT";
	    TokenType$1[TokenType$1.COMMENT_START] = "COMMENT_START";
	    TokenType$1[TokenType$1.COMMENT_END] = "COMMENT_END";
	    TokenType$1[TokenType$1.CDATA_START] = "CDATA_START";
	    TokenType$1[TokenType$1.CDATA_END] = "CDATA_END";
	    TokenType$1[TokenType$1.ATTR_NAME] = "ATTR_NAME";
	    TokenType$1[TokenType$1.ATTR_VALUE] = "ATTR_VALUE";
	    TokenType$1[TokenType$1.DOC_TYPE] = "DOC_TYPE";
	    TokenType$1[TokenType$1.EXPANSION_FORM_START] = "EXPANSION_FORM_START";
	    TokenType$1[TokenType$1.EXPANSION_CASE_VALUE] = "EXPANSION_CASE_VALUE";
	    TokenType$1[TokenType$1.EXPANSION_CASE_EXP_START] = "EXPANSION_CASE_EXP_START";
	    TokenType$1[TokenType$1.EXPANSION_CASE_EXP_END] = "EXPANSION_CASE_EXP_END";
	    TokenType$1[TokenType$1.EXPANSION_FORM_END] = "EXPANSION_FORM_END";
	    TokenType$1[TokenType$1.EOF] = "EOF";
	    var Token$1 = (function () {
	        /**
	         * @param {?} type
	         * @param {?} parts
	         * @param {?} sourceSpan
	         */
	        function Token(type, parts, sourceSpan) {
	            this.type = type;
	            this.parts = parts;
	            this.sourceSpan = sourceSpan;
	        }
	        return Token;
	    }());
	    var TokenError = (function (_super) {
	        __extends$6(TokenError, _super);
	        /**
	         * @param {?} errorMsg
	         * @param {?} tokenType
	         * @param {?} span
	         */
	        function TokenError(errorMsg, tokenType, span) {
	            _super.call(this, span, errorMsg);
	            this.tokenType = tokenType;
	        }
	        return TokenError;
	    }(ParseError));
	    var TokenizeResult = (function () {
	        /**
	         * @param {?} tokens
	         * @param {?} errors
	         */
	        function TokenizeResult(tokens, errors) {
	            this.tokens = tokens;
	            this.errors = errors;
	        }
	        return TokenizeResult;
	    }());
	    /**
	     * @param {?} source
	     * @param {?} url
	     * @param {?} getTagDefinition
	     * @param {?=} tokenizeExpansionForms
	     * @param {?=} interpolationConfig
	     * @return {?}
	     */
	    function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	        if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	        if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	        return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	            .tokenize();
	    }
	    var /** @type {?} */ _CR_OR_CRLF_REGEXP = /\r\n?/g;
	    /**
	     * @param {?} charCode
	     * @return {?}
	     */
	    function _unexpectedCharacterErrorMsg(charCode) {
	        var /** @type {?} */ char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	        return "Unexpected character \"" + char + "\"";
	    }
	    /**
	     * @param {?} entitySrc
	     * @return {?}
	     */
	    function _unknownEntityErrorMsg(entitySrc) {
	        return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	    }
	    var _ControlFlowError = (function () {
	        /**
	         * @param {?} error
	         */
	        function _ControlFlowError(error) {
	            this.error = error;
	        }
	        return _ControlFlowError;
	    }());
	    var _Tokenizer = (function () {
	        /**
	         * @param {?} _file The html source
	         * @param {?} _getTagDefinition
	         * @param {?} _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	         * @param {?=} _interpolationConfig
	         */
	        function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	            if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            this._file = _file;
	            this._getTagDefinition = _getTagDefinition;
	            this._tokenizeIcu = _tokenizeIcu;
	            this._interpolationConfig = _interpolationConfig;
	            this._peek = -1;
	            this._nextPeek = -1;
	            this._index = -1;
	            this._line = 0;
	            this._column = -1;
	            this._expansionCaseStack = [];
	            this._inInterpolation = false;
	            this.tokens = [];
	            this.errors = [];
	            this._input = _file.content;
	            this._length = _file.content.length;
	            this._advance();
	        }
	        /**
	         * @param {?} content
	         * @return {?}
	         */
	        _Tokenizer.prototype._processCarriageReturns = function (content) {
	            // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	            // In order to keep the original position in the source, we can not
	            // pre-process it.
	            // Instead CRs are processed right before instantiating the tokens.
	            return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype.tokenize = function () {
	            while (this._peek !== $EOF) {
	                var /** @type {?} */ start = this._getLocation();
	                try {
	                    if (this._attemptCharCode($LT)) {
	                        if (this._attemptCharCode($BANG)) {
	                            if (this._attemptCharCode($LBRACKET)) {
	                                this._consumeCdata(start);
	                            }
	                            else if (this._attemptCharCode($MINUS)) {
	                                this._consumeComment(start);
	                            }
	                            else {
	                                this._consumeDocType(start);
	                            }
	                        }
	                        else if (this._attemptCharCode($SLASH)) {
	                            this._consumeTagClose(start);
	                        }
	                        else {
	                            this._consumeTagOpen(start);
	                        }
	                    }
	                    else if (!(this._tokenizeIcu && this._tokenizeExpansionForm())) {
	                        this._consumeText();
	                    }
	                }
	                catch (e) {
	                    if (e instanceof _ControlFlowError) {
	                        this.errors.push(e.error);
	                    }
	                    else {
	                        throw e;
	                    }
	                }
	            }
	            this._beginToken(TokenType$1.EOF);
	            this._endToken([]);
	            return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        _Tokenizer.prototype._tokenizeExpansionForm = function () {
	            if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                this._consumeExpansionFormStart();
	                return true;
	            }
	            if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	                this._consumeExpansionCaseStart();
	                return true;
	            }
	            if (this._peek === $RBRACE) {
	                if (this._isInExpansionCase()) {
	                    this._consumeExpansionCaseEnd();
	                    return true;
	                }
	                if (this._isInExpansionForm()) {
	                    this._consumeExpansionFormEnd();
	                    return true;
	                }
	            }
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._getLocation = function () {
	            return new ParseLocation(this._file, this._index, this._line, this._column);
	        };
	        /**
	         * @param {?=} start
	         * @param {?=} end
	         * @return {?}
	         */
	        _Tokenizer.prototype._getSpan = function (start, end) {
	            if (start === void 0) { start = this._getLocation(); }
	            if (end === void 0) { end = this._getLocation(); }
	            return new ParseSourceSpan(start, end);
	        };
	        /**
	         * @param {?} type
	         * @param {?=} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._beginToken = function (type, start) {
	            if (start === void 0) { start = this._getLocation(); }
	            this._currentTokenStart = start;
	            this._currentTokenType = type;
	        };
	        /**
	         * @param {?} parts
	         * @param {?=} end
	         * @return {?}
	         */
	        _Tokenizer.prototype._endToken = function (parts, end) {
	            if (end === void 0) { end = this._getLocation(); }
	            var /** @type {?} */ token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	            this.tokens.push(token);
	            this._currentTokenStart = null;
	            this._currentTokenType = null;
	            return token;
	        };
	        /**
	         * @param {?} msg
	         * @param {?} span
	         * @return {?}
	         */
	        _Tokenizer.prototype._createError = function (msg, span) {
	            if (this._isInExpansionForm()) {
	                msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	            }
	            var /** @type {?} */ error = new TokenError(msg, this._currentTokenType, span);
	            this._currentTokenStart = null;
	            this._currentTokenType = null;
	            return new _ControlFlowError(error);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._advance = function () {
	            if (this._index >= this._length) {
	                throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	            }
	            if (this._peek === $LF) {
	                this._line++;
	                this._column = 0;
	            }
	            else if (this._peek !== $LF && this._peek !== $CR) {
	                this._column++;
	            }
	            this._index++;
	            this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	            this._nextPeek =
	                this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCode = function (charCode) {
	            if (this._peek === charCode) {
	                this._advance();
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	            if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	                this._advance();
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} charCode
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireCharCode = function (charCode) {
	            var /** @type {?} */ location = this._getLocation();
	            if (!this._attemptCharCode(charCode)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	            }
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptStr = function (chars) {
	            var /** @type {?} */ len = chars.length;
	            if (this._index + len > this._length) {
	                return false;
	            }
	            var /** @type {?} */ initialPosition = this._savePosition();
	            for (var /** @type {?} */ i = 0; i < len; i++) {
	                if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                    // If attempting to parse the string fails, we want to reset the parser
	                    // to where it was before the attempt
	                    this._restorePosition(initialPosition);
	                    return false;
	                }
	            }
	            return true;
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	            for (var /** @type {?} */ i = 0; i < chars.length; i++) {
	                if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireStr = function (chars) {
	            var /** @type {?} */ location = this._getLocation();
	            if (!this._attemptStr(chars)) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	            while (!predicate(this._peek)) {
	                this._advance();
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @param {?} len
	         * @return {?}
	         */
	        _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	            var /** @type {?} */ start = this._getLocation();
	            this._attemptCharCodeUntilFn(predicate);
	            if (this._index - start.offset < len) {
	                throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	            }
	        };
	        /**
	         * @param {?} char
	         * @return {?}
	         */
	        _Tokenizer.prototype._attemptUntilChar = function (char) {
	            while (this._peek !== char) {
	                this._advance();
	            }
	        };
	        /**
	         * @param {?} decodeEntities
	         * @return {?}
	         */
	        _Tokenizer.prototype._readChar = function (decodeEntities) {
	            if (decodeEntities && this._peek === $AMPERSAND) {
	                return this._decodeEntity();
	            }
	            else {
	                var /** @type {?} */ index = this._index;
	                this._advance();
	                return this._input[index];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._decodeEntity = function () {
	            var /** @type {?} */ start = this._getLocation();
	            this._advance();
	            if (this._attemptCharCode($HASH)) {
	                var /** @type {?} */ isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	                var /** @type {?} */ numberStart = this._getLocation().offset;
	                this._attemptCharCodeUntilFn(isDigitEntityEnd);
	                if (this._peek != $SEMICOLON) {
	                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	                }
	                this._advance();
	                var /** @type {?} */ strNum = this._input.substring(numberStart, this._index - 1);
	                try {
	                    var /** @type {?} */ charCode = parseInt(strNum, isHex ? 16 : 10);
	                    return String.fromCharCode(charCode);
	                }
	                catch (e) {
	                    var /** @type {?} */ entity = this._input.substring(start.offset + 1, this._index - 1);
	                    throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	                }
	            }
	            else {
	                var /** @type {?} */ startPosition = this._savePosition();
	                this._attemptCharCodeUntilFn(isNamedEntityEnd);
	                if (this._peek != $SEMICOLON) {
	                    this._restorePosition(startPosition);
	                    return '&';
	                }
	                this._advance();
	                var /** @type {?} */ name_1 = this._input.substring(start.offset + 1, this._index - 1);
	                var /** @type {?} */ char = NAMED_ENTITIES[name_1];
	                if (!char) {
	                    throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
	                }
	                return char;
	            }
	        };
	        /**
	         * @param {?} decodeEntities
	         * @param {?} firstCharOfEnd
	         * @param {?} attemptEndRest
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	            var /** @type {?} */ tagCloseStart;
	            var /** @type {?} */ textStart = this._getLocation();
	            this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	            var /** @type {?} */ parts = [];
	            while (true) {
	                tagCloseStart = this._getLocation();
	                if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                    break;
	                }
	                if (this._index > tagCloseStart.offset) {
	                    // add the characters consumed by the previous if statement to the output
	                    parts.push(this._input.substring(tagCloseStart.offset, this._index));
	                }
	                while (this._peek !== firstCharOfEnd) {
	                    parts.push(this._readChar(decodeEntities));
	                }
	            }
	            return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeComment = function (start) {
	            var _this = this;
	            this._beginToken(TokenType$1.COMMENT_START, start);
	            this._requireCharCode($MINUS);
	            this._endToken([]);
	            var /** @type {?} */ textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	            this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeCdata = function (start) {
	            var _this = this;
	            this._beginToken(TokenType$1.CDATA_START, start);
	            this._requireStr('CDATA[');
	            this._endToken([]);
	            var /** @type {?} */ textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	            this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeDocType = function (start) {
	            this._beginToken(TokenType$1.DOC_TYPE, start);
	            this._attemptUntilChar($GT);
	            this._advance();
	            this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumePrefixAndName = function () {
	            var /** @type {?} */ nameOrPrefixStart = this._index;
	            var /** @type {?} */ prefix = null;
	            while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	                this._advance();
	            }
	            var /** @type {?} */ nameStart;
	            if (this._peek === $COLON) {
	                this._advance();
	                prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	                nameStart = this._index;
	            }
	            else {
	                nameStart = nameOrPrefixStart;
	            }
	            this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	            var /** @type {?} */ name = this._input.substring(nameStart, this._index);
	            return [prefix, name];
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpen = function (start) {
	            var /** @type {?} */ savedPos = this._savePosition();
	            var /** @type {?} */ tagName;
	            var /** @type {?} */ lowercaseTagName;
	            try {
	                if (!isAsciiLetter(this._peek)) {
	                    throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	                }
	                var /** @type {?} */ nameStart = this._index;
	                this._consumeTagOpenStart(start);
	                tagName = this._input.substring(nameStart, this._index);
	                lowercaseTagName = tagName.toLowerCase();
	                this._attemptCharCodeUntilFn(isNotWhitespace);
	                while (this._peek !== $SLASH && this._peek !== $GT) {
	                    this._consumeAttributeName();
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                    if (this._attemptCharCode($EQ)) {
	                        this._attemptCharCodeUntilFn(isNotWhitespace);
	                        this._consumeAttributeValue();
	                    }
	                    this._attemptCharCodeUntilFn(isNotWhitespace);
	                }
	                this._consumeTagOpenEnd();
	            }
	            catch (e) {
	                if (e instanceof _ControlFlowError) {
	                    // When the start tag is invalid, assume we want a "<"
	                    this._restorePosition(savedPos);
	                    // Back to back text tokens are merged at the end
	                    this._beginToken(TokenType$1.TEXT, start);
	                    this._endToken(['<']);
	                    return;
	                }
	                throw e;
	            }
	            var /** @type {?} */ contentTokenType = this._getTagDefinition(tagName).contentType;
	            if (contentTokenType === TagContentType.RAW_TEXT) {
	                this._consumeRawTextWithTagClose(lowercaseTagName, false);
	            }
	            else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	                this._consumeRawTextWithTagClose(lowercaseTagName, true);
	            }
	        };
	        /**
	         * @param {?} lowercaseTagName
	         * @param {?} decodeEntities
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	            var _this = this;
	            var /** @type {?} */ textToken = this._consumeRawText(decodeEntities, $LT, function () {
	                if (!_this._attemptCharCode($SLASH))
	                    return false;
	                _this._attemptCharCodeUntilFn(isNotWhitespace);
	                if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                    return false;
	                _this._attemptCharCodeUntilFn(isNotWhitespace);
	                return _this._attemptCharCode($GT);
	            });
	            this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	            this._endToken([null, lowercaseTagName]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	            this._beginToken(TokenType$1.TAG_OPEN_START, start);
	            var /** @type {?} */ parts = this._consumePrefixAndName();
	            this._endToken(parts);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeAttributeName = function () {
	            this._beginToken(TokenType$1.ATTR_NAME);
	            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	            this._endToken(prefixAndName);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeAttributeValue = function () {
	            this._beginToken(TokenType$1.ATTR_VALUE);
	            var /** @type {?} */ value;
	            if (this._peek === $SQ || this._peek === $DQ) {
	                var /** @type {?} */ quoteChar = this._peek;
	                this._advance();
	                var /** @type {?} */ parts = [];
	                while (this._peek !== quoteChar) {
	                    parts.push(this._readChar(true));
	                }
	                value = parts.join('');
	                this._advance();
	            }
	            else {
	                var /** @type {?} */ valueStart = this._index;
	                this._requireCharCodeUntilFn(isNameEnd, 1);
	                value = this._input.substring(valueStart, this._index);
	            }
	            this._endToken([this._processCarriageReturns(value)]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagOpenEnd = function () {
	            var /** @type {?} */ tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	            this._beginToken(tokenType);
	            this._requireCharCode($GT);
	            this._endToken([]);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeTagClose = function (start) {
	            this._beginToken(TokenType$1.TAG_CLOSE, start);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            var /** @type {?} */ prefixAndName = this._consumePrefixAndName();
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._requireCharCode($GT);
	            this._endToken(prefixAndName);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionFormStart = function () {
	            this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	            this._requireCharCode($LBRACE);
	            this._endToken([]);
	            this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	            var /** @type {?} */ condition = this._readUntil($COMMA);
	            this._endToken([condition], this._getLocation());
	            this._requireCharCode($COMMA);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	            var /** @type {?} */ type = this._readUntil($COMMA);
	            this._endToken([type], this._getLocation());
	            this._requireCharCode($COMMA);
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	            this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	            var /** @type {?} */ value = this._readUntil($LBRACE).trim();
	            this._endToken([value], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	            this._requireCharCode($LBRACE);
	            this._endToken([], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	            this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	            this._requireCharCode($RBRACE);
	            this._endToken([], this._getLocation());
	            this._attemptCharCodeUntilFn(isNotWhitespace);
	            this._expansionCaseStack.pop();
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	            this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	            this._requireCharCode($RBRACE);
	            this._endToken([]);
	            this._expansionCaseStack.pop();
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._consumeText = function () {
	            var /** @type {?} */ start = this._getLocation();
	            this._beginToken(TokenType$1.TEXT, start);
	            var /** @type {?} */ parts = [];
	            do {
	                if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                    parts.push(this._interpolationConfig.start);
	                    this._inInterpolation = true;
	                }
	                else if (this._interpolationConfig && this._inInterpolation &&
	                    this._attemptStr(this._interpolationConfig.end)) {
	                    parts.push(this._interpolationConfig.end);
	                    this._inInterpolation = false;
	                }
	                else {
	                    parts.push(this._readChar(true));
	                }
	            } while (!this._isTextEnd());
	            this._endToken([this._processCarriageReturns(parts.join(''))]);
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isTextEnd = function () {
	            if (this._peek === $LT || this._peek === $EOF) {
	                return true;
	            }
	            if (this._tokenizeIcu && !this._inInterpolation) {
	                if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                    // start of an expansion form
	                    return true;
	                }
	                if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                    // end of and expansion case
	                    return true;
	                }
	            }
	            return false;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._savePosition = function () {
	            return [this._peek, this._index, this._column, this._line, this.tokens.length];
	        };
	        /**
	         * @param {?} char
	         * @return {?}
	         */
	        _Tokenizer.prototype._readUntil = function (char) {
	            var /** @type {?} */ start = this._index;
	            this._attemptUntilChar(char);
	            return this._input.substring(start, this._index);
	        };
	        /**
	         * @param {?} position
	         * @return {?}
	         */
	        _Tokenizer.prototype._restorePosition = function (position) {
	            this._peek = position[0];
	            this._index = position[1];
	            this._column = position[2];
	            this._line = position[3];
	            var /** @type {?} */ nbTokens = position[4];
	            if (nbTokens < this.tokens.length) {
	                // remove any extra tokens
	                this.tokens = this.tokens.slice(0, nbTokens);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isInExpansionCase = function () {
	            return this._expansionCaseStack.length > 0 &&
	                this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                    TokenType$1.EXPANSION_CASE_EXP_START;
	        };
	        /**
	         * @return {?}
	         */
	        _Tokenizer.prototype._isInExpansionForm = function () {
	            return this._expansionCaseStack.length > 0 &&
	                this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                    TokenType$1.EXPANSION_FORM_START;
	        };
	        return _Tokenizer;
	    }());
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNotWhitespace(code) {
	        return !isWhitespace(code) || code === $EOF;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNameEnd(code) {
	        return isWhitespace(code) || code === $GT || code === $SLASH ||
	            code === $SQ || code === $DQ || code === $EQ;
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isPrefixEnd(code) {
	        return (code < $a || $z < code) && (code < $A || $Z < code) &&
	            (code < $0 || code > $9);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isDigitEntityEnd(code) {
	        return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function isNamedEntityEnd(code) {
	        return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	    }
	    /**
	     * @param {?} input
	     * @param {?} offset
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    function isExpansionFormStart(input, offset, interpolationConfig) {
	        var /** @type {?} */ isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	        return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	    }
	    /**
	     * @param {?} peek
	     * @return {?}
	     */
	    function isExpansionCaseStart(peek) {
	        return peek === $EQ || isAsciiLetter(peek);
	    }
	    /**
	     * @param {?} code1
	     * @param {?} code2
	     * @return {?}
	     */
	    function compareCharCodeCaseInsensitive(code1, code2) {
	        return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	    }
	    /**
	     * @param {?} code
	     * @return {?}
	     */
	    function toUpperCaseCharCode(code) {
	        return code >= $a && code <= $z ? code - $a + $A : code;
	    }
	    /**
	     * @param {?} srcTokens
	     * @return {?}
	     */
	    function mergeTextTokens(srcTokens) {
	        var /** @type {?} */ dstTokens = [];
	        var /** @type {?} */ lastDstToken;
	        for (var /** @type {?} */ i = 0; i < srcTokens.length; i++) {
	            var /** @type {?} */ token = srcTokens[i];
	            if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	                lastDstToken.parts[0] += token.parts[0];
	                lastDstToken.sourceSpan.end = token.sourceSpan.end;
	            }
	            else {
	                lastDstToken = token;
	                dstTokens.push(lastDstToken);
	            }
	        }
	        return dstTokens;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TreeError = (function (_super) {
	        __extends$5(TreeError, _super);
	        /**
	         * @param {?} elementName
	         * @param {?} span
	         * @param {?} msg
	         */
	        function TreeError(elementName, span, msg) {
	            _super.call(this, span, msg);
	            this.elementName = elementName;
	        }
	        /**
	         * @param {?} elementName
	         * @param {?} span
	         * @param {?} msg
	         * @return {?}
	         */
	        TreeError.create = function (elementName, span, msg) {
	            return new TreeError(elementName, span, msg);
	        };
	        return TreeError;
	    }(ParseError));
	    var ParseTreeResult = (function () {
	        /**
	         * @param {?} rootNodes
	         * @param {?} errors
	         */
	        function ParseTreeResult(rootNodes, errors) {
	            this.rootNodes = rootNodes;
	            this.errors = errors;
	        }
	        return ParseTreeResult;
	    }());
	    var Parser$1 = (function () {
	        /**
	         * @param {?} getTagDefinition
	         */
	        function Parser(getTagDefinition) {
	            this.getTagDefinition = getTagDefinition;
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	            var /** @type {?} */ treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	            return new ParseTreeResult(treeAndErrors.rootNodes, ((tokensAndErrors.errors)).concat(treeAndErrors.errors));
	        };
	        return Parser;
	    }());
	    var _TreeBuilder = (function () {
	        /**
	         * @param {?} tokens
	         * @param {?} getTagDefinition
	         */
	        function _TreeBuilder(tokens, getTagDefinition) {
	            this.tokens = tokens;
	            this.getTagDefinition = getTagDefinition;
	            this._index = -1;
	            this._rootNodes = [];
	            this._errors = [];
	            this._elementStack = [];
	            this._advance();
	        }
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype.build = function () {
	            while (this._peek.type !== TokenType$1.EOF) {
	                if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                    this._consumeStartTag(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                    this._consumeEndTag(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.CDATA_START) {
	                    this._closeVoidElement();
	                    this._consumeCdata(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.COMMENT_START) {
	                    this._closeVoidElement();
	                    this._consumeComment(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                    this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                    this._closeVoidElement();
	                    this._consumeText(this._advance());
	                }
	                else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                    this._consumeExpansion(this._advance());
	                }
	                else {
	                    // Skip all other tokens...
	                    this._advance();
	                }
	            }
	            return new ParseTreeResult(this._rootNodes, this._errors);
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._advance = function () {
	            var /** @type {?} */ prev = this._peek;
	            if (this._index < this.tokens.length - 1) {
	                // Note: there is always an EOF token at the end
	                this._index++;
	            }
	            this._peek = this.tokens[this._index];
	            return prev;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        _TreeBuilder.prototype._advanceIf = function (type) {
	            if (this._peek.type === type) {
	                return this._advance();
	            }
	            return null;
	        };
	        /**
	         * @param {?} startToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeCdata = function (startToken) {
	            this._consumeText(this._advance());
	            this._advanceIf(TokenType$1.CDATA_END);
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeComment = function (token) {
	            var /** @type {?} */ text = this._advanceIf(TokenType$1.RAW_TEXT);
	            this._advanceIf(TokenType$1.COMMENT_END);
	            var /** @type {?} */ value = isPresent(text) ? text.parts[0].trim() : null;
	            this._addToParent(new Comment(value, token.sourceSpan));
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeExpansion = function (token) {
	            var /** @type {?} */ switchValue = this._advance();
	            var /** @type {?} */ type = this._advance();
	            var /** @type {?} */ cases = [];
	            // read =
	            while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	                var /** @type {?} */ expCase = this._parseExpansionCase();
	                if (!expCase)
	                    return; // error
	                cases.push(expCase);
	            }
	            // read the final }
	            if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	                return;
	            }
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	            this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	            this._advance();
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._parseExpansionCase = function () {
	            var /** @type {?} */ value = this._advance();
	            // read {
	            if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	                this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	                return null;
	            }
	            // read until }
	            var /** @type {?} */ start = this._advance();
	            var /** @type {?} */ exp = this._collectExpansionExpTokens(start);
	            if (!exp)
	                return null;
	            var /** @type {?} */ end = this._advance();
	            exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	            // parse everything in between { and }
	            var /** @type {?} */ parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	            if (parsedExp.errors.length > 0) {
	                this._errors = this._errors.concat(/** @type {?} */ (parsedExp.errors));
	                return null;
	            }
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	            var /** @type {?} */ expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	            return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	        };
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	            var /** @type {?} */ exp = [];
	            var /** @type {?} */ expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	            while (true) {
	                if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                    this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                    expansionFormStack.push(this._peek.type);
	                }
	                if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                        expansionFormStack.pop();
	                        if (expansionFormStack.length == 0)
	                            return exp;
	                    }
	                    else {
	                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                        return null;
	                    }
	                }
	                if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                    if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                        expansionFormStack.pop();
	                    }
	                    else {
	                        this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                        return null;
	                    }
	                }
	                if (this._peek.type === TokenType$1.EOF) {
	                    this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                    return null;
	                }
	                exp.push(this._advance());
	            }
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeText = function (token) {
	            var /** @type {?} */ text = token.parts[0];
	            if (text.length > 0 && text[0] == '\n') {
	                var /** @type {?} */ parent_1 = this._getParentElement();
	                if (isPresent(parent_1) && parent_1.children.length == 0 &&
	                    this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                    text = text.substring(1);
	                }
	            }
	            if (text.length > 0) {
	                this._addToParent(new Text(text, token.sourceSpan));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._closeVoidElement = function () {
	            if (this._elementStack.length > 0) {
	                var /** @type {?} */ el = this._elementStack[this._elementStack.length - 1];
	                if (this.getTagDefinition(el.name).isVoid) {
	                    this._elementStack.pop();
	                }
	            }
	        };
	        /**
	         * @param {?} startTagToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	            var /** @type {?} */ prefix = startTagToken.parts[0];
	            var /** @type {?} */ name = startTagToken.parts[1];
	            var /** @type {?} */ attrs = [];
	            while (this._peek.type === TokenType$1.ATTR_NAME) {
	                attrs.push(this._consumeAttr(this._advance()));
	            }
	            var /** @type {?} */ fullName = this._getElementFullName(prefix, name, this._getParentElement());
	            var /** @type {?} */ selfClosing = false;
	            // Note: There could have been a tokenizer error
	            // so that we don't get a token for the end tag...
	            if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	                this._advance();
	                selfClosing = true;
	                var /** @type {?} */ tagDef = this.getTagDefinition(fullName);
	                if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                    this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	                }
	            }
	            else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	                this._advance();
	                selfClosing = false;
	            }
	            var /** @type {?} */ end = this._peek.sourceSpan.start;
	            var /** @type {?} */ span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	            var /** @type {?} */ el = new Element(fullName, attrs, [], span, span, null);
	            this._pushElement(el);
	            if (selfClosing) {
	                this._popElement(fullName);
	                el.endSourceSpan = span;
	            }
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _TreeBuilder.prototype._pushElement = function (el) {
	            if (this._elementStack.length > 0) {
	                var /** @type {?} */ parentEl = this._elementStack[this._elementStack.length - 1];
	                if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                    this._elementStack.pop();
	                }
	            }
	            var /** @type {?} */ tagDef = this.getTagDefinition(el.name);
	            var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	            if (parent && tagDef.requireExtraParent(parent.name)) {
	                var /** @type {?} */ newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	                this._insertBeforeContainer(parent, container, newParent);
	            }
	            this._addToParent(el);
	            this._elementStack.push(el);
	        };
	        /**
	         * @param {?} endTagToken
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	            var /** @type {?} */ fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	            if (this._getParentElement()) {
	                this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	            }
	            if (this.getTagDefinition(fullName).isVoid) {
	                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	            }
	            else if (!this._popElement(fullName)) {
	                this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	            }
	        };
	        /**
	         * @param {?} fullName
	         * @return {?}
	         */
	        _TreeBuilder.prototype._popElement = function (fullName) {
	            for (var /** @type {?} */ stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	                var /** @type {?} */ el = this._elementStack[stackIndex];
	                if (el.name == fullName) {
	                    this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                    return true;
	                }
	                if (!this.getTagDefinition(el.name).closedByParent) {
	                    return false;
	                }
	            }
	            return false;
	        };
	        /**
	         * @param {?} attrName
	         * @return {?}
	         */
	        _TreeBuilder.prototype._consumeAttr = function (attrName) {
	            var /** @type {?} */ fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	            var /** @type {?} */ end = attrName.sourceSpan.end;
	            var /** @type {?} */ value = '';
	            var /** @type {?} */ valueSpan;
	            if (this._peek.type === TokenType$1.ATTR_VALUE) {
	                var /** @type {?} */ valueToken = this._advance();
	                value = valueToken.parts[0];
	                end = valueToken.sourceSpan.end;
	                valueSpan = valueToken.sourceSpan;
	            }
	            return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	        };
	        /**
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getParentElement = function () {
	            return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	        };
	        /**
	         * Returns the parent in the DOM and the container.
	         *
	         * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	            var /** @type {?} */ container = null;
	            for (var /** @type {?} */ i = this._elementStack.length - 1; i >= 0; i--) {
	                if (this._elementStack[i].name !== 'ng-container') {
	                    return { parent: this._elementStack[i], container: container };
	                }
	                container = this._elementStack[i];
	            }
	            return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        _TreeBuilder.prototype._addToParent = function (node) {
	            var /** @type {?} */ parent = this._getParentElement();
	            if (isPresent(parent)) {
	                parent.children.push(node);
	            }
	            else {
	                this._rootNodes.push(node);
	            }
	        };
	        /**
	         * Insert a node between the parent and the container.
	         * When no container is given, the node is appended as a child of the parent.
	         * Also updates the element stack accordingly.
	         *
	         * \@internal
	         * @param {?} parent
	         * @param {?} container
	         * @param {?} node
	         * @return {?}
	         */
	        _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	            if (!container) {
	                this._addToParent(node);
	                this._elementStack.push(node);
	            }
	            else {
	                if (parent) {
	                    // replace the container with the new node in the children
	                    var /** @type {?} */ index = parent.children.indexOf(container);
	                    parent.children[index] = node;
	                }
	                else {
	                    this._rootNodes.push(node);
	                }
	                node.children.push(container);
	                this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	            }
	        };
	        /**
	         * @param {?} prefix
	         * @param {?} localName
	         * @param {?} parentElement
	         * @return {?}
	         */
	        _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	            if (isBlank(prefix)) {
	                prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	                if (isBlank(prefix) && isPresent(parentElement)) {
	                    prefix = getNsPrefix(parentElement.name);
	                }
	            }
	            return mergeNsAndName(prefix, localName);
	        };
	        return _TreeBuilder;
	    }());
	    /**
	     * @param {?} stack
	     * @param {?} element
	     * @return {?}
	     */
	    function lastOnStack(stack, element) {
	        return stack.length > 0 && stack[stack.length - 1] === element;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Message = (function () {
	        /**
	         * @param {?} nodes message AST
	         * @param {?} placeholders maps placeholder names to static content
	         * @param {?} placeholderToMessage maps placeholder names to messages (used for nested ICU messages)
	         * @param {?} meaning
	         * @param {?} description
	         */
	        function Message(nodes, placeholders, placeholderToMessage, meaning, description) {
	            this.nodes = nodes;
	            this.placeholders = placeholders;
	            this.placeholderToMessage = placeholderToMessage;
	            this.meaning = meaning;
	            this.description = description;
	        }
	        return Message;
	    }());
	    var Text$1 = (function () {
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function Text(value, sourceSpan) {
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	        return Text;
	    }());
	    var Container = (function () {
	        /**
	         * @param {?} children
	         * @param {?} sourceSpan
	         */
	        function Container(children, sourceSpan) {
	            this.children = children;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	        return Container;
	    }());
	    var Icu = (function () {
	        /**
	         * @param {?} expression
	         * @param {?} type
	         * @param {?} cases
	         * @param {?} sourceSpan
	         */
	        function Icu(expression, type, cases, sourceSpan) {
	            this.expression = expression;
	            this.type = type;
	            this.cases = cases;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	        return Icu;
	    }());
	    var TagPlaceholder = (function () {
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} startName
	         * @param {?} closeName
	         * @param {?} children
	         * @param {?} isVoid
	         * @param {?} sourceSpan
	         */
	        function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	            this.tag = tag;
	            this.attrs = attrs;
	            this.startName = startName;
	            this.closeName = closeName;
	            this.children = children;
	            this.isVoid = isVoid;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	        return TagPlaceholder;
	    }());
	    var Placeholder = (function () {
	        /**
	         * @param {?} value
	         * @param {?} name
	         * @param {?} sourceSpan
	         */
	        function Placeholder(value, name, sourceSpan) {
	            this.value = value;
	            this.name = name;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	        return Placeholder;
	    }());
	    var IcuPlaceholder = (function () {
	        /**
	         * @param {?} value
	         * @param {?} name
	         * @param {?} sourceSpan
	         */
	        function IcuPlaceholder(value, name, sourceSpan) {
	            this.value = value;
	            this.name = name;
	            this.sourceSpan = sourceSpan;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?=} context
	         * @return {?}
	         */
	        IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	        return IcuPlaceholder;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ TAG_TO_PLACEHOLDER_NAMES = {
	        'A': 'LINK',
	        'B': 'BOLD_TEXT',
	        'BR': 'LINE_BREAK',
	        'EM': 'EMPHASISED_TEXT',
	        'H1': 'HEADING_LEVEL1',
	        'H2': 'HEADING_LEVEL2',
	        'H3': 'HEADING_LEVEL3',
	        'H4': 'HEADING_LEVEL4',
	        'H5': 'HEADING_LEVEL5',
	        'H6': 'HEADING_LEVEL6',
	        'HR': 'HORIZONTAL_RULE',
	        'I': 'ITALIC_TEXT',
	        'LI': 'LIST_ITEM',
	        'LINK': 'MEDIA_LINK',
	        'OL': 'ORDERED_LIST',
	        'P': 'PARAGRAPH',
	        'Q': 'QUOTATION',
	        'S': 'STRIKETHROUGH_TEXT',
	        'SMALL': 'SMALL_TEXT',
	        'SUB': 'SUBSTRIPT',
	        'SUP': 'SUPERSCRIPT',
	        'TBODY': 'TABLE_BODY',
	        'TD': 'TABLE_CELL',
	        'TFOOT': 'TABLE_FOOTER',
	        'TH': 'TABLE_HEADER_CELL',
	        'THEAD': 'TABLE_HEADER',
	        'TR': 'TABLE_ROW',
	        'TT': 'MONOSPACED_TEXT',
	        'U': 'UNDERLINED_TEXT',
	        'UL': 'UNORDERED_LIST',
	    };
	    /**
	     * Creates unique names for placeholder with different content.
	     *
	     * Returns the same placeholder name when the content is identical.
	     *
	     * \@internal
	     */
	    var PlaceholderRegistry = (function () {
	        function PlaceholderRegistry() {
	            this._placeHolderNameCounts = {};
	            this._signatureToName = {};
	        }
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} isVoid
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	            var /** @type {?} */ signature = this._hashTag(tag, attrs, isVoid);
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ upperTag = tag.toUpperCase();
	            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	            var /** @type {?} */ name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	            this._signatureToName[signature] = name;
	            return name;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	            var /** @type {?} */ signature = this._hashClosingTag(tag);
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ upperTag = tag.toUpperCase();
	            var /** @type {?} */ baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	            var /** @type {?} */ name = this._generateUniqueName("CLOSE_" + baseName);
	            this._signatureToName[signature] = name;
	            return name;
	        };
	        /**
	         * @param {?} name
	         * @param {?} content
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	            var /** @type {?} */ upperName = name.toUpperCase();
	            var /** @type {?} */ signature = "PH: " + upperName + "=" + content;
	            if (this._signatureToName[signature]) {
	                return this._signatureToName[signature];
	            }
	            var /** @type {?} */ uniqueName = this._generateUniqueName(upperName);
	            this._signatureToName[signature] = uniqueName;
	            return uniqueName;
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype.getUniquePlaceholder = function (name) {
	            return this._generateUniqueName(name.toUpperCase());
	        };
	        /**
	         * @param {?} tag
	         * @param {?} attrs
	         * @param {?} isVoid
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	            var /** @type {?} */ start = "<" + tag;
	            var /** @type {?} */ strAttrs = Object.keys(attrs).sort().map(function (name) { return (" " + name + "=" + attrs[name]); }).join('');
	            var /** @type {?} */ end = isVoid ? '/>' : "></" + tag + ">";
	            return start + strAttrs + end;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	        /**
	         * @param {?} base
	         * @return {?}
	         */
	        PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	            var /** @type {?} */ seen = this._placeHolderNameCounts.hasOwnProperty(base);
	            if (!seen) {
	                this._placeHolderNameCounts[base] = 1;
	                return base;
	            }
	            var /** @type {?} */ id = this._placeHolderNameCounts[base];
	            this._placeHolderNameCounts[base] = id + 1;
	            return base + "_" + id;
	        };
	        return PlaceholderRegistry;
	    }());

	    var /** @type {?} */ _expParser = new Parser(new Lexer());
	    /**
	     * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	     * @param {?} interpolationConfig
	     * @return {?}
	     */
	    function createI18nMessageFactory(interpolationConfig) {
	        var /** @type {?} */ visitor = new _I18nVisitor(_expParser, interpolationConfig);
	        return function (nodes, meaning, description) {
	            return visitor.toI18nMessage(nodes, meaning, description);
	        };
	    }
	    var _I18nVisitor = (function () {
	        /**
	         * @param {?} _expressionParser
	         * @param {?} _interpolationConfig
	         */
	        function _I18nVisitor(_expressionParser, _interpolationConfig) {
	            this._expressionParser = _expressionParser;
	            this._interpolationConfig = _interpolationConfig;
	        }
	        /**
	         * @param {?} nodes
	         * @param {?} meaning
	         * @param {?} description
	         * @return {?}
	         */
	        _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
	            this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	            this._icuDepth = 0;
	            this._placeholderRegistry = new PlaceholderRegistry();
	            this._placeholderToContent = {};
	            this._placeholderToMessage = {};
	            var /** @type {?} */ i18nodes = visitAll(this, nodes, {});
	            return new Message(i18nodes, this._placeholderToContent, this._placeholderToMessage, meaning, description);
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitElement = function (el, context) {
	            var /** @type {?} */ children = visitAll(this, el.children);
	            var /** @type {?} */ attrs = {};
	            el.attrs.forEach(function (attr) {
	                // Do not visit the attributes, translatable ones are top-level ASTs
	                attrs[attr.name] = attr.value;
	            });
	            var /** @type {?} */ isVoid = getHtmlTagDefinition(el.name).isVoid;
	            var /** @type {?} */ startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	            this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	            var /** @type {?} */ closePhName = '';
	            if (!isVoid) {
	                closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	                this._placeholderToContent[closePhName] = "</" + el.name + ">";
	            }
	            return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	            return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitText = function (text, context) {
	            return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	            var _this = this;
	            this._icuDepth++;
	            var /** @type {?} */ i18nIcuCases = {};
	            var /** @type {?} */ i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	            icu.cases.forEach(function (caze) {
	                i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	            });
	            this._icuDepth--;
	            if (this._isIcu || this._icuDepth > 0) {
	                // Returns an ICU node when:
	                // - the message (vs a part of the message) is an ICU message, or
	                // - the ICU message is nested.
	                var /** @type {?} */ expPh = this._placeholderRegistry.getUniquePlaceholder("VAR_" + icu.type);
	                i18nIcu.expressionPlaceholder = expPh;
	                this._placeholderToContent[expPh] = icu.switchValue;
	                return i18nIcu;
	            }
	            // Else returns a placeholder
	            // ICU placeholders should not be replaced with their original content but with the their
	            // translations. We need to create a new visitor (they are not re-entrant) to compute the
	            // message id.
	            // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	            var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	            var /** @type {?} */ visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	            this._placeholderToMessage[phName] = visitor.toI18nMessage([icu], '', '');
	            return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	            throw new Error('Unreachable code');
	        };
	        /**
	         * @param {?} text
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	            var /** @type {?} */ splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	            if (!splitInterpolation) {
	                // No expression, return a single text
	                return new Text$1(text, sourceSpan);
	            }
	            // Return a group of text + expressions
	            var /** @type {?} */ nodes = [];
	            var /** @type {?} */ container = new Container(nodes, sourceSpan);
	            var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	            for (var /** @type {?} */ i = 0; i < splitInterpolation.strings.length - 1; i++) {
	                var /** @type {?} */ expression = splitInterpolation.expressions[i];
	                var /** @type {?} */ baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	                var /** @type {?} */ phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	                if (splitInterpolation.strings[i].length) {
	                    // No need to add empty strings
	                    nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	                }
	                nodes.push(new Placeholder(expression, phName, sourceSpan));
	                this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	            }
	            // The last index contains no expression
	            var /** @type {?} */ lastStringIdx = splitInterpolation.strings.length - 1;
	            if (splitInterpolation.strings[lastStringIdx].length) {
	                nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	            }
	            return container;
	        };
	        return _I18nVisitor;
	    }());
	    var /** @type {?} */ _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function _extractPlaceholderName(input) {
	        return input.split(_CUSTOM_PH_EXP)[1];
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An i18n error.
	     */
	    var I18nError = (function (_super) {
	        __extends$7(I18nError, _super);
	        /**
	         * @param {?} span
	         * @param {?} msg
	         */
	        function I18nError(span, msg) {
	            _super.call(this, span, msg);
	        }
	        return I18nError;
	    }(ParseError));

	    var /** @type {?} */ _I18N_ATTR = 'i18n';
	    var /** @type {?} */ _I18N_ATTR_PREFIX = 'i18n-';
	    var /** @type {?} */ _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	    /**
	     * Extract translatable messages from an html AST
	     * @param {?} nodes
	     * @param {?} interpolationConfig
	     * @param {?} implicitTags
	     * @param {?} implicitAttrs
	     * @return {?}
	     */
	    function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	        var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	        return visitor.extract(nodes, interpolationConfig);
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} translations
	     * @param {?} interpolationConfig
	     * @param {?} implicitTags
	     * @param {?} implicitAttrs
	     * @return {?}
	     */
	    function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	        var /** @type {?} */ visitor = new _Visitor(implicitTags, implicitAttrs);
	        return visitor.merge(nodes, translations, interpolationConfig);
	    }
	    var ExtractionResult = (function () {
	        /**
	         * @param {?} messages
	         * @param {?} errors
	         */
	        function ExtractionResult(messages, errors) {
	            this.messages = messages;
	            this.errors = errors;
	        }
	        return ExtractionResult;
	    }());
	    var _VisitorMode = {};
	    _VisitorMode.Extract = 0;
	    _VisitorMode.Merge = 1;
	    _VisitorMode[_VisitorMode.Extract] = "Extract";
	    _VisitorMode[_VisitorMode.Merge] = "Merge";
	    /**
	     * This Visitor is used:
	     * 1. to extract all the translatable strings from an html AST (see `extract()`),
	     * 2. to replace the translatable strings with the actual translations (see `merge()`)
	     *
	     * \@internal
	     */
	    var _Visitor = (function () {
	        /**
	         * @param {?} _implicitTags
	         * @param {?} _implicitAttrs
	         */
	        function _Visitor(_implicitTags, _implicitAttrs) {
	            this._implicitTags = _implicitTags;
	            this._implicitAttrs = _implicitAttrs;
	        }
	        /**
	         * Extracts the messages from the tree
	         * @param {?} nodes
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	            var _this = this;
	            this._init(_VisitorMode.Extract, interpolationConfig);
	            nodes.forEach(function (node) { return node.visit(_this, null); });
	            if (this._inI18nBlock) {
	                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	            }
	            return new ExtractionResult(this._messages, this._errors);
	        };
	        /**
	         * Returns a tree where all translatable nodes are translated
	         * @param {?} nodes
	         * @param {?} translations
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	            this._init(_VisitorMode.Merge, interpolationConfig);
	            this._translations = translations;
	            // Construct a single fake root element
	            var /** @type {?} */ wrapper = new Element('wrapper', [], nodes, null, null, null);
	            var /** @type {?} */ translatedNode = wrapper.visit(this, null);
	            if (this._inI18nBlock) {
	                this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	            }
	            return new ParseTreeResult(translatedNode.children, this._errors);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	            // Parse cases for translatable html attributes
	            var /** @type {?} */ expression = visitAll(this, icuCase.expression, context);
	            if (this._mode === _VisitorMode.Merge) {
	                return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	            }
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitExpansion = function (icu, context) {
	            this._mayBeAddBlockChildren(icu);
	            var /** @type {?} */ wasInIcu = this._inIcu;
	            if (!this._inIcu) {
	                // nested ICU messages should not be extracted but top-level translated as a whole
	                if (this._isInTranslatableSection) {
	                    this._addMessage([icu]);
	                }
	                this._inIcu = true;
	            }
	            var /** @type {?} */ cases = visitAll(this, icu.cases, context);
	            if (this._mode === _VisitorMode.Merge) {
	                icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	            }
	            this._inIcu = wasInIcu;
	            return icu;
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitComment = function (comment, context) {
	            var /** @type {?} */ isOpening = _isOpeningComment(comment);
	            if (isOpening && this._isInTranslatableSection) {
	                this._reportError(comment, 'Could not start a block inside a translatable section');
	                return;
	            }
	            var /** @type {?} */ isClosing = _isClosingComment(comment);
	            if (isClosing && !this._inI18nBlock) {
	                this._reportError(comment, 'Trying to close an unopened block');
	                return;
	            }
	            if (!this._inI18nNode && !this._inIcu) {
	                if (!this._inI18nBlock) {
	                    if (isOpening) {
	                        this._inI18nBlock = true;
	                        this._blockStartDepth = this._depth;
	                        this._blockChildren = [];
	                        this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                        this._openTranslatableSection(comment);
	                    }
	                }
	                else {
	                    if (isClosing) {
	                        if (this._depth == this._blockStartDepth) {
	                            this._closeTranslatableSection(comment, this._blockChildren);
	                            this._inI18nBlock = false;
	                            var /** @type {?} */ message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                            // merge attributes in sections
	                            var /** @type {?} */ nodes = this._translateMessage(comment, message);
	                            return visitAll(this, nodes);
	                        }
	                        else {
	                            this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                            return;
	                        }
	                    }
	                }
	            }
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text, context) {
	            if (this._isInTranslatableSection) {
	                this._mayBeAddBlockChildren(text);
	            }
	            return text;
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitElement = function (el, context) {
	            var _this = this;
	            this._mayBeAddBlockChildren(el);
	            this._depth++;
	            var /** @type {?} */ wasInI18nNode = this._inI18nNode;
	            var /** @type {?} */ wasInImplicitNode = this._inImplicitNode;
	            var /** @type {?} */ childNodes = [];
	            var /** @type {?} */ translatedChildNodes;
	            // Extract:
	            // - top level nodes with the (implicit) "i18n" attribute if not already in a section
	            // - ICU messages
	            var /** @type {?} */ i18nAttr = _getI18nAttr(el);
	            var /** @type {?} */ i18nMeta = i18nAttr ? i18nAttr.value : '';
	            var /** @type {?} */ isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) && !this._inIcu &&
	                !this._isInTranslatableSection;
	            var /** @type {?} */ isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	            this._inImplicitNode = wasInImplicitNode || isImplicit;
	            if (!this._isInTranslatableSection && !this._inIcu) {
	                if (i18nAttr || isTopLevelImplicit) {
	                    this._inI18nNode = true;
	                    var /** @type {?} */ message = this._addMessage(el.children, i18nMeta);
	                    translatedChildNodes = this._translateMessage(el, message);
	                }
	                if (this._mode == _VisitorMode.Extract) {
	                    var /** @type {?} */ isTranslatable = i18nAttr || isTopLevelImplicit;
	                    if (isTranslatable)
	                        this._openTranslatableSection(el);
	                    visitAll(this, el.children);
	                    if (isTranslatable)
	                        this._closeTranslatableSection(el, el.children);
	                }
	            }
	            else {
	                if (i18nAttr || isTopLevelImplicit) {
	                    this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	                }
	                if (this._mode == _VisitorMode.Extract) {
	                    // Descend into child nodes for extraction
	                    visitAll(this, el.children);
	                }
	            }
	            if (this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ visitNodes = translatedChildNodes || el.children;
	                visitNodes.forEach(function (child) {
	                    var /** @type {?} */ visited = child.visit(_this, context);
	                    if (visited && !_this._isInTranslatableSection) {
	                        // Do not add the children from translatable sections (= i18n blocks here)
	                        // They will be added later in this loop when the block closes (i.e. on `<!-- /i18n -->`)
	                        childNodes = childNodes.concat(visited);
	                    }
	                });
	            }
	            this._visitAttributesOf(el);
	            this._depth--;
	            this._inI18nNode = wasInI18nNode;
	            this._inImplicitNode = wasInImplicitNode;
	            if (this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ translatedAttrs = this._translateAttributes(el);
	                return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _Visitor.prototype.visitAttribute = function (attribute, context) {
	            throw new Error('unreachable code');
	        };
	        /**
	         * @param {?} mode
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        _Visitor.prototype._init = function (mode, interpolationConfig) {
	            this._mode = mode;
	            this._inI18nBlock = false;
	            this._inI18nNode = false;
	            this._depth = 0;
	            this._inIcu = false;
	            this._msgCountAtSectionStart = void 0;
	            this._errors = [];
	            this._messages = [];
	            this._inImplicitNode = false;
	            this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _Visitor.prototype._visitAttributesOf = function (el) {
	            var _this = this;
	            var /** @type {?} */ explicitAttrNameToValue = {};
	            var /** @type {?} */ implicitAttrNames = this._implicitAttrs[el.name] || [];
	            el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	                .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                attr.value; });
	            el.attrs.forEach(function (attr) {
	                if (attr.name in explicitAttrNameToValue) {
	                    _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	                }
	                else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                    _this._addMessage([attr]);
	                }
	            });
	        };
	        /**
	         * @param {?} ast
	         * @param {?=} meaningAndDesc
	         * @return {?}
	         */
	        _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
	            if (ast.length == 0 ||
	                ast.length == 1 && ast[0] instanceof Attribute$1 && !((ast[0])).value) {
	                // Do not create empty messages
	                return;
	            }
	            var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
	            var /** @type {?} */ message = this._createI18nMessage(ast, meaning, description);
	            this._messages.push(message);
	            return message;
	        };
	        /**
	         * @param {?} el
	         * @param {?} message
	         * @return {?}
	         */
	        _Visitor.prototype._translateMessage = function (el, message) {
	            if (message && this._mode === _VisitorMode.Merge) {
	                var /** @type {?} */ nodes = this._translations.get(message);
	                if (nodes) {
	                    return nodes;
	                }
	                this._reportError(el, "Translation unavailable for message id=\"" + this._translations.digest(message) + "\"");
	            }
	            return [];
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        _Visitor.prototype._translateAttributes = function (el) {
	            var _this = this;
	            var /** @type {?} */ attributes = el.attrs;
	            var /** @type {?} */ i18nAttributeMeanings = {};
	            attributes.forEach(function (attr) {
	                if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                    i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                        _splitMeaningAndDesc(attr.value)[0];
	                }
	            });
	            var /** @type {?} */ translatedAttributes = [];
	            attributes.forEach(function (attr) {
	                if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                    // strip i18n specific attributes
	                    return;
	                }
	                if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
	                    var /** @type {?} */ meaning = i18nAttributeMeanings[attr.name];
	                    var /** @type {?} */ message = _this._createI18nMessage([attr], meaning, '');
	                    var /** @type {?} */ nodes = _this._translations.get(message);
	                    if (nodes) {
	                        if (nodes[0] instanceof Text) {
	                            var /** @type {?} */ value = ((nodes[0])).value;
	                            translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                        }
	                        else {
	                            _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                        }
	                    }
	                    else {
	                        _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + _this._translations.digest(message) + "\")");
	                    }
	                }
	                else {
	                    translatedAttributes.push(attr);
	                }
	            });
	            return translatedAttributes;
	        };
	        /**
	         * Add the node as a child of the block when:
	         * - we are in a block,
	         * - we are not inside a ICU message (those are handled separately),
	         * - the node is a "direct child" of the block
	         * @param {?} node
	         * @return {?}
	         */
	        _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	            if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	                this._blockChildren.push(node);
	            }
	        };
	        /**
	         * Marks the start of a section, see `_endSection`
	         * @param {?} node
	         * @return {?}
	         */
	        _Visitor.prototype._openTranslatableSection = function (node) {
	            if (this._isInTranslatableSection) {
	                this._reportError(node, 'Unexpected section start');
	            }
	            else {
	                this._msgCountAtSectionStart = this._messages.length;
	            }
	        };
	        Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	            /**
	             * A translatable section could be:
	             * - the content of translatable element,
	             * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	             * @return {?}
	             */
	            get: function () {
	                return this._msgCountAtSectionStart !== void 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Terminates a section.
	         *
	         * If a section has only one significant children (comments not significant) then we should not
	         * keep the message from this children:
	         *
	         * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	         * - one for the <p> content with meaning and description,
	         * - another one for the ICU message.
	         *
	         * In this case the last message is discarded as it contains less information (the AST is
	         * otherwise identical).
	         *
	         * Note that we should still keep messages extracted from attributes inside the section (ie in the
	         * ICU message here)
	         * @param {?} node
	         * @param {?} directChildren
	         * @return {?}
	         */
	        _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	            if (!this._isInTranslatableSection) {
	                this._reportError(node, 'Unexpected section end');
	                return;
	            }
	            var /** @type {?} */ startIndex = this._msgCountAtSectionStart;
	            var /** @type {?} */ significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	            if (significantChildren == 1) {
	                for (var /** @type {?} */ i = this._messages.length - 1; i >= startIndex; i--) {
	                    var /** @type {?} */ ast = this._messages[i].nodes;
	                    if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                        this._messages.splice(i, 1);
	                        break;
	                    }
	                }
	            }
	            this._msgCountAtSectionStart = void 0;
	        };
	        /**
	         * @param {?} node
	         * @param {?} msg
	         * @return {?}
	         */
	        _Visitor.prototype._reportError = function (node, msg) {
	            this._errors.push(new I18nError(node.sourceSpan, msg));
	        };
	        return _Visitor;
	    }());
	    /**
	     * @param {?} n
	     * @return {?}
	     */
	    function _isOpeningComment(n) {
	        return n instanceof Comment && n.value && n.value.startsWith('i18n');
	    }
	    /**
	     * @param {?} n
	     * @return {?}
	     */
	    function _isClosingComment(n) {
	        return n instanceof Comment && n.value && n.value === '/i18n';
	    }
	    /**
	     * @param {?} p
	     * @return {?}
	     */
	    function _getI18nAttr(p) {
	        return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	    }
	    /**
	     * @param {?} i18n
	     * @return {?}
	     */
	    function _splitMeaningAndDesc(i18n) {
	        if (!i18n)
	            return ['', ''];
	        var /** @type {?} */ pipeIndex = i18n.indexOf('|');
	        return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
	    }

	    var XmlTagDefinition = (function () {
	        function XmlTagDefinition() {
	            this.closedByParent = false;
	            this.contentType = TagContentType.PARSABLE_DATA;
	            this.isVoid = false;
	            this.ignoreFirstLf = false;
	            this.canSelfClose = true;
	        }
	        /**
	         * @param {?} currentParent
	         * @return {?}
	         */
	        XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	        return XmlTagDefinition;
	    }());
	    var /** @type {?} */ _TAG_DEFINITION = new XmlTagDefinition();
	    /**
	     * @param {?} tagName
	     * @return {?}
	     */
	    function getXmlTagDefinition(tagName) {
	        return _TAG_DEFINITION;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var XmlParser = (function (_super) {
	        __extends$9(XmlParser, _super);
	        function XmlParser() {
	            _super.call(this, getXmlTagDefinition);
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @return {?}
	         */
	        XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	        };
	        return XmlParser;
	    }(Parser$1));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function digest(message) {
	        return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	    }
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function decimalDigest(message) {
	        var /** @type {?} */ visitor = new _SerializerIgnoreIcuExpVisitor();
	        var /** @type {?} */ parts = message.nodes.map(function (a) { return a.visit(visitor, null); });
	        return computeMsgId(parts.join(''), message.meaning);
	    }
	    /**
	     * Serialize the i18n ast to something xml-like in order to generate an UID.
	     *
	     * The visitor is also used in the i18n parser tests
	     *
	     * \@internal
	     */
	    var _SerializerVisitor = (function () {
	        function _SerializerVisitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	        /**
	         * @param {?} container
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	        };
	        /**
	         * @param {?} ph
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	            var _this = this;
	            return ph.isVoid ?
	                "<ph tag name=\"" + ph.startName + "\"/>" :
	                "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	        };
	        /**
	         * @param {?} ph
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	            return ph.value ? "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>" : "<ph name=\"" + ph.name + "\"/>";
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	            return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	        };
	        return _SerializerVisitor;
	    }());
	    var /** @type {?} */ serializerVisitor = new _SerializerVisitor();
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    function serializeNodes(nodes) {
	        return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	    }
	    /**
	     * Serialize the i18n ast to something xml-like in order to generate an UID.
	     *
	     * Ignore the ICU expressions so that message IDs stays identical if only the expression changes.
	     *
	     * \@internal
	     */
	    var _SerializerIgnoreIcuExpVisitor = (function (_super) {
	        __extends$10(_SerializerIgnoreIcuExpVisitor, _super);
	        function _SerializerIgnoreIcuExpVisitor() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _SerializerIgnoreIcuExpVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            // Do not take the expression into account
	            return "{" + icu.type + ", " + strCases.join(', ') + "}";
	        };
	        return _SerializerIgnoreIcuExpVisitor;
	    }(_SerializerVisitor));
	    /**
	     * Compute the SHA1 of the given string
	     *
	     * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	     *
	     * WARNING: this function has not been designed not tested with security in mind.
	     *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	     * @param {?} str
	     * @return {?}
	     */
	    function sha1(str) {
	        var /** @type {?} */ utf8 = utf8Encode(str);
	        var /** @type {?} */ words32 = stringToWords32(utf8, Endian.Big);
	        var /** @type {?} */ len = utf8.length * 8;
	        var /** @type {?} */ w = new Array(80);
	        var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	        words32[len >> 5] |= 0x80 << (24 - len % 32);
	        words32[((len + 64 >> 9) << 4) + 15] = len;
	        for (var /** @type {?} */ i = 0; i < words32.length; i += 16) {
	            var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	            for (var /** @type {?} */ j = 0; j < 80; j++) {
	                if (j < 16) {
	                    w[j] = words32[i + j];
	                }
	                else {
	                    w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	                }
	                var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	                var /** @type {?} */ temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	                _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	            }
	            _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	        }
	        return byteStringToHexString(words32ToByteString([a, b, c, d, e]));
	        var _d, _e;
	    }
	    /**
	     * @param {?} index
	     * @param {?} b
	     * @param {?} c
	     * @param {?} d
	     * @return {?}
	     */
	    function fk(index, b, c, d) {
	        if (index < 20) {
	            return [(b & c) | (~b & d), 0x5a827999];
	        }
	        if (index < 40) {
	            return [b ^ c ^ d, 0x6ed9eba1];
	        }
	        if (index < 60) {
	            return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	        }
	        return [b ^ c ^ d, 0xca62c1d6];
	    }
	    /**
	     * Compute the fingerprint of the given string
	     *
	     * The output is 64 bit number encoded as a decimal string
	     *
	     * based on:
	     * https://github.com/google/closure-compiler/blob/master/src/com/google/javascript/jscomp/GoogleJsMessageIdGenerator.java
	     * @param {?} str
	     * @return {?}
	     */
	    function fingerprint(str) {
	        var /** @type {?} */ utf8 = utf8Encode(str);
	        var _a = [hash32(utf8, 0), hash32(utf8, 102072)], hi = _a[0], lo = _a[1];
	        if (hi == 0 && (lo == 0 || lo == 1)) {
	            hi = hi ^ 0x130f9bef;
	            lo = lo ^ -0x6b5f56d8;
	        }
	        return [hi, lo];
	    }
	    /**
	     * @param {?} msg
	     * @param {?} meaning
	     * @return {?}
	     */
	    function computeMsgId(msg, meaning) {
	        var _a = fingerprint(msg), hi = _a[0], lo = _a[1];
	        if (meaning) {
	            var _b = fingerprint(meaning), him = _b[0], lom = _b[1];
	            _c = add64(rol64([hi, lo], 1), [him, lom]), hi = _c[0], lo = _c[1];
	        }
	        return byteStringToDecString(words32ToByteString([hi & 0x7fffffff, lo]));
	        var _c;
	    }
	    /**
	     * @param {?} str
	     * @param {?} c
	     * @return {?}
	     */
	    function hash32(str, c) {
	        var _a = [0x9e3779b9, 0x9e3779b9], a = _a[0], b = _a[1];
	        var /** @type {?} */ i;
	        var /** @type {?} */ len = str.length;
	        for (i = 0; i + 12 <= len; i += 12) {
	            a = add32(a, wordAt(str, i, Endian.Little));
	            b = add32(b, wordAt(str, i + 4, Endian.Little));
	            c = add32(c, wordAt(str, i + 8, Endian.Little));
	            _b = mix([a, b, c]), a = _b[0], b = _b[1], c = _b[2];
	        }
	        a = add32(a, wordAt(str, i, Endian.Little));
	        b = add32(b, wordAt(str, i + 4, Endian.Little));
	        // the first byte of c is reserved for the length
	        c = add32(c, len);
	        c = add32(c, wordAt(str, i + 8, Endian.Little) << 8);
	        return mix([a, b, c])[2];
	        var _b;
	    }
	    /**
	     * @param {?} __0
	     * @return {?}
	     */
	    function mix(_a) {
	        var a = _a[0], b = _a[1], c = _a[2];
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 13;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 8;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 13;
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 12;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 16;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 5;
	        a = sub32(a, b);
	        a = sub32(a, c);
	        a ^= c >>> 3;
	        b = sub32(b, c);
	        b = sub32(b, a);
	        b ^= a << 10;
	        c = sub32(c, a);
	        c = sub32(c, b);
	        c ^= b >>> 15;
	        return [a, b, c];
	    }
	    var Endian = {};
	    Endian.Little = 0;
	    Endian.Big = 1;
	    Endian[Endian.Little] = "Little";
	    Endian[Endian.Big] = "Big";
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function utf8Encode(str) {
	        var /** @type {?} */ encoded = '';
	        for (var /** @type {?} */ index = 0; index < str.length; index++) {
	            var /** @type {?} */ codePoint = decodeSurrogatePairs(str, index);
	            if (codePoint <= 0x7f) {
	                encoded += String.fromCharCode(codePoint);
	            }
	            else if (codePoint <= 0x7ff) {
	                encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
	            }
	            else if (codePoint <= 0xffff) {
	                encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	            }
	            else if (codePoint <= 0x1fffff) {
	                encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	            }
	        }
	        return encoded;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @return {?}
	     */
	    function decodeSurrogatePairs(str, index) {
	        if (index < 0 || index >= str.length) {
	            throw new Error("index=" + index + " is out of range in \"" + str + "\"");
	        }
	        var /** @type {?} */ high = str.charCodeAt(index);
	        if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
	            var /** @type {?} */ low = byteAt(str, index + 1);
	            if (low >= 0xdc00 && low <= 0xdfff) {
	                return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
	            }
	        }
	        return high;
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function add32(a, b) {
	        return add32to64(a, b)[1];
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function add32to64(a, b) {
	        var /** @type {?} */ low = (a & 0xffff) + (b & 0xffff);
	        var /** @type {?} */ high = (a >>> 16) + (b >>> 16) + (low >>> 16);
	        return [high >>> 16, (high << 16) | (low & 0xffff)];
	    }
	    /**
	     * @param {?} __0
	     * @param {?} __1
	     * @return {?}
	     */
	    function add64(_a, _b) {
	        var ah = _a[0], al = _a[1];
	        var bh = _b[0], bl = _b[1];
	        var _c = add32to64(al, bl), carry = _c[0], l = _c[1];
	        var /** @type {?} */ h = add32(add32(ah, bh), carry);
	        return [h, l];
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function sub32(a, b) {
	        var /** @type {?} */ low = (a & 0xffff) - (b & 0xffff);
	        var /** @type {?} */ high = (a >> 16) - (b >> 16) + (low >> 16);
	        return (high << 16) | (low & 0xffff);
	    }
	    /**
	     * @param {?} a
	     * @param {?} count
	     * @return {?}
	     */
	    function rol32(a, count) {
	        return (a << count) | (a >>> (32 - count));
	    }
	    /**
	     * @param {?} __0
	     * @param {?} count
	     * @return {?}
	     */
	    function rol64(_a, count) {
	        var hi = _a[0], lo = _a[1];
	        var /** @type {?} */ h = (hi << count) | (lo >>> (32 - count));
	        var /** @type {?} */ l = (lo << count) | (hi >>> (32 - count));
	        return [h, l];
	    }
	    /**
	     * @param {?} str
	     * @param {?} endian
	     * @return {?}
	     */
	    function stringToWords32(str, endian) {
	        var /** @type {?} */ words32 = Array((str.length + 3) >>> 2);
	        for (var /** @type {?} */ i = 0; i < words32.length; i++) {
	            words32[i] = wordAt(str, i * 4, endian);
	        }
	        return words32;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @return {?}
	     */
	    function byteAt(str, index) {
	        return index >= str.length ? 0 : str.charCodeAt(index) & 0xff;
	    }
	    /**
	     * @param {?} str
	     * @param {?} index
	     * @param {?} endian
	     * @return {?}
	     */
	    function wordAt(str, index, endian) {
	        var /** @type {?} */ word = 0;
	        if (endian === Endian.Big) {
	            for (var /** @type {?} */ i = 0; i < 4; i++) {
	                word += byteAt(str, index + i) << (24 - 8 * i);
	            }
	        }
	        else {
	            for (var /** @type {?} */ i = 0; i < 4; i++) {
	                word += byteAt(str, index + i) << 8 * i;
	            }
	        }
	        return word;
	    }
	    /**
	     * @param {?} words32
	     * @return {?}
	     */
	    function words32ToByteString(words32) {
	        return words32.reduce(function (str, word) { return str + word32ToByteString(word); }, '');
	    }
	    /**
	     * @param {?} word
	     * @return {?}
	     */
	    function word32ToByteString(word) {
	        var /** @type {?} */ str = '';
	        for (var /** @type {?} */ i = 0; i < 4; i++) {
	            str += String.fromCharCode((word >>> 8 * (3 - i)) & 0xff);
	        }
	        return str;
	    }
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function byteStringToHexString(str) {
	        var /** @type {?} */ hex = '';
	        for (var /** @type {?} */ i = 0; i < str.length; i++) {
	            var /** @type {?} */ b = byteAt(str, i);
	            hex += (b >>> 4).toString(16) + (b & 0x0f).toString(16);
	        }
	        return hex.toLowerCase();
	    }
	    /**
	     * @param {?} str
	     * @return {?}
	     */
	    function byteStringToDecString(str) {
	        var /** @type {?} */ decimal = '';
	        var /** @type {?} */ toThePower = '1';
	        for (var /** @type {?} */ i = str.length - 1; i >= 0; i--) {
	            decimal = addBigInt(decimal, numberTimesBigInt(byteAt(str, i), toThePower));
	            toThePower = numberTimesBigInt(256, toThePower);
	        }
	        return decimal.split('').reverse().join('');
	    }
	    /**
	     * @param {?} x
	     * @param {?} y
	     * @return {?}
	     */
	    function addBigInt(x, y) {
	        var /** @type {?} */ sum = '';
	        var /** @type {?} */ len = Math.max(x.length, y.length);
	        for (var /** @type {?} */ i = 0, /** @type {?} */ carry = 0; i < len || carry; i++) {
	            var /** @type {?} */ tmpSum = carry + +(x[i] || 0) + +(y[i] || 0);
	            if (tmpSum >= 10) {
	                carry = 1;
	                sum += tmpSum - 10;
	            }
	            else {
	                carry = 0;
	                sum += tmpSum;
	            }
	        }
	        return sum;
	    }
	    /**
	     * @param {?} num
	     * @param {?} b
	     * @return {?}
	     */
	    function numberTimesBigInt(num, b) {
	        var /** @type {?} */ product = '';
	        var /** @type {?} */ bToThePower = b;
	        for (; num !== 0; num = num >>> 1) {
	            if (num & 1)
	                product = addBigInt(product, bToThePower);
	            bToThePower = addBigInt(bToThePower, bToThePower);
	        }
	        return product;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @abstract
	     */
	    var Serializer = (function () {
	        function Serializer() {
	        }
	        /**
	         * @abstract
	         * @param {?} messages
	         * @return {?}
	         */
	        Serializer.prototype.write = function (messages) { };
	        /**
	         * @abstract
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Serializer.prototype.load = function (content, url) { };
	        /**
	         * @abstract
	         * @param {?} message
	         * @return {?}
	         */
	        Serializer.prototype.digest = function (message) { };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Serializer.prototype.createNameMapper = function (message) { return null; };
	        return Serializer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _Visitor$1 = (function () {
	        function _Visitor() {
	        }
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        _Visitor.prototype.visitTag = function (tag) {
	            var _this = this;
	            var /** @type {?} */ strAttrs = this._serializeAttributes(tag.attrs);
	            if (tag.children.length == 0) {
	                return "<" + tag.name + strAttrs + "/>";
	            }
	            var /** @type {?} */ strChildren = tag.children.map(function (node) { return node.visit(_this); });
	            return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	        };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text) { return text.value; };
	        /**
	         * @param {?} decl
	         * @return {?}
	         */
	        _Visitor.prototype.visitDeclaration = function (decl) {
	            return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	        };
	        /**
	         * @param {?} attrs
	         * @return {?}
	         */
	        _Visitor.prototype._serializeAttributes = function (attrs) {
	            var /** @type {?} */ strAttrs = Object.keys(attrs).map(function (name) { return (name + "=\"" + attrs[name] + "\""); }).join(' ');
	            return strAttrs.length > 0 ? ' ' + strAttrs : '';
	        };
	        /**
	         * @param {?} doctype
	         * @return {?}
	         */
	        _Visitor.prototype.visitDoctype = function (doctype) {
	            return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	        };
	        return _Visitor;
	    }());
	    var /** @type {?} */ _visitor = new _Visitor$1();
	    /**
	     * @param {?} nodes
	     * @return {?}
	     */
	    function serialize(nodes) {
	        return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	    }
	    var Declaration = (function () {
	        /**
	         * @param {?} unescapedAttrs
	         */
	        function Declaration(unescapedAttrs) {
	            var _this = this;
	            this.attrs = {};
	            Object.keys(unescapedAttrs).forEach(function (k) {
	                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	            });
	        }
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	        return Declaration;
	    }());
	    var Doctype = (function () {
	        /**
	         * @param {?} rootTag
	         * @param {?} dtd
	         */
	        function Doctype(rootTag, dtd) {
	            this.rootTag = rootTag;
	            this.dtd = dtd;
	        }
	        ;
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	        return Doctype;
	    }());
	    var Tag = (function () {
	        /**
	         * @param {?} name
	         * @param {?=} unescapedAttrs
	         * @param {?=} children
	         */
	        function Tag(name, unescapedAttrs, children) {
	            var _this = this;
	            if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	            if (children === void 0) { children = []; }
	            this.name = name;
	            this.children = children;
	            this.attrs = {};
	            Object.keys(unescapedAttrs).forEach(function (k) {
	                _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	            });
	        }
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	        return Tag;
	    }());
	    var Text$2 = (function () {
	        /**
	         * @param {?} unescapedValue
	         */
	        function Text(unescapedValue) {
	            this.value = _escapeXml(unescapedValue);
	        }
	        ;
	        /**
	         * @param {?} visitor
	         * @return {?}
	         */
	        Text.prototype.visit = function (visitor) { return visitor.visitText(this); };
	        return Text;
	    }());
	    var CR = (function (_super) {
	        __extends$11(CR, _super);
	        /**
	         * @param {?=} ws
	         */
	        function CR(ws) {
	            if (ws === void 0) { ws = 0; }
	            _super.call(this, "\n" + new Array(ws + 1).join(' '));
	        }
	        return CR;
	    }(Text$2));
	    var /** @type {?} */ _ESCAPED_CHARS = [
	        [/&/g, '&amp;'],
	        [/"/g, '&quot;'],
	        [/'/g, '&apos;'],
	        [/</g, '&lt;'],
	        [/>/g, '&gt;'],
	    ];
	    /**
	     * @param {?} text
	     * @return {?}
	     */
	    function _escapeXml(text) {
	        return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _VERSION = '1.2';
	    var /** @type {?} */ _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	    // TODO(vicb): make this a param (s/_/-/)
	    var /** @type {?} */ _SOURCE_LANG = 'en';
	    var /** @type {?} */ _PLACEHOLDER_TAG = 'x';
	    var /** @type {?} */ _SOURCE_TAG = 'source';
	    var /** @type {?} */ _TARGET_TAG = 'target';
	    var /** @type {?} */ _UNIT_TAG = 'trans-unit';
	    var Xliff = (function (_super) {
	        __extends$8(Xliff, _super);
	        function Xliff() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xliff.prototype.write = function (messages) {
	            var _this = this;
	            var /** @type {?} */ visitor = new _WriteVisitor();
	            var /** @type {?} */ visited = {};
	            var /** @type {?} */ transUnits = [];
	            messages.forEach(function (message) {
	                var /** @type {?} */ id = _this.digest(message);
	                // deduplicate messages
	                if (visited[id])
	                    return;
	                visited[id] = true;
	                var /** @type {?} */ transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });
	                transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
	                if (message.description) {
	                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	                }
	                if (message.meaning) {
	                    transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	                }
	                transUnit.children.push(new CR(6));
	                transUnits.push(new CR(6), transUnit);
	            });
	            var /** @type {?} */ body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	            var /** @type {?} */ file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [new CR(4), body, new CR(2)]);
	            var /** @type {?} */ xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	            return serialize([
	                new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	            ]);
	        };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xliff.prototype.load = function (content, url) {
	            // xliff to xml nodes
	            var /** @type {?} */ xliffParser = new XliffParser();
	            var _a = xliffParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	            // xml nodes to i18n nodes
	            var /** @type {?} */ i18nNodesByMsgId = {};
	            var /** @type {?} */ converter = new XmlToI18n();
	            Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	                var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	                errors.push.apply(errors, e);
	                i18nNodesByMsgId[msgId] = i18nNodes;
	            });
	            if (errors.length) {
	                throw new Error("xliff parse errors:\n" + errors.join('\n'));
	            }
	            return i18nNodesByMsgId;
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xliff.prototype.digest = function (message) { return digest(message); };
	        return Xliff;
	    }(Serializer));
	    var _WriteVisitor = (function () {
	        function _WriteVisitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	        /**
	         * @param {?} container
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            var /** @type {?} */ nodes = [];
	            container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	            return nodes;
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitIcu = function (icu, context) {
	            if (this._isInIcu) {
	                // nested ICU is not supported
	                throw new Error('xliff does not support nested ICU messages');
	            }
	            this._isInIcu = true;
	            // TODO(vicb): support ICU messages
	            // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	            // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	            var /** @type {?} */ nodes = [];
	            this._isInIcu = false;
	            return nodes;
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	            var /** @type {?} */ ctype = getCtypeForTag(ph.tag);
	            var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	            if (ph.isVoid) {
	                // void tags have no children nor closing tags
	                return [startTagPh];
	            }
	            var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	            return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	            return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	        };
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        _WriteVisitor.prototype.serialize = function (nodes) {
	            var _this = this;
	            this._isInIcu = false;
	            return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	            var _a;
	        };
	        return _WriteVisitor;
	    }());
	    var XliffParser = (function () {
	        function XliffParser() {
	        }
	        /**
	         * @param {?} xliff
	         * @param {?} url
	         * @return {?}
	         */
	        XliffParser.prototype.parse = function (xliff, url) {
	            this._unitMlNodes = [];
	            this._mlNodesByMsgId = {};
	            var /** @type {?} */ xml = new XmlParser().parse(xliff, url, false);
	            this._errors = xml.errors;
	            visitAll(this, xml.rootNodes, null);
	            return {
	                mlNodesByMsgId: this._mlNodesByMsgId,
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitElement = function (element, context) {
	            switch (element.name) {
	                case _UNIT_TAG:
	                    this._unitMlNodes = null;
	                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                    if (!idAttr) {
	                        this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                    }
	                    else {
	                        var /** @type {?} */ id = idAttr.value;
	                        if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                            this._addError(element, "Duplicated translations for msg " + id);
	                        }
	                        else {
	                            visitAll(this, element.children, null);
	                            if (this._unitMlNodes) {
	                                this._mlNodesByMsgId[id] = this._unitMlNodes;
	                            }
	                            else {
	                                this._addError(element, "Message " + id + " misses a translation");
	                            }
	                        }
	                    }
	                    break;
	                case _SOURCE_TAG:
	                    // ignore source message
	                    break;
	                case _TARGET_TAG:
	                    this._unitMlNodes = element.children;
	                    break;
	                default:
	                    // TODO(vicb): assert file structure, xliff version
	                    // For now only recurse on unhandled nodes
	                    visitAll(this, element.children, null);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitText = function (text, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitExpansion = function (expansion, context) { };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        XliffParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XliffParser.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XliffParser;
	    }());
	    var XmlToI18n = (function () {
	        function XmlToI18n() {
	        }
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        XmlToI18n.prototype.convert = function (nodes) {
	            this._errors = [];
	            return {
	                i18nNodes: visitAll(this, nodes),
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitElement = function (el, context) {
	            if (el.name === _PLACEHOLDER_TAG) {
	                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'id'; });
	                if (nameAttr) {
	                    return new Placeholder('', nameAttr.value, el.sourceSpan);
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	            }
	            else {
	                this._addError(el, "Unexpected tag");
	            }
	        };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansion = function (icu, context) { };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XmlToI18n.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XmlToI18n;
	    }());
	    /**
	     * @param {?} tag
	     * @return {?}
	     */
	    function getCtypeForTag(tag) {
	        switch (tag.toLowerCase()) {
	            case 'br':
	                return 'lb';
	            case 'img':
	                return 'image';
	            default:
	                return "x-" + tag;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _MESSAGES_TAG = 'messagebundle';
	    var /** @type {?} */ _MESSAGE_TAG = 'msg';
	    var /** @type {?} */ _PLACEHOLDER_TAG$1 = 'ph';
	    var /** @type {?} */ _EXEMPLE_TAG = 'ex';
	    var /** @type {?} */ _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	    var Xmb = (function (_super) {
	        __extends$12(Xmb, _super);
	        function Xmb() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xmb.prototype.write = function (messages) {
	            var _this = this;
	            var /** @type {?} */ exampleVisitor = new ExampleVisitor();
	            var /** @type {?} */ visitor = new _Visitor$2();
	            var /** @type {?} */ visited = {};
	            var /** @type {?} */ rootNode = new Tag(_MESSAGES_TAG);
	            messages.forEach(function (message) {
	                var /** @type {?} */ id = _this.digest(message);
	                // deduplicate messages
	                if (visited[id])
	                    return;
	                visited[id] = true;
	                var /** @type {?} */ mapper = _this.createNameMapper(message);
	                var /** @type {?} */ attrs = { id: id };
	                if (message.description) {
	                    attrs['desc'] = message.description;
	                }
	                if (message.meaning) {
	                    attrs['meaning'] = message.meaning;
	                }
	                rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes, { mapper: mapper })));
	            });
	            rootNode.children.push(new CR());
	            return serialize([
	                new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	                new CR(),
	                new Doctype(_MESSAGES_TAG, _DOCTYPE),
	                new CR(),
	                exampleVisitor.addDefaultExamples(rootNode),
	                new CR(),
	            ]);
	        };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xmb.prototype.load = function (content, url) {
	            throw new Error('Unsupported');
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xmb.prototype.digest = function (message) { return digest$1(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xmb.prototype.createNameMapper = function (message) {
	            return new XmbPlaceholderMapper(message);
	        };
	        return Xmb;
	    }(Serializer));
	    var _Visitor$2 = (function () {
	        function _Visitor() {
	        }
	        /**
	         * @param {?} text
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitText = function (text, ctx) {
	            return [new Text$2(text.value)];
	        };
	        /**
	         * @param {?} container
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitContainer = function (container, ctx) {
	            var _this = this;
	            var /** @type {?} */ nodes = [];
	            container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this, ctx)); });
	            return nodes;
	        };
	        /**
	         * @param {?} icu
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitIcu = function (icu, ctx) {
	            var _this = this;
	            var /** @type {?} */ nodes = [new Text$2("{" + icu.expressionPlaceholder + ", " + icu.type + ", ")];
	            Object.keys(icu.cases).forEach(function (c) {
	                nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this, ctx), [new Text$2("} ")]));
	            });
	            nodes.push(new Text$2("}"));
	            return nodes;
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitTagPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.startName);
	            var /** @type {?} */ startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: name }, [startEx]);
	            if (ph.isVoid) {
	                // void tags have no children nor closing tags
	                return [startTagPh];
	            }
	            var /** @type {?} */ closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	            name = ctx.mapper.toPublicName(ph.closeName);
	            var /** @type {?} */ closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: name }, [closeEx]);
	            return [startTagPh].concat(this.serialize(ph.children, ctx), [closeTagPh]);
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.name);
	            return [new Tag(_PLACEHOLDER_TAG$1, { name: name })];
	        };
	        /**
	         * @param {?} ph
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.visitIcuPlaceholder = function (ph, ctx) {
	            var /** @type {?} */ name = ctx.mapper.toPublicName(ph.name);
	            return [new Tag(_PLACEHOLDER_TAG$1, { name: name })];
	        };
	        /**
	         * @param {?} nodes
	         * @param {?} ctx
	         * @return {?}
	         */
	        _Visitor.prototype.serialize = function (nodes, ctx) {
	            var _this = this;
	            return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this, ctx); }));
	            var _a;
	        };
	        return _Visitor;
	    }());
	    /**
	     * @param {?} message
	     * @return {?}
	     */
	    function digest$1(message) {
	        return decimalDigest(message);
	    }
	    var ExampleVisitor = (function () {
	        function ExampleVisitor() {
	        }
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        ExampleVisitor.prototype.addDefaultExamples = function (node) {
	            node.visit(this);
	            return node;
	        };
	        /**
	         * @param {?} tag
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitTag = function (tag) {
	            var _this = this;
	            if (tag.name === _PLACEHOLDER_TAG$1) {
	                if (!tag.children || tag.children.length == 0) {
	                    var /** @type {?} */ exText = new Text$2(tag.attrs['name'] || '...');
	                    tag.children = [new Tag(_EXEMPLE_TAG, {}, [exText])];
	                }
	            }
	            else if (tag.children) {
	                tag.children.forEach(function (node) { return node.visit(_this); });
	            }
	        };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitText = function (text) { };
	        /**
	         * @param {?} decl
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitDeclaration = function (decl) { };
	        /**
	         * @param {?} doctype
	         * @return {?}
	         */
	        ExampleVisitor.prototype.visitDoctype = function (doctype) { };
	        return ExampleVisitor;
	    }());
	    /**
	     * XMB/XTB placeholders can only contain A-Z, 0-9 and _
	     *
	     * Because such restrictions do not exist on placeholder names generated locally, the
	     * `PlaceholderMapper` is used to convert internal names to XMB names when the XMB file is
	     * serialized and back from XTB to internal names when an XTB is loaded.
	     */
	    var XmbPlaceholderMapper = (function () {
	        /**
	         * @param {?} message
	         */
	        function XmbPlaceholderMapper(message) {
	            var _this = this;
	            this.internalToXmb = {};
	            this.xmbToNextId = {};
	            this.xmbToInternal = {};
	            message.nodes.forEach(function (node) { return node.visit(_this); });
	        }
	        /**
	         * @param {?} internalName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.toPublicName = function (internalName) {
	            return this.internalToXmb.hasOwnProperty(internalName) ? this.internalToXmb[internalName] :
	                null;
	        };
	        /**
	         * @param {?} publicName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.toInternalName = function (publicName) {
	            return this.xmbToInternal.hasOwnProperty(publicName) ? this.xmbToInternal[publicName] : null;
	        };
	        /**
	         * @param {?} text
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitText = function (text, ctx) { return null; };
	        /**
	         * @param {?} container
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitContainer = function (container, ctx) {
	            var _this = this;
	            container.children.forEach(function (child) { return child.visit(_this); });
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitIcu = function (icu, ctx) {
	            var _this = this;
	            Object.keys(icu.cases).forEach(function (k) { icu.cases[k].visit(_this); });
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitTagPlaceholder = function (ph, ctx) {
	            var _this = this;
	            this.addPlaceholder(ph.startName);
	            ph.children.forEach(function (child) { return child.visit(_this); });
	            this.addPlaceholder(ph.closeName);
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitPlaceholder = function (ph, ctx) { this.addPlaceholder(ph.name); };
	        /**
	         * @param {?} ph
	         * @param {?=} ctx
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.visitIcuPlaceholder = function (ph, ctx) { this.addPlaceholder(ph.name); };
	        /**
	         * @param {?} internalName
	         * @return {?}
	         */
	        XmbPlaceholderMapper.prototype.addPlaceholder = function (internalName) {
	            if (!internalName || this.internalToXmb.hasOwnProperty(internalName)) {
	                return;
	            }
	            var /** @type {?} */ xmbName = internalName.toUpperCase().replace(/[^A-Z0-9_]/g, '_');
	            if (this.xmbToInternal.hasOwnProperty(xmbName)) {
	                // Create a new XMB when it has already been used
	                var /** @type {?} */ nextId = this.xmbToNextId[xmbName];
	                this.xmbToNextId[xmbName] = nextId + 1;
	                xmbName = xmbName + "_" + nextId;
	            }
	            else {
	                this.xmbToNextId[xmbName] = 1;
	            }
	            this.internalToXmb[internalName] = xmbName;
	            this.xmbToInternal[xmbName] = internalName;
	        };
	        return XmbPlaceholderMapper;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _TRANSLATIONS_TAG = 'translationbundle';
	    var /** @type {?} */ _TRANSLATION_TAG = 'translation';
	    var /** @type {?} */ _PLACEHOLDER_TAG$2 = 'ph';
	    var Xtb = (function (_super) {
	        __extends$13(Xtb, _super);
	        function Xtb() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} messages
	         * @return {?}
	         */
	        Xtb.prototype.write = function (messages) { throw new Error('Unsupported'); };
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @return {?}
	         */
	        Xtb.prototype.load = function (content, url) {
	            // xtb to xml nodes
	            var /** @type {?} */ xtbParser = new XtbParser();
	            var _a = xtbParser.parse(content, url), mlNodesByMsgId = _a.mlNodesByMsgId, errors = _a.errors;
	            // xml nodes to i18n nodes
	            var /** @type {?} */ i18nNodesByMsgId = {};
	            var /** @type {?} */ converter = new XmlToI18n$1();
	            Object.keys(mlNodesByMsgId).forEach(function (msgId) {
	                var _a = converter.convert(mlNodesByMsgId[msgId]), i18nNodes = _a.i18nNodes, e = _a.errors;
	                errors.push.apply(errors, e);
	                i18nNodesByMsgId[msgId] = i18nNodes;
	            });
	            if (errors.length) {
	                throw new Error("xtb parse errors:\n" + errors.join('\n'));
	            }
	            return i18nNodesByMsgId;
	        };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xtb.prototype.digest = function (message) { return digest$1(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Xtb.prototype.createNameMapper = function (message) {
	            return new XmbPlaceholderMapper(message);
	        };
	        return Xtb;
	    }(Serializer));
	    var XtbParser = (function () {
	        function XtbParser() {
	        }
	        /**
	         * @param {?} xtb
	         * @param {?} url
	         * @return {?}
	         */
	        XtbParser.prototype.parse = function (xtb, url) {
	            this._bundleDepth = 0;
	            this._mlNodesByMsgId = {};
	            var /** @type {?} */ xml = new XmlParser().parse(xtb, url, true);
	            this._errors = xml.errors;
	            visitAll(this, xml.rootNodes);
	            return {
	                mlNodesByMsgId: this._mlNodesByMsgId,
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitElement = function (element, context) {
	            switch (element.name) {
	                case _TRANSLATIONS_TAG:
	                    this._bundleDepth++;
	                    if (this._bundleDepth > 1) {
	                        this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                    }
	                    visitAll(this, element.children, null);
	                    this._bundleDepth--;
	                    break;
	                case _TRANSLATION_TAG:
	                    var /** @type {?} */ idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                    if (!idAttr) {
	                        this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                    }
	                    else {
	                        var /** @type {?} */ id = idAttr.value;
	                        if (this._mlNodesByMsgId.hasOwnProperty(id)) {
	                            this._addError(element, "Duplicated translations for msg " + id);
	                        }
	                        else {
	                            this._mlNodesByMsgId[id] = element.children;
	                        }
	                    }
	                    break;
	                default:
	                    this._addError(element, 'Unexpected tag');
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitText = function (text, context) { };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitExpansion = function (expansion, context) { };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        XtbParser.prototype.visitExpansionCase = function (expansionCase, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XtbParser.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XtbParser;
	    }());
	    var XmlToI18n$1 = (function () {
	        function XmlToI18n() {
	        }
	        /**
	         * @param {?} nodes
	         * @return {?}
	         */
	        XmlToI18n.prototype.convert = function (nodes) {
	            this._errors = [];
	            return {
	                i18nNodes: visitAll(this, nodes),
	                errors: this._errors,
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitText = function (text, context) { return new Text$1(text.value, text.sourceSpan); };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansion = function (icu, context) {
	            var /** @type {?} */ caseMap = {};
	            visitAll(this, icu.cases).forEach(function (c) {
	                caseMap[c.value] = new Container(c.nodes, icu.sourceSpan);
	            });
	            return new Icu(icu.switchValue, icu.type, caseMap, icu.sourceSpan);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitExpansionCase = function (icuCase, context) {
	            return {
	                value: icuCase.value,
	                nodes: visitAll(this, icuCase.expression),
	            };
	        };
	        /**
	         * @param {?} el
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitElement = function (el, context) {
	            if (el.name === _PLACEHOLDER_TAG$2) {
	                var /** @type {?} */ nameAttr = el.attrs.find(function (attr) { return attr.name === 'name'; });
	                if (nameAttr) {
	                    return new Placeholder('', nameAttr.value, el.sourceSpan);
	                }
	                this._addError(el, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	            }
	            else {
	                this._addError(el, "Unexpected tag");
	            }
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitComment = function (comment, context) { };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        XmlToI18n.prototype.visitAttribute = function (attribute, context) { };
	        /**
	         * @param {?} node
	         * @param {?} message
	         * @return {?}
	         */
	        XmlToI18n.prototype._addError = function (node, message) {
	            this._errors.push(new I18nError(node.sourceSpan, message));
	        };
	        return XmlToI18n;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$3 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var HtmlParser = (function (_super) {
	        __extends$14(HtmlParser, _super);
	        function HtmlParser() {
	            _super.call(this, getHtmlTagDefinition);
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	        };
	        HtmlParser = __decorate$3([
	            CompilerInjectable(), 
	            __metadata$3('design:paramtypes', [])
	        ], HtmlParser);
	        return HtmlParser;
	    }(Parser$1));

	    /**
	     * A container for translated messages
	     */
	    var TranslationBundle = (function () {
	        /**
	         * @param {?=} _i18nNodesByMsgId
	         * @param {?} digest
	         * @param {?=} mapperFactory
	         */
	        function TranslationBundle(_i18nNodesByMsgId, digest, mapperFactory) {
	            if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	            this._i18nNodesByMsgId = _i18nNodesByMsgId;
	            this.digest = digest;
	            this.mapperFactory = mapperFactory;
	            this._i18nToHtml = new I18nToHtmlVisitor(_i18nNodesByMsgId, digest, mapperFactory);
	        }
	        /**
	         * @param {?} content
	         * @param {?} url
	         * @param {?} serializer
	         * @return {?}
	         */
	        TranslationBundle.load = function (content, url, serializer) {
	            var /** @type {?} */ i18nNodesByMsgId = serializer.load(content, url);
	            var /** @type {?} */ digestFn = function (m) { return serializer.digest(m); };
	            var /** @type {?} */ mapperFactory = function (m) { return serializer.createNameMapper(m); };
	            return new TranslationBundle(i18nNodesByMsgId, digestFn, mapperFactory);
	        };
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        TranslationBundle.prototype.get = function (srcMsg) {
	            var /** @type {?} */ html = this._i18nToHtml.convert(srcMsg);
	            if (html.errors.length) {
	                throw new Error(html.errors.join('\n'));
	            }
	            return html.nodes;
	        };
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        TranslationBundle.prototype.has = function (srcMsg) { return this.digest(srcMsg) in this._i18nNodesByMsgId; };
	        return TranslationBundle;
	    }());
	    var I18nToHtmlVisitor = (function () {
	        /**
	         * @param {?=} _i18nNodesByMsgId
	         * @param {?} _digest
	         * @param {?} _mapperFactory
	         */
	        function I18nToHtmlVisitor(_i18nNodesByMsgId, _digest, _mapperFactory) {
	            if (_i18nNodesByMsgId === void 0) { _i18nNodesByMsgId = {}; }
	            this._i18nNodesByMsgId = _i18nNodesByMsgId;
	            this._digest = _digest;
	            this._mapperFactory = _mapperFactory;
	            this._contextStack = [];
	            this._errors = [];
	        }
	        /**
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.convert = function (srcMsg) {
	            this._contextStack.length = 0;
	            this._errors.length = 0;
	            // i18n to text
	            var /** @type {?} */ text = this._convertToText(srcMsg);
	            // text to html
	            var /** @type {?} */ url = srcMsg.nodes[0].sourceSpan.start.file.url;
	            var /** @type {?} */ html = new HtmlParser().parse(text, url, true);
	            return {
	                nodes: html.rootNodes,
	                errors: this._errors.concat(html.errors),
	            };
	        };
	        /**
	         * @param {?} text
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitText = function (text, context) { return text.value; };
	        /**
	         * @param {?} container
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitContainer = function (container, context) {
	            var _this = this;
	            return container.children.map(function (n) { return n.visit(_this); }).join('');
	        };
	        /**
	         * @param {?} icu
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitIcu = function (icu, context) {
	            var _this = this;
	            var /** @type {?} */ cases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	            // TODO(vicb): Once all format switch to using expression placeholders
	            // we should throw when the placeholder is not in the source message
	            var /** @type {?} */ exp = this._srcMsg.placeholders.hasOwnProperty(icu.expression) ?
	                this._srcMsg.placeholders[icu.expression] :
	                icu.expression;
	            return "{" + exp + ", " + icu.type + ", " + cases.join(' ') + "}";
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitPlaceholder = function (ph, context) {
	            var /** @type {?} */ phName = this._mapper(ph.name);
	            if (this._srcMsg.placeholders.hasOwnProperty(phName)) {
	                return this._srcMsg.placeholders[phName];
	            }
	            if (this._srcMsg.placeholderToMessage.hasOwnProperty(phName)) {
	                return this._convertToText(this._srcMsg.placeholderToMessage[phName]);
	            }
	            this._addError(ph, "Unknown placeholder");
	            return '';
	        };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitTagPlaceholder = function (ph, context) { throw 'unreachable code'; };
	        /**
	         * @param {?} ph
	         * @param {?=} context
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype.visitIcuPlaceholder = function (ph, context) { throw 'unreachable code'; };
	        /**
	         * Convert a source message to a translated text string:
	         * - text nodes are replaced with their translation,
	         * - placeholders are replaced with their content,
	         * - ICU nodes are converted to ICU expressions.
	         * @param {?} srcMsg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype._convertToText = function (srcMsg) {
	            var _this = this;
	            var /** @type {?} */ digest = this._digest(srcMsg);
	            var /** @type {?} */ mapper = this._mapperFactory ? this._mapperFactory(srcMsg) : null;
	            if (this._i18nNodesByMsgId.hasOwnProperty(digest)) {
	                this._contextStack.push({ msg: this._srcMsg, mapper: this._mapper });
	                this._srcMsg = srcMsg;
	                this._mapper = function (name) { return mapper ? mapper.toInternalName(name) : name; };
	                var /** @type {?} */ nodes = this._i18nNodesByMsgId[digest];
	                var /** @type {?} */ text = nodes.map(function (node) { return node.visit(_this); }).join('');
	                var /** @type {?} */ context = this._contextStack.pop();
	                this._srcMsg = context.msg;
	                this._mapper = context.mapper;
	                return text;
	            }
	            this._addError(srcMsg.nodes[0], "Missing translation for message " + digest);
	            return '';
	        };
	        /**
	         * @param {?} el
	         * @param {?} msg
	         * @return {?}
	         */
	        I18nToHtmlVisitor.prototype._addError = function (el, msg) {
	            this._errors.push(new I18nError(el.sourceSpan, msg));
	        };
	        return I18nToHtmlVisitor;
	    }());

	    var I18NHtmlParser = (function () {
	        /**
	         * @param {?} _htmlParser
	         * @param {?=} _translations
	         * @param {?=} _translationsFormat
	         */
	        function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
	            this._htmlParser = _htmlParser;
	            this._translations = _translations;
	            this._translationsFormat = _translationsFormat;
	        }
	        /**
	         * @param {?} source
	         * @param {?} url
	         * @param {?=} parseExpansionForms
	         * @param {?=} interpolationConfig
	         * @return {?}
	         */
	        I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	            if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	            if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	            var /** @type {?} */ parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	            if (!this._translations || this._translations === '') {
	                // Do not enable i18n when no translation bundle is provided
	                return parseResult;
	            }
	            // TODO(vicb): add support for implicit tags / attributes
	            if (parseResult.errors.length) {
	                return new ParseTreeResult(parseResult.rootNodes, parseResult.errors);
	            }
	            var /** @type {?} */ serializer = this._createSerializer();
	            var /** @type {?} */ translationBundle = TranslationBundle.load(this._translations, url, serializer);
	            return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
	        };
	        /**
	         * @return {?}
	         */
	        I18NHtmlParser.prototype._createSerializer = function () {
	            var /** @type {?} */ format = (this._translationsFormat || 'xlf').toLowerCase();
	            switch (format) {
	                case 'xmb':
	                    return new Xmb();
	                case 'xtb':
	                    return new Xtb();
	                case 'xliff':
	                case 'xlf':
	                default:
	                    return new Xliff();
	            }
	        };
	        return I18NHtmlParser;
	    }());

	    var /** @type {?} */ APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
	    var /** @type {?} */ VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
	    var /** @type {?} */ CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
	    var /** @type {?} */ ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
	    var Identifiers = (function () {
	        function Identifiers() {
	        }
	        Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	            name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	            moduleUrl: assetUrl('core', 'metadata/di'),
	            runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	        };
	        Identifiers.ViewUtils = {
	            name: 'ViewUtils',
	            moduleUrl: assetUrl('core', 'linker/view_utils'),
	            runtime: view_utils.ViewUtils
	        };
	        Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };
	        Identifiers.DebugAppView = {
	            name: 'DebugAppView',
	            moduleUrl: APP_VIEW_MODULE_URL,
	            runtime: DebugAppView
	        };
	        Identifiers.ViewContainer = {
	            name: 'ViewContainer',
	            moduleUrl: assetUrl('core', 'linker/view_container'),
	            runtime: ViewContainer
	        };
	        Identifiers.ElementRef = {
	            name: 'ElementRef',
	            moduleUrl: assetUrl('core', 'linker/element_ref'),
	            runtime: _angular_core.ElementRef
	        };
	        Identifiers.ViewContainerRef = {
	            name: 'ViewContainerRef',
	            moduleUrl: assetUrl('core', 'linker/view_container_ref'),
	            runtime: _angular_core.ViewContainerRef
	        };
	        Identifiers.ChangeDetectorRef = {
	            name: 'ChangeDetectorRef',
	            moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
	            runtime: _angular_core.ChangeDetectorRef
	        };
	        Identifiers.RenderComponentType = {
	            name: 'RenderComponentType',
	            moduleUrl: assetUrl('core', 'render/api'),
	            runtime: _angular_core.RenderComponentType
	        };
	        Identifiers.QueryList = {
	            name: 'QueryList',
	            moduleUrl: assetUrl('core', 'linker/query_list'),
	            runtime: _angular_core.QueryList
	        };
	        Identifiers.TemplateRef = {
	            name: 'TemplateRef',
	            moduleUrl: assetUrl('core', 'linker/template_ref'),
	            runtime: _angular_core.TemplateRef
	        };
	        Identifiers.TemplateRef_ = {
	            name: 'TemplateRef_',
	            moduleUrl: assetUrl('core', 'linker/template_ref'),
	            runtime: TemplateRef_
	        };
	        Identifiers.CodegenComponentFactoryResolver = {
	            name: 'CodegenComponentFactoryResolver',
	            moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	            runtime: CodegenComponentFactoryResolver
	        };
	        Identifiers.ComponentFactoryResolver = {
	            name: 'ComponentFactoryResolver',
	            moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	            runtime: _angular_core.ComponentFactoryResolver
	        };
	        Identifiers.ComponentFactory = {
	            name: 'ComponentFactory',
	            runtime: _angular_core.ComponentFactory,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.ComponentRef_ = {
	            name: 'ComponentRef_',
	            runtime: ComponentRef_,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.ComponentRef = {
	            name: 'ComponentRef',
	            runtime: _angular_core.ComponentRef,
	            moduleUrl: assetUrl('core', 'linker/component_factory')
	        };
	        Identifiers.NgModuleFactory = {
	            name: 'NgModuleFactory',
	            runtime: _angular_core.NgModuleFactory,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	        };
	        Identifiers.NgModuleInjector = {
	            name: 'NgModuleInjector',
	            runtime: NgModuleInjector,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	        };
	        Identifiers.RegisterModuleFactoryFn = {
	            name: 'registerModuleFactory',
	            runtime: registerModuleFactory,
	            moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
	        };
	        Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };
	        Identifiers.Injector = {
	            name: 'Injector',
	            moduleUrl: assetUrl('core', 'di/injector'),
	            runtime: _angular_core.Injector
	        };
	        Identifiers.ViewEncapsulation = {
	            name: 'ViewEncapsulation',
	            moduleUrl: assetUrl('core', 'metadata/view'),
	            runtime: _angular_core.ViewEncapsulation
	        };
	        Identifiers.ViewType = {
	            name: 'ViewType',
	            moduleUrl: assetUrl('core', 'linker/view_type'),
	            runtime: ViewType
	        };
	        Identifiers.ChangeDetectionStrategy = {
	            name: 'ChangeDetectionStrategy',
	            moduleUrl: CD_MODULE_URL,
	            runtime: _angular_core.ChangeDetectionStrategy
	        };
	        Identifiers.StaticNodeDebugInfo = {
	            name: 'StaticNodeDebugInfo',
	            moduleUrl: assetUrl('core', 'linker/debug_context'),
	            runtime: StaticNodeDebugInfo
	        };
	        Identifiers.DebugContext = {
	            name: 'DebugContext',
	            moduleUrl: assetUrl('core', 'linker/debug_context'),
	            runtime: DebugContext
	        };
	        Identifiers.Renderer = {
	            name: 'Renderer',
	            moduleUrl: assetUrl('core', 'render/api'),
	            runtime: _angular_core.Renderer
	        };
	        Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };
	        Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };
	        Identifiers.ChangeDetectorStatus = {
	            name: 'ChangeDetectorStatus',
	            moduleUrl: CD_MODULE_URL,
	            runtime: ChangeDetectorStatus
	        };
	        Identifiers.checkBinding = {
	            name: 'checkBinding',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.checkBinding
	        };
	        Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };
	        Identifiers.inlineInterpolate = {
	            name: 'inlineInterpolate',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.inlineInterpolate
	        };
	        Identifiers.interpolate = {
	            name: 'interpolate',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.interpolate
	        };
	        Identifiers.castByValue = {
	            name: 'castByValue',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.castByValue
	        };
	        Identifiers.EMPTY_ARRAY = {
	            name: 'EMPTY_ARRAY',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_ARRAY
	        };
	        Identifiers.EMPTY_MAP = {
	            name: 'EMPTY_MAP',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_MAP
	        };
	        Identifiers.createRenderElement = {
	            name: 'createRenderElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.createRenderElement
	        };
	        Identifiers.selectOrCreateRenderHostElement = {
	            name: 'selectOrCreateRenderHostElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.selectOrCreateRenderHostElement
	        };
	        Identifiers.pureProxies = [
	            null,
	            { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy1 },
	            { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy2 },
	            { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy3 },
	            { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy4 },
	            { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy5 },
	            { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy6 },
	            { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy7 },
	            { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy8 },
	            { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy9 },
	            { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy10 },
	        ];
	        Identifiers.SecurityContext = {
	            name: 'SecurityContext',
	            moduleUrl: assetUrl('core', 'security'),
	            runtime: _angular_core.SecurityContext,
	        };
	        Identifiers.AnimationKeyframe = {
	            name: 'AnimationKeyframe',
	            moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
	            runtime: AnimationKeyframe
	        };
	        Identifiers.AnimationStyles = {
	            name: 'AnimationStyles',
	            moduleUrl: assetUrl('core', 'animation/animation_styles'),
	            runtime: AnimationStyles
	        };
	        Identifiers.NoOpAnimationPlayer = {
	            name: 'NoOpAnimationPlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_player'),
	            runtime: NoOpAnimationPlayer
	        };
	        Identifiers.AnimationGroupPlayer = {
	            name: 'AnimationGroupPlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_group_player'),
	            runtime: AnimationGroupPlayer
	        };
	        Identifiers.AnimationSequencePlayer = {
	            name: 'AnimationSequencePlayer',
	            moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
	            runtime: AnimationSequencePlayer
	        };
	        Identifiers.prepareFinalAnimationStyles = {
	            name: 'prepareFinalAnimationStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: prepareFinalAnimationStyles
	        };
	        Identifiers.balanceAnimationKeyframes = {
	            name: 'balanceAnimationKeyframes',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: balanceAnimationKeyframes
	        };
	        Identifiers.clearStyles = {
	            name: 'clearStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: clearStyles
	        };
	        Identifiers.renderStyles = {
	            name: 'renderStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: renderStyles
	        };
	        Identifiers.collectAndResolveStyles = {
	            name: 'collectAndResolveStyles',
	            moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	            runtime: collectAndResolveStyles
	        };
	        Identifiers.LOCALE_ID = {
	            name: 'LOCALE_ID',
	            moduleUrl: assetUrl('core', 'i18n/tokens'),
	            runtime: _angular_core.LOCALE_ID
	        };
	        Identifiers.TRANSLATIONS_FORMAT = {
	            name: 'TRANSLATIONS_FORMAT',
	            moduleUrl: assetUrl('core', 'i18n/tokens'),
	            runtime: _angular_core.TRANSLATIONS_FORMAT
	        };
	        Identifiers.setBindingDebugInfo = {
	            name: 'setBindingDebugInfo',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.setBindingDebugInfo
	        };
	        Identifiers.setBindingDebugInfoForChanges = {
	            name: 'setBindingDebugInfoForChanges',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.setBindingDebugInfoForChanges
	        };
	        Identifiers.AnimationTransition = {
	            name: 'AnimationTransition',
	            moduleUrl: assetUrl('core', 'animation/animation_transition'),
	            runtime: AnimationTransition
	        };
	        // This is just the interface!
	        Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };
	        Identifiers.inlineArrays = [
	            { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	            { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	            { name: 'InlineArray4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray4 },
	            { name: 'InlineArray8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray8 },
	            { name: 'InlineArray16', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray16 },
	        ];
	        Identifiers.EMPTY_INLINE_ARRAY = {
	            name: 'EMPTY_INLINE_ARRAY',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.EMPTY_INLINE_ARRAY
	        };
	        Identifiers.InlineArrayDynamic = {
	            name: 'InlineArrayDynamic',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.InlineArrayDynamic
	        };
	        Identifiers.subscribeToRenderElement = {
	            name: 'subscribeToRenderElement',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.subscribeToRenderElement
	        };
	        Identifiers.createRenderComponentType = {
	            name: 'createRenderComponentType',
	            moduleUrl: VIEW_UTILS_MODULE_URL,
	            runtime: view_utils.createRenderComponentType
	        };
	        Identifiers.noop = { name: 'noop', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.noop };
	        return Identifiers;
	    }());
	    /**
	     * @param {?} pkg
	     * @param {?=} path
	     * @param {?=} type
	     * @return {?}
	     */
	    function assetUrl(pkg, path, type) {
	        if (path === void 0) { path = null; }
	        if (type === void 0) { type = 'src'; }
	        if (path == null) {
	            return "@angular/" + pkg + "/index";
	        }
	        else {
	            return "@angular/" + pkg + "/" + type + "/" + path;
	        }
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function resolveIdentifier(identifier) {
	        return reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function createIdentifier(identifier) {
	        var /** @type {?} */ reference = reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime);
	        return { reference: reference };
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function identifierToken(identifier) {
	        return { identifier: identifier };
	    }
	    /**
	     * @param {?} identifier
	     * @return {?}
	     */
	    function createIdentifierToken(identifier) {
	        return identifierToken(createIdentifier(identifier));
	    }
	    /**
	     * @param {?} enumType
	     * @param {?} name
	     * @return {?}
	     */
	    function createEnumIdentifier(enumType, name) {
	        var /** @type {?} */ resolvedEnum = reflector.resolveEnum(resolveIdentifier(enumType), name);
	        return { reference: resolvedEnum };
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    // http://cldr.unicode.org/index/cldr-spec/plural-rules
	    var /** @type {?} */ PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	    /**
	     * Expands special forms into elements.
	     *
	     * For example,
	     *
	     * ```
	     * { messages.length, plural,
	     *   =0 {zero}
	     *   =1 {one}
	     *   other {more than one}
	     * }
	     * ```
	     *
	     * will be expanded into
	     *
	     * ```
	     * <ng-container [ngPlural]="messages.length">
	     *   <template ngPluralCase="=0">zero</template>
	     *   <template ngPluralCase="=1">one</template>
	     *   <template ngPluralCase="other">more than one</template>
	     * </ng-container>
	     * ```
	     * @param {?} nodes
	     * @return {?}
	     */
	    function expandNodes(nodes) {
	        var /** @type {?} */ expander = new _Expander();
	        return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	    }
	    var ExpansionResult = (function () {
	        /**
	         * @param {?} nodes
	         * @param {?} expanded
	         * @param {?} errors
	         */
	        function ExpansionResult(nodes, expanded, errors) {
	            this.nodes = nodes;
	            this.expanded = expanded;
	            this.errors = errors;
	        }
	        return ExpansionResult;
	    }());
	    var ExpansionError = (function (_super) {
	        __extends$15(ExpansionError, _super);
	        /**
	         * @param {?} span
	         * @param {?} errorMsg
	         */
	        function ExpansionError(span, errorMsg) {
	            _super.call(this, span, errorMsg);
	        }
	        return ExpansionError;
	    }(ParseError));
	    /**
	     * Expand expansion forms (plural, select) to directives
	     *
	     * \@internal
	     */
	    var _Expander = (function () {
	        function _Expander() {
	            this.isExpanded = false;
	            this.errors = [];
	        }
	        /**
	         * @param {?} element
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitElement = function (element, context) {
	            return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	        /**
	         * @param {?} text
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitText = function (text, context) { return text; };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitComment = function (comment, context) { return comment; };
	        /**
	         * @param {?} icu
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitExpansion = function (icu, context) {
	            this.isExpanded = true;
	            return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	                _expandDefaultForm(icu, this.errors);
	        };
	        /**
	         * @param {?} icuCase
	         * @param {?} context
	         * @return {?}
	         */
	        _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	            throw new Error('Should not be reached');
	        };
	        return _Expander;
	    }());
	    /**
	     * @param {?} ast
	     * @param {?} errors
	     * @return {?}
	     */
	    function _expandPluralForm(ast, errors) {
	        var /** @type {?} */ children = ast.cases.map(function (c) {
	            if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	                errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	            }
	            var /** @type {?} */ expansionResult = expandNodes(c.expression);
	            errors.push.apply(errors, expansionResult.errors);
	            return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        });
	        var /** @type {?} */ switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	    }
	    /**
	     * @param {?} ast
	     * @param {?} errors
	     * @return {?}
	     */
	    function _expandDefaultForm(ast, errors) {
	        var /** @type {?} */ children = ast.cases.map(function (c) {
	            var /** @type {?} */ expansionResult = expandNodes(c.expression);
	            errors.push.apply(errors, expansionResult.errors);
	            if (c.value === 'other') {
	                // other is the default case when no values match
	                return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	            }
	            return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	        });
	        var /** @type {?} */ switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	        return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$16 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ProviderError = (function (_super) {
	        __extends$16(ProviderError, _super);
	        /**
	         * @param {?} message
	         * @param {?} span
	         */
	        function ProviderError(message, span) {
	            _super.call(this, span, message);
	        }
	        return ProviderError;
	    }(ParseError));
	    var ProviderViewContext = (function () {
	        /**
	         * @param {?} component
	         * @param {?} sourceSpan
	         */
	        function ProviderViewContext(component, sourceSpan) {
	            var _this = this;
	            this.component = component;
	            this.sourceSpan = sourceSpan;
	            this.errors = [];
	            this.viewQueries = _getViewQueries(component);
	            this.viewProviders = new Map();
	            component.viewProviders.forEach(function (provider) {
	                if (isBlank(_this.viewProviders.get(tokenReference(provider.token)))) {
	                    _this.viewProviders.set(tokenReference(provider.token), true);
	                }
	            });
	        }
	        return ProviderViewContext;
	    }());
	    var ProviderElementContext = (function () {
	        /**
	         * @param {?} viewContext
	         * @param {?} _parent
	         * @param {?} _isViewRoot
	         * @param {?} _directiveAsts
	         * @param {?} attrs
	         * @param {?} refs
	         * @param {?} _sourceSpan
	         */
	        function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	            var _this = this;
	            this.viewContext = viewContext;
	            this._parent = _parent;
	            this._isViewRoot = _isViewRoot;
	            this._directiveAsts = _directiveAsts;
	            this._sourceSpan = _sourceSpan;
	            this._transformedProviders = new Map();
	            this._seenProviders = new Map();
	            this._hasViewContainer = false;
	            this._attrs = {};
	            attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	            var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	            this._allProviders =
	                _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	            this._contentQueries = _getContentQueries(directivesMeta);
	            var queriedTokens = new Map();
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._addQueryReadsTo(provider.token, queriedTokens);
	            });
	            refs.forEach(function (refAst) { _this._addQueryReadsTo({ value: refAst.name }, queriedTokens); });
	            if (isPresent(queriedTokens.get(resolveIdentifier(Identifiers.ViewContainerRef)))) {
	                this._hasViewContainer = true;
	            }
	            // create the providers that we know are eager first
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                var eager = provider.eager || isPresent(queriedTokens.get(tokenReference(provider.token)));
	                if (eager) {
	                    _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	                }
	            });
	        }
	        /**
	         * @return {?}
	         */
	        ProviderElementContext.prototype.afterElement = function () {
	            var _this = this;
	            // collect lazy providers
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	            });
	        };
	        Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return Array.from(this._transformedProviders.values());
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	                var /** @type {?} */ sortedDirectives = this._directiveAsts.slice();
	                sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                    sortedProviderTypes.indexOf(dir2.directive.type); });
	                return sortedDirectives;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasViewContainer; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} token
	         * @param {?} queryReadTokens
	         * @return {?}
	         */
	        ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	            this._getQueriesFor(token).forEach(function (query) {
	                var /** @type {?} */ queryReadToken = query.read || token;
	                if (isBlank(queryReadTokens.get(tokenReference(queryReadToken)))) {
	                    queryReadTokens.set(tokenReference(queryReadToken), true);
	                }
	            });
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getQueriesFor = function (token) {
	            var /** @type {?} */ result = [];
	            var /** @type {?} */ currentEl = this;
	            var /** @type {?} */ distance = 0;
	            var /** @type {?} */ queries;
	            while (currentEl !== null) {
	                queries = currentEl._contentQueries.get(tokenReference(token));
	                if (queries) {
	                    result.push.apply(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	                }
	                if (currentEl._directiveAsts.length > 0) {
	                    distance++;
	                }
	                currentEl = currentEl._parent;
	            }
	            queries = this.viewContext.viewQueries.get(tokenReference(token));
	            if (queries) {
	                result.push.apply(result, queries);
	            }
	            return result;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} token
	         * @param {?} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	            var _this = this;
	            var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	            if (!resolvedProvider || ((requestingProviderType === ProviderAstType.Directive ||
	                requestingProviderType === ProviderAstType.PublicService) &&
	                resolvedProvider.providerType === ProviderAstType.PrivateService) ||
	                ((requestingProviderType === ProviderAstType.PrivateService ||
	                    requestingProviderType === ProviderAstType.PublicService) &&
	                    resolvedProvider.providerType === ProviderAstType.Builtin)) {
	                return null;
	            }
	            var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	            if (transformedProviderAst) {
	                return transformedProviderAst;
	            }
	            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	                this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), this._sourceSpan));
	                return null;
	            }
	            this._seenProviders.set(tokenReference(token), true);
	            var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	                var /** @type {?} */ transformedUseValue = provider.useValue;
	                var /** @type {?} */ transformedUseExisting = provider.useExisting;
	                var /** @type {?} */ transformedDeps;
	                if (isPresent(provider.useExisting)) {
	                    var /** @type {?} */ existingDiDep = _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting }, eager);
	                    if (isPresent(existingDiDep.token)) {
	                        transformedUseExisting = existingDiDep.token;
	                    }
	                    else {
	                        transformedUseExisting = null;
	                        transformedUseValue = existingDiDep.value;
	                    }
	                }
	                else if (provider.useFactory) {
	                    var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	                }
	                else if (provider.useClass) {
	                    var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	                }
	                return _transformProvider(provider, {
	                    useExisting: transformedUseExisting,
	                    useValue: transformedUseValue,
	                    deps: transformedDeps
	                });
	            });
	            transformedProviderAst =
	                _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	            return transformedProviderAst;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @param {?=} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	            if (eager === void 0) { eager = null; }
	            if (dep.isAttribute) {
	                var /** @type {?} */ attrValue = this._attrs[dep.token.value];
	                return { isValue: true, value: attrValue == null ? null : attrValue };
	            }
	            if (isPresent(dep.token)) {
	                // access builtints
	                if ((requestingProviderType === ProviderAstType.Directive ||
	                    requestingProviderType === ProviderAstType.Component)) {
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Renderer) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ElementRef) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.TemplateRef)) {
	                        return dep;
	                    }
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ViewContainerRef)) {
	                        this._hasViewContainer = true;
	                    }
	                }
	                // access the injector
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector)) {
	                    return dep;
	                }
	                // access providers
	                if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                    return dep;
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @param {?=} eager
	         * @return {?}
	         */
	        ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	            if (eager === void 0) { eager = null; }
	            var /** @type {?} */ currElement = this;
	            var /** @type {?} */ currEager = eager;
	            var /** @type {?} */ result = null;
	            if (!dep.isSkipSelf) {
	                result = this._getLocalDependency(requestingProviderType, dep, eager);
	            }
	            if (dep.isSelf) {
	                if (!result && dep.isOptional) {
	                    result = { isValue: true, value: null };
	                }
	            }
	            else {
	                // check parent elements
	                while (!result && currElement._parent) {
	                    var /** @type {?} */ prevElement = currElement;
	                    currElement = currElement._parent;
	                    if (prevElement._isViewRoot) {
	                        currEager = false;
	                    }
	                    result = currElement._getLocalDependency(ProviderAstType.PublicService, dep, currEager);
	                }
	                // check @Host restriction
	                if (!result) {
	                    if (!dep.isHost || this.viewContext.component.isHost ||
	                        this.viewContext.component.type.reference === tokenReference(dep.token) ||
	                        isPresent(this.viewContext.viewProviders.get(tokenReference(dep.token)))) {
	                        result = dep;
	                    }
	                    else {
	                        result = dep.isOptional ? result = { isValue: true, value: null } : null;
	                    }
	                }
	            }
	            if (!result) {
	                this.viewContext.errors.push(new ProviderError("No provider for " + tokenName(dep.token), this._sourceSpan));
	            }
	            return result;
	        };
	        return ProviderElementContext;
	    }());
	    var NgModuleProviderAnalyzer = (function () {
	        /**
	         * @param {?} ngModule
	         * @param {?} extraProviders
	         * @param {?} sourceSpan
	         */
	        function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	            var _this = this;
	            this._transformedProviders = new Map();
	            this._seenProviders = new Map();
	            this._errors = [];
	            this._allProviders = new Map();
	            ngModule.transitiveModule.modules.forEach(function (ngModuleType) {
	                var ngModuleProvider = { token: { identifier: ngModuleType }, useClass: ngModuleType };
	                _resolveProviders([ngModuleProvider], ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	            });
	            _resolveProviders(ngModule.transitiveModule.providers.map(function (entry) { return entry.provider; }).concat(extraProviders), ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	        }
	        /**
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype.parse = function () {
	            var _this = this;
	            Array.from(this._allProviders.values()).forEach(function (provider) {
	                _this._getOrCreateLocalProvider(provider.token, provider.eager);
	            });
	            if (this._errors.length > 0) {
	                var /** @type {?} */ errorString = this._errors.join('\n');
	                throw new Error("Provider parse errors:\n" + errorString);
	            }
	            return Array.from(this._transformedProviders.values());
	        };
	        /**
	         * @param {?} token
	         * @param {?} eager
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	            var _this = this;
	            var /** @type {?} */ resolvedProvider = this._allProviders.get(tokenReference(token));
	            if (!resolvedProvider) {
	                return null;
	            }
	            var /** @type {?} */ transformedProviderAst = this._transformedProviders.get(tokenReference(token));
	            if (transformedProviderAst) {
	                return transformedProviderAst;
	            }
	            if (isPresent(this._seenProviders.get(tokenReference(token)))) {
	                this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + tokenName(token), resolvedProvider.sourceSpan));
	                return null;
	            }
	            this._seenProviders.set(tokenReference(token), true);
	            var /** @type {?} */ transformedProviders = resolvedProvider.providers.map(function (provider) {
	                var /** @type {?} */ transformedUseValue = provider.useValue;
	                var /** @type {?} */ transformedUseExisting = provider.useExisting;
	                var /** @type {?} */ transformedDeps;
	                if (isPresent(provider.useExisting)) {
	                    var /** @type {?} */ existingDiDep = _this._getDependency({ token: provider.useExisting }, eager, resolvedProvider.sourceSpan);
	                    if (isPresent(existingDiDep.token)) {
	                        transformedUseExisting = existingDiDep.token;
	                    }
	                    else {
	                        transformedUseExisting = null;
	                        transformedUseValue = existingDiDep.value;
	                    }
	                }
	                else if (provider.useFactory) {
	                    var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	                }
	                else if (provider.useClass) {
	                    var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                    transformedDeps =
	                        deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	                }
	                return _transformProvider(provider, {
	                    useExisting: transformedUseExisting,
	                    useValue: transformedUseValue,
	                    deps: transformedDeps
	                });
	            });
	            transformedProviderAst =
	                _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	            this._transformedProviders.set(tokenReference(token), transformedProviderAst);
	            return transformedProviderAst;
	        };
	        /**
	         * @param {?} dep
	         * @param {?=} eager
	         * @param {?} requestorSourceSpan
	         * @return {?}
	         */
	        NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	            if (eager === void 0) { eager = null; }
	            var /** @type {?} */ foundLocal = false;
	            if (!dep.isSkipSelf && isPresent(dep.token)) {
	                // access the injector
	                if (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                    tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver)) {
	                    foundLocal = true;
	                }
	                else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
	                    foundLocal = true;
	                }
	            }
	            var /** @type {?} */ result = dep;
	            if (dep.isSelf && !foundLocal) {
	                if (dep.isOptional) {
	                    result = { isValue: true, value: null };
	                }
	                else {
	                    this._errors.push(new ProviderError("No provider for " + tokenName(dep.token), requestorSourceSpan));
	                }
	            }
	            return result;
	        };
	        return NgModuleProviderAnalyzer;
	    }());
	    /**
	     * @param {?} provider
	     * @param {?} __1
	     * @return {?}
	     */
	    function _transformProvider(provider, _a) {
	        var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	        return {
	            token: provider.token,
	            useClass: provider.useClass,
	            useExisting: useExisting,
	            useFactory: provider.useFactory,
	            useValue: useValue,
	            deps: deps,
	            multi: provider.multi
	        };
	    }
	    /**
	     * @param {?} provider
	     * @param {?} __1
	     * @return {?}
	     */
	    function _transformProviderAst(provider, _a) {
	        var eager = _a.eager, providers = _a.providers;
	        return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	    }
	    /**
	     * @param {?} directives
	     * @param {?} sourceSpan
	     * @param {?} targetErrors
	     * @return {?}
	     */
	    function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	        var /** @type {?} */ providersByToken = new Map();
	        directives.forEach(function (directive) {
	            var /** @type {?} */ dirProvider = { token: { identifier: directive.type }, useClass: directive.type };
	            _resolveProviders([dirProvider], directive.isComponent ? ProviderAstType.Component : ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	        });
	        // Note: directives need to be able to overwrite providers of a component!
	        var /** @type {?} */ directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	        directivesWithComponentFirst.forEach(function (directive) {
	            _resolveProviders(directive.providers, ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	            _resolveProviders(directive.viewProviders, ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	        });
	        return providersByToken;
	    }
	    /**
	     * @param {?} providers
	     * @param {?} providerType
	     * @param {?} eager
	     * @param {?} sourceSpan
	     * @param {?} targetErrors
	     * @param {?} targetProvidersByToken
	     * @return {?}
	     */
	    function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	        providers.forEach(function (provider) {
	            var /** @type {?} */ resolvedProvider = targetProvidersByToken.get(tokenReference(provider.token));
	            if (isPresent(resolvedProvider) && !!resolvedProvider.multiProvider !== !!provider.multi) {
	                targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + tokenName(resolvedProvider.token), sourceSpan));
	            }
	            if (!resolvedProvider) {
	                var /** @type {?} */ lifecycleHooks = provider.token.identifier &&
	                    ((provider.token.identifier)).lifecycleHooks ?
	                    ((provider.token.identifier)).lifecycleHooks :
	                    [];
	                resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
	                targetProvidersByToken.set(tokenReference(provider.token), resolvedProvider);
	            }
	            else {
	                if (!provider.multi) {
	                    resolvedProvider.providers.length = 0;
	                }
	                resolvedProvider.providers.push(provider);
	            }
	        });
	    }
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    function _getViewQueries(component) {
	        var /** @type {?} */ viewQueries = new Map();
	        if (component.viewQueries) {
	            component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	        }
	        return viewQueries;
	    }
	    /**
	     * @param {?} directives
	     * @return {?}
	     */
	    function _getContentQueries(directives) {
	        var /** @type {?} */ contentQueries = new Map();
	        directives.forEach(function (directive) {
	            if (directive.queries) {
	                directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	            }
	        });
	        return contentQueries;
	    }
	    /**
	     * @param {?} map
	     * @param {?} query
	     * @return {?}
	     */
	    function _addQueryToTokenMap(map, query) {
	        query.selectors.forEach(function (token) {
	            var /** @type {?} */ entry = map.get(tokenReference(token));
	            if (!entry) {
	                entry = [];
	                map.set(tokenReference(token), entry);
	            }
	            entry.push(query);
	        });
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @abstract
	     */
	    var ElementSchemaRegistry = (function () {
	        function ElementSchemaRegistry() {
	        }
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) { };
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) { };
	        /**
	         * @abstract
	         * @param {?} elementName
	         * @param {?} propName
	         * @param {?} isAttribute
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.securityContext = function (elementName, propName, isAttribute) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.allKnownElementNames = function () { };
	        /**
	         * @abstract
	         * @param {?} propName
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.getMappedPropName = function (propName) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.validateProperty = function (name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.validateAttribute = function (name) { };
	        /**
	         * @abstract
	         * @param {?} propName
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) { };
	        /**
	         * @abstract
	         * @param {?} camelCaseProp
	         * @param {?} userProvidedProp
	         * @param {?} val
	         * @return {?}
	         */
	        ElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) { };
	        return ElementSchemaRegistry;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var StyleWithImports = (function () {
	        /**
	         * @param {?} style
	         * @param {?} styleUrls
	         */
	        function StyleWithImports(style, styleUrls) {
	            this.style = style;
	            this.styleUrls = styleUrls;
	        }
	        return StyleWithImports;
	    }());
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function isStyleUrlResolvable(url) {
	        if (url == null || url.length === 0 || url[0] == '/')
	            return false;
	        var /** @type {?} */ schemeMatch = url.match(URL_WITH_SCHEMA_REGEXP);
	        return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	    }
	    /**
	     * Rewrites stylesheets by resolving and removing the \@import urls that
	     * are either relative or don't have a `package:` scheme
	     * @param {?} resolver
	     * @param {?} baseUrl
	     * @param {?} cssText
	     * @return {?}
	     */
	    function extractStyleUrls(resolver, baseUrl, cssText) {
	        var /** @type {?} */ foundUrls = [];
	        var /** @type {?} */ modifiedCssText = cssText.replace(CSS_COMMENT_REGEXP, '').replace(CSS_IMPORT_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ url = m[1] || m[2];
	            if (!isStyleUrlResolvable(url)) {
	                // Do not attempt to resolve non-package absolute URLs with URI scheme
	                return m[0];
	            }
	            foundUrls.push(resolver.resolve(baseUrl, url));
	            return '';
	        });
	        return new StyleWithImports(modifiedCssText, foundUrls);
	    }
	    var /** @type {?} */ CSS_IMPORT_REGEXP = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	    var /** @type {?} */ CSS_COMMENT_REGEXP = /\/\*.+?\*\//g;
	    var /** @type {?} */ URL_WITH_SCHEMA_REGEXP = /^([^:/?#]+):/;

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$17 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ PROPERTY_PARTS_SEPARATOR = '.';
	    var /** @type {?} */ ATTRIBUTE_PREFIX = 'attr';
	    var /** @type {?} */ CLASS_PREFIX = 'class';
	    var /** @type {?} */ STYLE_PREFIX = 'style';
	    var /** @type {?} */ ANIMATE_PROP_PREFIX = 'animate-';
	    var BoundPropertyType = {};
	    BoundPropertyType.DEFAULT = 0;
	    BoundPropertyType.LITERAL_ATTR = 1;
	    BoundPropertyType.ANIMATION = 2;
	    BoundPropertyType[BoundPropertyType.DEFAULT] = "DEFAULT";
	    BoundPropertyType[BoundPropertyType.LITERAL_ATTR] = "LITERAL_ATTR";
	    BoundPropertyType[BoundPropertyType.ANIMATION] = "ANIMATION";
	    /**
	     * Represents a parsed property.
	     */
	    var BoundProperty = (function () {
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} type
	         * @param {?} sourceSpan
	         */
	        function BoundProperty(name, expression, type, sourceSpan) {
	            this.name = name;
	            this.expression = expression;
	            this.type = type;
	            this.sourceSpan = sourceSpan;
	        }
	        Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.type === BoundPropertyType.ANIMATION; },
	            enumerable: true,
	            configurable: true
	        });
	        return BoundProperty;
	    }());
	    /**
	     * Parses bindings in templates and in the directive host area.
	     */
	    var BindingParser = (function () {
	        /**
	         * @param {?} _exprParser
	         * @param {?} _interpolationConfig
	         * @param {?} _schemaRegistry
	         * @param {?} pipes
	         * @param {?} _targetErrors
	         */
	        function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	            var _this = this;
	            this._exprParser = _exprParser;
	            this._interpolationConfig = _interpolationConfig;
	            this._schemaRegistry = _schemaRegistry;
	            this._targetErrors = _targetErrors;
	            this.pipesByName = new Map();
	            pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	        }
	        /**
	         * @param {?} dirMeta
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) {
	            var _this = this;
	            if (dirMeta.hostProperties) {
	                var /** @type {?} */ boundProps_1 = [];
	                Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                    var /** @type {?} */ expression = dirMeta.hostProperties[propName];
	                    if (typeof expression === 'string') {
	                        _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                    }
	                    else {
	                        _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                    }
	                });
	                return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(dirMeta.selector, prop); });
	            }
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	            var _this = this;
	            if (dirMeta.hostListeners) {
	                var /** @type {?} */ targetEventAsts_1 = [];
	                Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                    var /** @type {?} */ expression = dirMeta.hostListeners[propName];
	                    if (typeof expression === 'string') {
	                        _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                    }
	                    else {
	                        _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                    }
	                });
	                return targetEventAsts_1;
	            }
	        };
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	                if (ast)
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @param {?} targetVars
	         * @return {?}
	         */
	        BindingParser.prototype.parseInlineTemplateBinding = function (prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	            var /** @type {?} */ bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	            for (var /** @type {?} */ i = 0; i < bindings.length; i++) {
	                var /** @type {?} */ binding = bindings[i];
	                if (binding.keyIsVar) {
	                    targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	                }
	                else if (binding.expression) {
	                    this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	                }
	                else {
	                    targetMatchableAttrs.push([binding.key, '']);
	                    this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	                }
	            }
	        };
	        /**
	         * @param {?} prefixToken
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	            var _this = this;
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	                this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	                bindingsResult.templateBindings.forEach(function (binding) {
	                    if (binding.expression) {
	                        _this._checkPipes(binding.expression, sourceSpan);
	                    }
	                });
	                bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, ParseErrorLevel.WARNING); });
	                return bindingsResult.templateBindings;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return [];
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	            if (_isAnimationLabel(name)) {
	                name = name.substring(1);
	                if (value) {
	                    this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                        " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, ParseErrorLevel.FATAL);
	                }
	                this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} isHost
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	            var /** @type {?} */ isAnimationProp = false;
	            if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	                isAnimationProp = true;
	                name = name.substring(ANIMATE_PROP_PREFIX.length);
	            }
	            else if (_isAnimationLabel(name)) {
	                isAnimationProp = true;
	                name = name.substring(1);
	            }
	            if (isAnimationProp) {
	                this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	            }
	            else {
	                this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	            var /** @type {?} */ expr = this.parseInterpolation(value, sourceSpan);
	            if (expr) {
	                this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} name
	         * @param {?} ast
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	            targetMatchableAttrs.push([name, ast.source]);
	            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @return {?}
	         */
	        BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	            // This will occur when a @trigger is not paired with an expression.
	            // For animations it is valid to not have an expression since */void
	            // states will be applied by angular when the element is attached/detached
	            var /** @type {?} */ ast = this._parseBinding(expression || 'null', false, sourceSpan);
	            targetMatchableAttrs.push([name, ast.source]);
	            targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	        };
	        /**
	         * @param {?} value
	         * @param {?} isHostBinding
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = isHostBinding ?
	                    this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                    this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	                if (ast)
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} elementSelector
	         * @param {?} boundProp
	         * @return {?}
	         */
	        BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	            if (boundProp.isAnimation) {
	                return new BoundElementPropertyAst(boundProp.name, PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
	            }
	            var /** @type {?} */ unit = null;
	            var /** @type {?} */ bindingType;
	            var /** @type {?} */ boundPropertyName = null;
	            var /** @type {?} */ parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	            var /** @type {?} */ securityContexts;
	            // Check check for special cases (prefix style, attr, class)
	            if (parts.length > 1) {
	                if (parts[0] == ATTRIBUTE_PREFIX) {
	                    boundPropertyName = parts[1];
	                    this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                    securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                    var /** @type {?} */ nsSeparatorIdx = boundPropertyName.indexOf(':');
	                    if (nsSeparatorIdx > -1) {
	                        var /** @type {?} */ ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                        var /** @type {?} */ name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                        boundPropertyName = mergeNsAndName(ns, name_1);
	                    }
	                    bindingType = PropertyBindingType.Attribute;
	                }
	                else if (parts[0] == CLASS_PREFIX) {
	                    boundPropertyName = parts[1];
	                    bindingType = PropertyBindingType.Class;
	                    securityContexts = [_angular_core.SecurityContext.NONE];
	                }
	                else if (parts[0] == STYLE_PREFIX) {
	                    unit = parts.length > 2 ? parts[2] : null;
	                    boundPropertyName = parts[1];
	                    bindingType = PropertyBindingType.Style;
	                    securityContexts = [_angular_core.SecurityContext.STYLE];
	                }
	            }
	            // If not a special case, use the full property name
	            if (boundPropertyName === null) {
	                boundPropertyName = this._schemaRegistry.getMappedPropName(boundProp.name);
	                securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	                bindingType = PropertyBindingType.Property;
	                this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	            }
	            return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            if (_isAnimationLabel(name)) {
	                name = name.substr(1);
	                this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	            }
	            else {
	                this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	            var /** @type {?} */ matches = splitAtPeriod(name, [name, '']);
	            var /** @type {?} */ eventName = matches[0];
	            var /** @type {?} */ phase = matches[1].toLowerCase();
	            if (phase) {
	                switch (phase) {
	                    case 'start':
	                    case 'done':
	                        var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	                        targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                        break;
	                    default:
	                        this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                        break;
	                }
	            }
	            else {
	                this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	            }
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            // long format: 'target: eventName'
	            var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];
	            var /** @type {?} */ ast = this._parseAction(expression, sourceSpan);
	            targetMatchableAttrs.push([name, ast.source]);
	            targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	            // Don't detect directives for event names for now,
	            // so don't add the event name to the matchableAttrs
	        };
	        /**
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._parseAction = function (value, sourceSpan) {
	            var /** @type {?} */ sourceInfo = sourceSpan.start.toString();
	            try {
	                var /** @type {?} */ ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	                if (ast) {
	                    this._reportExpressionParserErrors(ast.errors, sourceSpan);
	                }
	                if (!ast || ast.ast instanceof EmptyExpr) {
	                    this._reportError("Empty expressions are not allowed", sourceSpan);
	                    return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	                }
	                this._checkPipes(ast, sourceSpan);
	                return ast;
	            }
	            catch (e) {
	                this._reportError("" + e, sourceSpan);
	                return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	            }
	        };
	        /**
	         * @param {?} message
	         * @param {?} sourceSpan
	         * @param {?=} level
	         * @return {?}
	         */
	        BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this._targetErrors.push(new ParseError(sourceSpan, message, level));
	        };
	        /**
	         * @param {?} errors
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	            for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	                var error = errors_1[_i];
	                this._reportError(error.message, sourceSpan);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	            var _this = this;
	            if (ast) {
	                var /** @type {?} */ collector = new PipeCollector();
	                ast.visit(collector);
	                collector.pipes.forEach(function (ast, pipeName) {
	                    if (!_this.pipesByName.has(pipeName)) {
	                        _this._reportError("The pipe '" + pipeName + "' could not be found", new ParseSourceSpan(sourceSpan.start.moveBy(ast.span.start), sourceSpan.start.moveBy(ast.span.end)));
	                    }
	                });
	            }
	        };
	        /**
	         * @param {?} propName the name of the property / attribute
	         * @param {?} sourceSpan
	         * @param {?} isAttr true when binding to an attribute
	         * @return {?}
	         */
	        BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	            var /** @type {?} */ report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	                this._schemaRegistry.validateProperty(propName);
	            if (report.error) {
	                this._reportError(report.msg, sourceSpan, ParseErrorLevel.FATAL);
	            }
	        };
	        return BindingParser;
	    }());
	    var PipeCollector = (function (_super) {
	        __extends$17(PipeCollector, _super);
	        function PipeCollector() {
	            _super.apply(this, arguments);
	            this.pipes = new Map();
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        PipeCollector.prototype.visitPipe = function (ast, context) {
	            this.pipes.set(ast.name, ast);
	            ast.exp.visit(this);
	            this.visitAll(ast.args, context);
	            return null;
	        };
	        return PipeCollector;
	    }(RecursiveAstVisitor));
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function _isAnimationLabel(name) {
	        return name[0] == '@';
	    }
	    /**
	     * @param {?} registry
	     * @param {?} selector
	     * @param {?} propName
	     * @param {?} isAttribute
	     * @return {?}
	     */
	    function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	        var /** @type {?} */ ctxs = [];
	        CssSelector.parse(selector).forEach(function (selector) {
	            var /** @type {?} */ elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	            var /** @type {?} */ notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	                .map(function (selector) { return selector.element; }));
	            var /** @type {?} */ possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	            ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	        });
	        return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	    }

	    var /** @type {?} */ NG_CONTENT_SELECT_ATTR = 'select';
	    var /** @type {?} */ NG_CONTENT_ELEMENT = 'ng-content';
	    var /** @type {?} */ LINK_ELEMENT = 'link';
	    var /** @type {?} */ LINK_STYLE_REL_ATTR = 'rel';
	    var /** @type {?} */ LINK_STYLE_HREF_ATTR = 'href';
	    var /** @type {?} */ LINK_STYLE_REL_VALUE = 'stylesheet';
	    var /** @type {?} */ STYLE_ELEMENT = 'style';
	    var /** @type {?} */ SCRIPT_ELEMENT = 'script';
	    var /** @type {?} */ NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	    var /** @type {?} */ NG_PROJECT_AS = 'ngProjectAs';
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    function preparseElement(ast) {
	        var /** @type {?} */ selectAttr = null;
	        var /** @type {?} */ hrefAttr = null;
	        var /** @type {?} */ relAttr = null;
	        var /** @type {?} */ nonBindable = false;
	        var /** @type {?} */ projectAs = null;
	        ast.attrs.forEach(function (attr) {
	            var /** @type {?} */ lcAttrName = attr.name.toLowerCase();
	            if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	                selectAttr = attr.value;
	            }
	            else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	                hrefAttr = attr.value;
	            }
	            else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	                relAttr = attr.value;
	            }
	            else if (attr.name == NG_NON_BINDABLE_ATTR) {
	                nonBindable = true;
	            }
	            else if (attr.name == NG_PROJECT_AS) {
	                if (attr.value.length > 0) {
	                    projectAs = attr.value;
	                }
	            }
	        });
	        selectAttr = normalizeNgContentSelect(selectAttr);
	        var /** @type {?} */ nodeName = ast.name.toLowerCase();
	        var /** @type {?} */ type = PreparsedElementType.OTHER;
	        if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	            type = PreparsedElementType.NG_CONTENT;
	        }
	        else if (nodeName == STYLE_ELEMENT) {
	            type = PreparsedElementType.STYLE;
	        }
	        else if (nodeName == SCRIPT_ELEMENT) {
	            type = PreparsedElementType.SCRIPT;
	        }
	        else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	            type = PreparsedElementType.STYLESHEET;
	        }
	        return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	    }
	    var PreparsedElementType = {};
	    PreparsedElementType.NG_CONTENT = 0;
	    PreparsedElementType.STYLE = 1;
	    PreparsedElementType.STYLESHEET = 2;
	    PreparsedElementType.SCRIPT = 3;
	    PreparsedElementType.OTHER = 4;
	    PreparsedElementType[PreparsedElementType.NG_CONTENT] = "NG_CONTENT";
	    PreparsedElementType[PreparsedElementType.STYLE] = "STYLE";
	    PreparsedElementType[PreparsedElementType.STYLESHEET] = "STYLESHEET";
	    PreparsedElementType[PreparsedElementType.SCRIPT] = "SCRIPT";
	    PreparsedElementType[PreparsedElementType.OTHER] = "OTHER";
	    var PreparsedElement = (function () {
	        /**
	         * @param {?} type
	         * @param {?} selectAttr
	         * @param {?} hrefAttr
	         * @param {?} nonBindable
	         * @param {?} projectAs
	         */
	        function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	            this.type = type;
	            this.selectAttr = selectAttr;
	            this.hrefAttr = hrefAttr;
	            this.nonBindable = nonBindable;
	            this.projectAs = projectAs;
	        }
	        return PreparsedElement;
	    }());
	    /**
	     * @param {?} selectAttr
	     * @return {?}
	     */
	    function normalizeNgContentSelect(selectAttr) {
	        if (selectAttr === null || selectAttr.length === 0) {
	            return '*';
	        }
	        return selectAttr;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    // Group 1 = "bind-"
	    // Group 2 = "let-"
	    // Group 3 = "ref-/#"
	    // Group 4 = "on-"
	    // Group 5 = "bindon-"
	    // Group 6 = "@"
	    // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	    // Group 8 = identifier inside [()]
	    // Group 9 = identifier inside []
	    // Group 10 = identifier inside ()
	    var /** @type {?} */ BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	    var /** @type {?} */ KW_BIND_IDX = 1;
	    var /** @type {?} */ KW_LET_IDX = 2;
	    var /** @type {?} */ KW_REF_IDX = 3;
	    var /** @type {?} */ KW_ON_IDX = 4;
	    var /** @type {?} */ KW_BINDON_IDX = 5;
	    var /** @type {?} */ KW_AT_IDX = 6;
	    var /** @type {?} */ IDENT_KW_IDX = 7;
	    var /** @type {?} */ IDENT_BANANA_BOX_IDX = 8;
	    var /** @type {?} */ IDENT_PROPERTY_IDX = 9;
	    var /** @type {?} */ IDENT_EVENT_IDX = 10;
	    var /** @type {?} */ TEMPLATE_ELEMENT = 'template';
	    var /** @type {?} */ TEMPLATE_ATTR = 'template';
	    var /** @type {?} */ TEMPLATE_ATTR_PREFIX = '*';
	    var /** @type {?} */ CLASS_ATTR = 'class';
	    var /** @type {?} */ TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	    /**
	     * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	     * parsed templates before compilation is invoked, allowing custom expression syntax
	     * and other advanced transformations.
	     *
	     * This is currently an internal-only feature and not meant for general use.
	     */
	    var /** @type {?} */ TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
	    var TemplateParseError = (function (_super) {
	        __extends(TemplateParseError, _super);
	        /**
	         * @param {?} message
	         * @param {?} span
	         * @param {?} level
	         */
	        function TemplateParseError(message, span, level) {
	            _super.call(this, span, message, level);
	        }
	        return TemplateParseError;
	    }(ParseError));
	    var TemplateParseResult = (function () {
	        /**
	         * @param {?=} templateAst
	         * @param {?=} errors
	         */
	        function TemplateParseResult(templateAst, errors) {
	            this.templateAst = templateAst;
	            this.errors = errors;
	        }
	        return TemplateParseResult;
	    }());
	    var TemplateParser = (function () {
	        /**
	         * @param {?} _exprParser
	         * @param {?} _schemaRegistry
	         * @param {?} _htmlParser
	         * @param {?} _console
	         * @param {?} transforms
	         */
	        function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	            this._exprParser = _exprParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._htmlParser = _htmlParser;
	            this._console = _console;
	            this.transforms = transforms;
	        }
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	            var /** @type {?} */ result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	            var /** @type {?} */ warnings = result.errors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	            var /** @type {?} */ errors = result.errors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	            if (warnings.length > 0) {
	                this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	            }
	            if (errors.length > 0) {
	                var /** @type {?} */ errorString = errors.join('\n');
	                throw new SyntaxError("Template parse errors:\n" + errorString);
	            }
	            return result.templateAst;
	        };
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	            return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
	        };
	        /**
	         * @param {?} htmlAstWithErrors
	         * @param {?} component
	         * @param {?} template
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} schemas
	         * @param {?} templateUrl
	         * @return {?}
	         */
	        TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
	            var /** @type {?} */ result;
	            var /** @type {?} */ errors = htmlAstWithErrors.errors;
	            if (htmlAstWithErrors.rootNodes.length > 0) {
	                var /** @type {?} */ uniqDirectives = removeSummaryDuplicates(directives);
	                var /** @type {?} */ uniqPipes = removeSummaryDuplicates(pipes);
	                var /** @type {?} */ providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	                var /** @type {?} */ interpolationConfig = void 0;
	                if (component.template && component.template.interpolation) {
	                    interpolationConfig = {
	                        start: component.template.interpolation[0],
	                        end: component.template.interpolation[1]
	                    };
	                }
	                var /** @type {?} */ bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	                var /** @type {?} */ parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	                result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	                errors.push.apply(errors, providerViewContext.errors);
	            }
	            else {
	                result = [];
	            }
	            this._assertNoReferenceDuplicationOnTemplate(result, errors);
	            if (errors.length > 0) {
	                return new TemplateParseResult(result, errors);
	            }
	            if (this.transforms) {
	                this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	            }
	            return new TemplateParseResult(result, errors);
	        };
	        /**
	         * @param {?} htmlAstWithErrors
	         * @param {?=} forced
	         * @return {?}
	         */
	        TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	            if (forced === void 0) { forced = false; }
	            var /** @type {?} */ errors = htmlAstWithErrors.errors;
	            if (errors.length == 0 || forced) {
	                // Transform ICU messages to angular directives
	                var /** @type {?} */ expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	                errors.push.apply(errors, expandedHtmlAst.errors);
	                htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	            }
	            return htmlAstWithErrors;
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        TemplateParser.prototype.getInterpolationConfig = function (component) {
	            if (component.template) {
	                return InterpolationConfig.fromArray(component.template.interpolation);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} result
	         * @param {?} errors
	         * @return {?}
	         */
	        TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	            var /** @type {?} */ existingReferences = [];
	            result.filter(function (element) { return !!((element)).references; })
	                .forEach(function (element) { return ((element)).references.forEach(function (reference) {
	                var /** @type {?} */ name = reference.name;
	                if (existingReferences.indexOf(name) < 0) {
	                    existingReferences.push(name);
	                }
	                else {
	                    var /** @type {?} */ error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, ParseErrorLevel.FATAL);
	                    errors.push(error);
	                }
	            }); });
	        };
	        /** @nocollapse */
	        TemplateParser.ctorParameters = function () { return [
	            { type: Parser, },
	            { type: ElementSchemaRegistry, },
	            { type: I18NHtmlParser, },
	            { type: Console, },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	        ]; };
	        TemplateParser = __decorate([
	            CompilerInjectable(), 
	            __metadata('design:paramtypes', [Parser, ElementSchemaRegistry, I18NHtmlParser, Console, Array])
	        ], TemplateParser);
	        return TemplateParser;
	    }());
	    var TemplateParseVisitor = (function () {
	        /**
	         * @param {?} providerViewContext
	         * @param {?} directives
	         * @param {?} _bindingParser
	         * @param {?} _schemaRegistry
	         * @param {?} _schemas
	         * @param {?} _targetErrors
	         */
	        function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	            var _this = this;
	            this.providerViewContext = providerViewContext;
	            this._bindingParser = _bindingParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._schemas = _schemas;
	            this._targetErrors = _targetErrors;
	            this.selectorMatcher = new SelectorMatcher();
	            this.directivesIndex = new Map();
	            this.ngContentCount = 0;
	            directives.forEach(function (directive, index) {
	                var selector = CssSelector.parse(directive.selector);
	                _this.selectorMatcher.addSelectables(selector, directive);
	                _this.directivesIndex.set(directive, index);
	            });
	        }
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	        /**
	         * @param {?} text
	         * @param {?} parent
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitText = function (text, parent) {
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	            var /** @type {?} */ expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
	            if (expr) {
	                return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
	            }
	            else {
	                return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	            }
	        };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} element
	         * @param {?} parent
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	            var _this = this;
	            var /** @type {?} */ nodeName = element.name;
	            var /** @type {?} */ preparsedElement = preparseElement(element);
	            if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	                preparsedElement.type === PreparsedElementType.STYLE) {
	                // Skipping <script> for security reasons
	                // Skipping <style> as we already processed them
	                // in the StyleCompiler
	                return null;
	            }
	            if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	                isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	                // Skipping stylesheets with either relative urls or package scheme as we already processed
	                // them in the StyleCompiler
	                return null;
	            }
	            var /** @type {?} */ matchableAttrs = [];
	            var /** @type {?} */ elementOrDirectiveProps = [];
	            var /** @type {?} */ elementOrDirectiveRefs = [];
	            var /** @type {?} */ elementVars = [];
	            var /** @type {?} */ events = [];
	            var /** @type {?} */ templateElementOrDirectiveProps = [];
	            var /** @type {?} */ templateMatchableAttrs = [];
	            var /** @type {?} */ templateElementVars = [];
	            var /** @type {?} */ hasInlineTemplates = false;
	            var /** @type {?} */ attrs = [];
	            var /** @type {?} */ lcElName = splitNsName(nodeName.toLowerCase())[1];
	            var /** @type {?} */ isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	            element.attrs.forEach(function (attr) {
	                var /** @type {?} */ hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	                var /** @type {?} */ templateBindingsSource;
	                var /** @type {?} */ prefixToken;
	                var /** @type {?} */ normalizedName = _this._normalizeAttributeName(attr.name);
	                if (normalizedName == TEMPLATE_ATTR) {
	                    templateBindingsSource = attr.value;
	                }
	                else if (normalizedName.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                    templateBindingsSource = attr.value;
	                    prefixToken = normalizedName.substring(TEMPLATE_ATTR_PREFIX.length) + ':';
	                }
	                var /** @type {?} */ hasTemplateBinding = isPresent(templateBindingsSource);
	                if (hasTemplateBinding) {
	                    if (hasInlineTemplates) {
	                        _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                    }
	                    hasInlineTemplates = true;
	                    _this._bindingParser.parseInlineTemplateBinding(prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	                }
	                if (!hasBinding && !hasTemplateBinding) {
	                    // don't include the bindings as attributes as well in the AST
	                    attrs.push(_this.visitAttribute(attr, null));
	                    matchableAttrs.push([attr.name, attr.value]);
	                }
	            });
	            var /** @type {?} */ elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	            var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	            var /** @type {?} */ references = [];
	            var /** @type {?} */ directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	            var /** @type {?} */ elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
	            var /** @type {?} */ isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	            var /** @type {?} */ providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	            var /** @type {?} */ children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	            providerContext.afterElement();
	            // Override the actual selector when the `ngProjectAs` attribute is provided
	            var /** @type {?} */ projectionSelector = isPresent(preparsedElement.projectAs) ?
	                CssSelector.parse(preparsedElement.projectAs)[0] :
	                elementCssSelector;
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(projectionSelector);
	            var /** @type {?} */ parsedElement;
	            if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	                if (element.children && !element.children.every(_isEmptyTextNode)) {
	                    this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	                }
	                parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	            }
	            else if (isTemplateElement) {
	                this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	                this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	                parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	            }
	            else {
	                this._assertElementExists(matchElement, element);
	                this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	                var /** @type {?} */ ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	                parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
	                this._findComponentDirectives(directiveAsts)
	                    .forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template); });
	                var /** @type {?} */ componentTemplate = providerContext.viewContext.component.template;
	                this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
	            }
	            if (hasInlineTemplates) {
	                var /** @type {?} */ templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	                var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
	                var /** @type {?} */ templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	                var /** @type {?} */ templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	                this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	                var /** @type {?} */ templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	                templateProviderContext.afterElement();
	                parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	            }
	            return parsedElement;
	        };
	        /**
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} template
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {
	            var _this = this;
	            var /** @type {?} */ triggerLookup = new Set();
	            template.animations.forEach(function (entry) { triggerLookup.add(entry); });
	            var /** @type {?} */ animationInputs = inputs.filter(function (input) { return input.isAnimation; });
	            animationInputs.forEach(function (input) {
	                var /** @type {?} */ name = input.name;
	                if (!triggerLookup.has(name)) {
	                    _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
	                }
	            });
	            outputs.forEach(function (output) {
	                if (output.isAnimation) {
	                    var /** @type {?} */ found = animationInputs.find(function (input) { return input.name == output.name; });
	                    if (!found) {
	                        _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
	                    }
	                }
	            });
	        };
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} attr
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetProps
	         * @param {?} targetEvents
	         * @param {?} targetRefs
	         * @param {?} targetVars
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	            var /** @type {?} */ name = this._normalizeAttributeName(attr.name);
	            var /** @type {?} */ value = attr.value;
	            var /** @type {?} */ srcSpan = attr.sourceSpan;
	            var /** @type {?} */ bindParts = name.match(BIND_NAME_REGEXP);
	            var /** @type {?} */ hasBinding = false;
	            if (bindParts !== null) {
	                hasBinding = true;
	                if (isPresent(bindParts[KW_BIND_IDX])) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[KW_LET_IDX]) {
	                    if (isTemplateElement) {
	                        var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                        this._parseVariable(identifier, value, srcSpan, targetVars);
	                    }
	                    else {
	                        this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                    }
	                }
	                else if (bindParts[KW_REF_IDX]) {
	                    var /** @type {?} */ identifier = bindParts[IDENT_KW_IDX];
	                    this._parseReference(identifier, value, srcSpan, targetRefs);
	                }
	                else if (bindParts[KW_ON_IDX]) {
	                    this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[KW_BINDON_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                    this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[KW_AT_IDX]) {
	                    this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                    this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	                else if (bindParts[IDENT_PROPERTY_IDX]) {
	                    this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                }
	                else if (bindParts[IDENT_EVENT_IDX]) {
	                    this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	                }
	            }
	            else {
	                hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            if (!hasBinding) {
	                this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	            }
	            return hasBinding;
	        };
	        /**
	         * @param {?} attrName
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	            return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetVars
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	            if (identifier.indexOf('-') > -1) {
	                this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	            }
	            targetVars.push(new VariableAst(identifier, value, sourceSpan));
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} value
	         * @param {?} sourceSpan
	         * @param {?} targetRefs
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	            if (identifier.indexOf('-') > -1) {
	                this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	            }
	            targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	        };
	        /**
	         * @param {?} name
	         * @param {?} expression
	         * @param {?} sourceSpan
	         * @param {?} targetMatchableAttrs
	         * @param {?} targetEvents
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	            this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	        };
	        /**
	         * @param {?} selectorMatcher
	         * @param {?} elementCssSelector
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	            var _this = this;
	            // Need to sort the directives so that we get consistent results throughout,
	            // as selectorMatcher uses Maps inside.
	            // Also deduplicate directives as they might match more than one time!
	            var /** @type {?} */ directives = new Array(this.directivesIndex.size);
	            // Whether any directive selector matches on the element name
	            var /** @type {?} */ matchElement = false;
	            selectorMatcher.match(elementCssSelector, function (selector, directive) {
	                directives[_this.directivesIndex.get(directive)] = directive;
	                matchElement = matchElement || selector.hasElementSelector();
	            });
	            return {
	                directives: directives.filter(function (dir) { return !!dir; }),
	                matchElement: matchElement,
	            };
	        };
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} elementName
	         * @param {?} directives
	         * @param {?} props
	         * @param {?} elementOrDirectiveRefs
	         * @param {?} elementSourceSpan
	         * @param {?} targetReferences
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
	            var _this = this;
	            var /** @type {?} */ matchedReferences = new Set();
	            var /** @type {?} */ component = null;
	            var /** @type {?} */ directiveAsts = directives.map(function (directive) {
	                var /** @type {?} */ sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + identifierName(directive.type));
	                if (directive.isComponent) {
	                    component = directive;
	                }
	                var /** @type {?} */ directiveProperties = [];
	                var /** @type {?} */ hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
	                // Note: We need to check the host properties here as well,
	                // as we don't know the element name in the DirectiveWrapperCompiler yet.
	                _this._checkPropertiesInSchema(elementName, hostProperties);
	                var /** @type {?} */ hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	                _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	                elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                    if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                        (directive.exportAs == elOrDirRef.value)) {
	                        targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                        matchedReferences.add(elOrDirRef.name);
	                    }
	                });
	                return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	            });
	            elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                if (elOrDirRef.value.length > 0) {
	                    if (!matchedReferences.has(elOrDirRef.name)) {
	                        _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                    }
	                }
	                else if (!component) {
	                    var /** @type {?} */ refToken = null;
	                    if (isTemplateElement) {
	                        refToken = createIdentifierToken(Identifiers.TemplateRef);
	                    }
	                    targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	                }
	            });
	            return directiveAsts;
	        };
	        /**
	         * @param {?} directiveProperties
	         * @param {?} boundProps
	         * @param {?} targetBoundDirectiveProps
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	            if (directiveProperties) {
	                var /** @type {?} */ boundPropsByName_1 = new Map();
	                boundProps.forEach(function (boundProp) {
	                    var /** @type {?} */ prevValue = boundPropsByName_1.get(boundProp.name);
	                    if (!prevValue || prevValue.isLiteral) {
	                        // give [a]="b" a higher precedence than a="b" on the same element
	                        boundPropsByName_1.set(boundProp.name, boundProp);
	                    }
	                });
	                Object.keys(directiveProperties).forEach(function (dirProp) {
	                    var /** @type {?} */ elProp = directiveProperties[dirProp];
	                    var /** @type {?} */ boundProp = boundPropsByName_1.get(elProp);
	                    // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                    if (boundProp) {
	                        targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                    }
	                });
	            }
	        };
	        /**
	         * @param {?} elementName
	         * @param {?} props
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	            var _this = this;
	            var /** @type {?} */ boundElementProps = [];
	            var /** @type {?} */ boundDirectivePropsIndex = new Map();
	            directives.forEach(function (directive) {
	                directive.inputs.forEach(function (prop) {
	                    boundDirectivePropsIndex.set(prop.templateName, prop);
	                });
	            });
	            props.forEach(function (prop) {
	                if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
	                    boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	                }
	            });
	            this._checkPropertiesInSchema(elementName, boundElementProps);
	            return boundElementProps;
	        };
	        /**
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	            return directives.filter(function (directive) { return directive.directive.isComponent; });
	        };
	        /**
	         * @param {?} directives
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	            return this._findComponentDirectives(directives)
	                .map(function (directive) { return identifierName(directive.directive.type); });
	        };
	        /**
	         * @param {?} directives
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	            var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	            if (componentTypeNames.length > 1) {
	                this._reportError("More than one component matched on this element.\n" +
	                    "Make sure that only one component's selector can match a given element.\n" +
	                    ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	            }
	        };
	        /**
	         * Make sure that non-angular tags conform to the schemas.
	         *
	         * Note: An element is considered an angular tag when at least one directive selector matches the
	         * tag name.
	         *
	         * @param {?} matchElement Whether any directive has matched on the tag name
	         * @param {?} element the html element
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	            var /** @type {?} */ elName = element.name.replace(/^:xhtml:/, '');
	            if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	                var /** @type {?} */ errorMsg = ("'" + elName + "' is not a known element:\n") +
	                    ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") +
	                    ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
	                this._reportError(errorMsg, element.sourceSpan);
	            }
	        };
	        /**
	         * @param {?} directives
	         * @param {?} elementProps
	         * @param {?} sourceSpan
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	            var _this = this;
	            var /** @type {?} */ componentTypeNames = this._findComponentDirectiveNames(directives);
	            if (componentTypeNames.length > 0) {
	                this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	            }
	            elementProps.forEach(function (prop) {
	                _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", sourceSpan);
	            });
	        };
	        /**
	         * @param {?} directives
	         * @param {?} events
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	            var _this = this;
	            var /** @type {?} */ allDirectiveEvents = new Set();
	            directives.forEach(function (directive) {
	                Object.keys(directive.directive.outputs).forEach(function (k) {
	                    var /** @type {?} */ eventName = directive.directive.outputs[k];
	                    allDirectiveEvents.add(eventName);
	                });
	            });
	            events.forEach(function (event) {
	                if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
	                    _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"@NgModule.declarations\".", event.sourceSpan);
	                }
	            });
	        };
	        /**
	         * @param {?} elementName
	         * @param {?} boundProps
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	            var _this = this;
	            boundProps.forEach(function (boundProp) {
	                if (boundProp.type === PropertyBindingType.Property &&
	                    !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                    var /** @type {?} */ errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                    if (elementName.indexOf('-') > -1) {
	                        errorMsg +=
	                            ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") +
	                                ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
	                    }
	                    _this._reportError(errorMsg, boundProp.sourceSpan);
	                }
	            });
	        };
	        /**
	         * @param {?} message
	         * @param {?} sourceSpan
	         * @param {?=} level
	         * @return {?}
	         */
	        TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	            if (level === void 0) { level = ParseErrorLevel.FATAL; }
	            this._targetErrors.push(new ParseError(sourceSpan, message, level));
	        };
	        return TemplateParseVisitor;
	    }());
	    var NonBindableVisitor = (function () {
	        function NonBindableVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	            var /** @type {?} */ preparsedElement = preparseElement(ast);
	            if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	                preparsedElement.type === PreparsedElementType.STYLE ||
	                preparsedElement.type === PreparsedElementType.STYLESHEET) {
	                // Skipping <script> for security reasons
	                // Skipping <style> and stylesheets as we already processed them
	                // in the StyleCompiler
	                return null;
	            }
	            var /** @type {?} */ attrNameAndValues = ast.attrs.map(function (attr) { return [attr.name, attr.value]; });
	            var /** @type {?} */ selector = createElementCssSelector(ast.name, attrNameAndValues);
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(selector);
	            var /** @type {?} */ children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	            return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	        };
	        /**
	         * @param {?} comment
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	        /**
	         * @param {?} attribute
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	            return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	        };
	        /**
	         * @param {?} text
	         * @param {?} parent
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitText = function (text, parent) {
	            var /** @type {?} */ ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	            return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	        };
	        /**
	         * @param {?} expansion
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	        /**
	         * @param {?} expansionCase
	         * @param {?} context
	         * @return {?}
	         */
	        NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	        return NonBindableVisitor;
	    }());
	    var ElementOrDirectiveRef = (function () {
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?} sourceSpan
	         */
	        function ElementOrDirectiveRef(name, value, sourceSpan) {
	            this.name = name;
	            this.value = value;
	            this.sourceSpan = sourceSpan;
	        }
	        return ElementOrDirectiveRef;
	    }());
	    /**
	     * @param {?} classAttrValue
	     * @return {?}
	     */
	    function splitClasses(classAttrValue) {
	        return classAttrValue.trim().split(/\s+/g);
	    }
	    var ElementContext = (function () {
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} _ngContentIndexMatcher
	         * @param {?} _wildcardNgContentIndex
	         * @param {?} providerContext
	         */
	        function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	            this.isTemplateElement = isTemplateElement;
	            this._ngContentIndexMatcher = _ngContentIndexMatcher;
	            this._wildcardNgContentIndex = _wildcardNgContentIndex;
	            this.providerContext = providerContext;
	        }
	        /**
	         * @param {?} isTemplateElement
	         * @param {?} directives
	         * @param {?} providerContext
	         * @return {?}
	         */
	        ElementContext.create = function (isTemplateElement, directives, providerContext) {
	            var /** @type {?} */ matcher = new SelectorMatcher();
	            var /** @type {?} */ wildcardNgContentIndex = null;
	            var /** @type {?} */ component = directives.find(function (directive) { return directive.directive.isComponent; });
	            if (component) {
	                var /** @type {?} */ ngContentSelectors = component.directive.template.ngContentSelectors;
	                for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {
	                    var /** @type {?} */ selector = ngContentSelectors[i];
	                    if (selector === '*') {
	                        wildcardNgContentIndex = i;
	                    }
	                    else {
	                        matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                    }
	                }
	            }
	            return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        ElementContext.prototype.findNgContentIndex = function (selector) {
	            var /** @type {?} */ ngContentIndices = [];
	            this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	            ngContentIndices.sort();
	            if (isPresent(this._wildcardNgContentIndex)) {
	                ngContentIndices.push(this._wildcardNgContentIndex);
	            }
	            return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	        };
	        return ElementContext;
	    }());
	    /**
	     * @param {?} elementName
	     * @param {?} attributes
	     * @return {?}
	     */
	    function createElementCssSelector(elementName, attributes) {
	        var /** @type {?} */ cssSelector = new CssSelector();
	        var /** @type {?} */ elNameNoNs = splitNsName(elementName)[1];
	        cssSelector.setElement(elNameNoNs);
	        for (var /** @type {?} */ i = 0; i < attributes.length; i++) {
	            var /** @type {?} */ attrName = attributes[i][0];
	            var /** @type {?} */ attrNameNoNs = splitNsName(attrName)[1];
	            var /** @type {?} */ attrValue = attributes[i][1];
	            cssSelector.addAttribute(attrNameNoNs, attrValue);
	            if (attrName.toLowerCase() == CLASS_ATTR) {
	                var /** @type {?} */ classes = splitClasses(attrValue);
	                classes.forEach(function (className) { return cssSelector.addClassName(className); });
	            }
	        }
	        return cssSelector;
	    }
	    var /** @type {?} */ EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	    var /** @type {?} */ NON_BINDABLE_VISITOR = new NonBindableVisitor();
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function _isEmptyTextNode(node) {
	        return node instanceof Text && node.value.trim().length == 0;
	    }
	    /**
	     * @param {?} items
	     * @return {?}
	     */
	    function removeSummaryDuplicates(items) {
	        var /** @type {?} */ map = new Map();
	        items.forEach(function (item) {
	            if (!map.get(item.type.reference)) {
	                map.set(item.type.reference, item);
	            }
	        });
	        return Array.from(map.values());
	    }

	    /**
	     * @return {?}
	     */
	    function unimplemented$2() {
	        throw new Error('unimplemented');
	    }
	    var CompilerConfig = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function CompilerConfig(_a) {
	            var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
	            this.renderTypes = renderTypes;
	            this.defaultEncapsulation = defaultEncapsulation;
	            this._genDebugInfo = genDebugInfo;
	            this._logBindingUpdate = logBindingUpdate;
	            this.useJit = useJit;
	        }
	        Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return CompilerConfig;
	    }());
	    /**
	     * Types used for the renderer.
	     * Can be replaced to specialize the generated output to a specific renderer
	     * to help tree shaking.
	     * @abstract
	     */
	    var RenderTypes = (function () {
	        function RenderTypes() {
	        }
	        Object.defineProperty(RenderTypes.prototype, "renderer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderTypes.prototype, "renderText", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderTypes.prototype, "renderElement", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderTypes.prototype, "renderComment", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderTypes.prototype, "renderNode", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderTypes.prototype, "renderEvent", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented$2(); },
	            enumerable: true,
	            configurable: true
	        });
	        return RenderTypes;
	    }());
	    var DefaultRenderTypes = (function () {
	        function DefaultRenderTypes() {
	            this.renderText = null;
	            this.renderElement = null;
	            this.renderComment = null;
	            this.renderNode = null;
	            this.renderEvent = null;
	        }
	        Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return createIdentifier(Identifiers.Renderer); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return DefaultRenderTypes;
	    }());

	    var __extends$19 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     * @abstract
	     */
	    var AnimationAst = (function () {
	        function AnimationAst() {
	            this.startTime = 0;
	            this.playTime = 0;
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationAst.prototype.visit = function (visitor, context) { };
	        return AnimationAst;
	    }());
	    /**
	     * @abstract
	     */
	    var AnimationStateAst = (function (_super) {
	        __extends$19(AnimationStateAst, _super);
	        function AnimationStateAst() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateAst.prototype.visit = function (visitor, context) { };
	        return AnimationStateAst;
	    }(AnimationAst));
	    var AnimationEntryAst = (function (_super) {
	        __extends$19(AnimationEntryAst, _super);
	        /**
	         * @param {?} name
	         * @param {?} stateDeclarations
	         * @param {?} stateTransitions
	         */
	        function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	            _super.call(this);
	            this.name = name;
	            this.stateDeclarations = stateDeclarations;
	            this.stateTransitions = stateTransitions;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationEntryAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationEntry(this, context);
	        };
	        return AnimationEntryAst;
	    }(AnimationAst));
	    var AnimationStateDeclarationAst = (function (_super) {
	        __extends$19(AnimationStateDeclarationAst, _super);
	        /**
	         * @param {?} stateName
	         * @param {?} styles
	         */
	        function AnimationStateDeclarationAst(stateName, styles) {
	            _super.call(this);
	            this.stateName = stateName;
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStateDeclaration(this, context);
	        };
	        return AnimationStateDeclarationAst;
	    }(AnimationStateAst));
	    var AnimationStateTransitionExpression = (function () {
	        /**
	         * @param {?} fromState
	         * @param {?} toState
	         */
	        function AnimationStateTransitionExpression(fromState, toState) {
	            this.fromState = fromState;
	            this.toState = toState;
	        }
	        return AnimationStateTransitionExpression;
	    }());
	    var AnimationStateTransitionAst = (function (_super) {
	        __extends$19(AnimationStateTransitionAst, _super);
	        /**
	         * @param {?} stateChanges
	         * @param {?} animation
	         */
	        function AnimationStateTransitionAst(stateChanges, animation) {
	            _super.call(this);
	            this.stateChanges = stateChanges;
	            this.animation = animation;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStateTransition(this, context);
	        };
	        return AnimationStateTransitionAst;
	    }(AnimationStateAst));
	    var AnimationStepAst = (function (_super) {
	        __extends$19(AnimationStepAst, _super);
	        /**
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         */
	        function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	            _super.call(this);
	            this.startingStyles = startingStyles;
	            this.keyframes = keyframes;
	            this.duration = duration;
	            this.delay = delay;
	            this.easing = easing;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStepAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStep(this, context);
	        };
	        return AnimationStepAst;
	    }(AnimationAst));
	    var AnimationStylesAst = (function (_super) {
	        __extends$19(AnimationStylesAst, _super);
	        /**
	         * @param {?} styles
	         */
	        function AnimationStylesAst(styles) {
	            _super.call(this);
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationStylesAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationStyles(this, context);
	        };
	        return AnimationStylesAst;
	    }(AnimationAst));
	    var AnimationKeyframeAst = (function (_super) {
	        __extends$19(AnimationKeyframeAst, _super);
	        /**
	         * @param {?} offset
	         * @param {?} styles
	         */
	        function AnimationKeyframeAst(offset, styles) {
	            _super.call(this);
	            this.offset = offset;
	            this.styles = styles;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationKeyframe(this, context);
	        };
	        return AnimationKeyframeAst;
	    }(AnimationAst));
	    /**
	     * @abstract
	     */
	    var AnimationWithStepsAst = (function (_super) {
	        __extends$19(AnimationWithStepsAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationWithStepsAst(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationWithStepsAst;
	    }(AnimationAst));
	    var AnimationGroupAst = (function (_super) {
	        __extends$19(AnimationGroupAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationGroupAst(steps) {
	            _super.call(this, steps);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationGroupAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationGroup(this, context);
	        };
	        return AnimationGroupAst;
	    }(AnimationWithStepsAst));
	    var AnimationSequenceAst = (function (_super) {
	        __extends$19(AnimationSequenceAst, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationSequenceAst(steps) {
	            _super.call(this, steps);
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        AnimationSequenceAst.prototype.visit = function (visitor, context) {
	            return visitor.visitAnimationSequence(this, context);
	        };
	        return AnimationSequenceAst;
	    }(AnimationWithStepsAst));

	    var StylesCollectionEntry = (function () {
	        /**
	         * @param {?} time
	         * @param {?} value
	         */
	        function StylesCollectionEntry(time, value) {
	            this.time = time;
	            this.value = value;
	        }
	        /**
	         * @param {?} time
	         * @param {?} value
	         * @return {?}
	         */
	        StylesCollectionEntry.prototype.matches = function (time, value) {
	            return time == this.time && value == this.value;
	        };
	        return StylesCollectionEntry;
	    }());
	    var StylesCollection = (function () {
	        function StylesCollection() {
	            this.styles = {};
	        }
	        /**
	         * @param {?} property
	         * @param {?} time
	         * @param {?} value
	         * @return {?}
	         */
	        StylesCollection.prototype.insertAtTime = function (property, time, value) {
	            var /** @type {?} */ tuple = new StylesCollectionEntry(time, value);
	            var /** @type {?} */ entries = this.styles[property];
	            if (!isPresent(entries)) {
	                entries = this.styles[property] = [];
	            }
	            // insert this at the right stop in the array
	            // this way we can keep it sorted
	            var /** @type {?} */ insertionIndex = 0;
	            for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	                if (entries[i].time <= time) {
	                    insertionIndex = i + 1;
	                    break;
	                }
	            }
	            entries.splice(insertionIndex, 0, tuple);
	        };
	        /**
	         * @param {?} property
	         * @param {?} index
	         * @return {?}
	         */
	        StylesCollection.prototype.getByIndex = function (property, index) {
	            var /** @type {?} */ items = this.styles[property];
	            if (isPresent(items)) {
	                return index >= items.length ? null : items[index];
	            }
	            return null;
	        };
	        /**
	         * @param {?} property
	         * @param {?} time
	         * @return {?}
	         */
	        StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	            var /** @type {?} */ entries = this.styles[property];
	            if (isPresent(entries)) {
	                for (var /** @type {?} */ i = entries.length - 1; i >= 0; i--) {
	                    if (entries[i].time <= time)
	                        return i;
	                }
	            }
	            return null;
	        };
	        return StylesCollection;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$18 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$4 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$4 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ _INITIAL_KEYFRAME = 0;
	    var /** @type {?} */ _TERMINAL_KEYFRAME = 1;
	    var /** @type {?} */ _ONE_SECOND = 1000;
	    var AnimationParseError = (function (_super) {
	        __extends$18(AnimationParseError, _super);
	        /**
	         * @param {?} message
	         */
	        function AnimationParseError(message) {
	            _super.call(this, null, message);
	        }
	        /**
	         * @return {?}
	         */
	        AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	        return AnimationParseError;
	    }(ParseError));
	    var AnimationEntryParseResult = (function () {
	        /**
	         * @param {?} ast
	         * @param {?} errors
	         */
	        function AnimationEntryParseResult(ast, errors) {
	            this.ast = ast;
	            this.errors = errors;
	        }
	        return AnimationEntryParseResult;
	    }());
	    var AnimationParser = (function () {
	        /**
	         * @param {?} _schema
	         */
	        function AnimationParser(_schema) {
	            this._schema = _schema;
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        AnimationParser.prototype.parseComponent = function (component) {
	            var _this = this;
	            var /** @type {?} */ errors = [];
	            var /** @type {?} */ componentName = identifierName(component.type);
	            var /** @type {?} */ animationTriggerNames = new Set();
	            var /** @type {?} */ asts = component.template.animations.map(function (entry) {
	                var /** @type {?} */ result = _this.parseEntry(entry);
	                var /** @type {?} */ ast = result.ast;
	                var /** @type {?} */ triggerName = ast.name;
	                if (animationTriggerNames.has(triggerName)) {
	                    result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
	                }
	                else {
	                    animationTriggerNames.add(triggerName);
	                }
	                if (result.errors.length > 0) {
	                    var /** @type {?} */ errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
	                    result.errors.forEach(function (error) { errorMessage_1 += '\n-- ' + error.msg; });
	                    errors.push(errorMessage_1);
	                }
	                return ast;
	            });
	            if (errors.length > 0) {
	                var /** @type {?} */ errorString = errors.join('\n');
	                throw new Error("Animation parse errors:\n" + errorString);
	            }
	            return asts;
	        };
	        /**
	         * @param {?} entry
	         * @return {?}
	         */
	        AnimationParser.prototype.parseEntry = function (entry) {
	            var _this = this;
	            var /** @type {?} */ errors = [];
	            var /** @type {?} */ stateStyles = {};
	            var /** @type {?} */ transitions = [];
	            var /** @type {?} */ stateDeclarationAsts = [];
	            entry.definitions.forEach(function (def) {
	                if (def instanceof CompileAnimationStateDeclarationMetadata) {
	                    _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {
	                        stateDeclarationAsts.push(ast);
	                        stateStyles[ast.stateName] = ast.styles;
	                    });
	                }
	                else {
	                    transitions.push(/** @type {?} */ (def));
	                }
	            });
	            var /** @type {?} */ stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors); });
	            var /** @type {?} */ ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	            return new AnimationEntryParseResult(ast, errors);
	        };
	        AnimationParser = __decorate$4([
	            CompilerInjectable(), 
	            __metadata$4('design:paramtypes', [ElementSchemaRegistry])
	        ], AnimationParser);
	        return AnimationParser;
	    }());
	    /**
	     * @param {?} stateMetadata
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
	        var /** @type {?} */ normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
	        var /** @type {?} */ defStyles = new AnimationStylesAst(normalizedStyles);
	        var /** @type {?} */ states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	        return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });
	    }
	    /**
	     * @param {?} transitionStateMetadata
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
	        var /** @type {?} */ styles = new StylesCollection();
	        var /** @type {?} */ transitionExprs = [];
	        var /** @type {?} */ transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	        transitionStates.forEach(function (expr) { transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)); });
	        var /** @type {?} */ entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	        var /** @type {?} */ animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
	        var /** @type {?} */ animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	        if (errors.length == 0) {
	            _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	        }
	        var /** @type {?} */ stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
	            animationAst :
	            new AnimationSequenceAst([animationAst]);
	        return new AnimationStateTransitionAst(transitionExprs, stepsAst);
	    }
	    /**
	     * @param {?} alias
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationAlias(alias, errors) {
	        switch (alias) {
	            case ':enter':
	                return 'void => *';
	            case ':leave':
	                return '* => void';
	            default:
	                errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
	                return '* => *';
	        }
	    }
	    /**
	     * @param {?} eventStr
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationTransitionExpr(eventStr, errors) {
	        var /** @type {?} */ expressions = [];
	        if (eventStr[0] == ':') {
	            eventStr = _parseAnimationAlias(eventStr, errors);
	        }
	        var /** @type {?} */ match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	        if (!isPresent(match) || match.length < 4) {
	            errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	            return expressions;
	        }
	        var /** @type {?} */ fromState = match[1];
	        var /** @type {?} */ separator = match[2];
	        var /** @type {?} */ toState = match[3];
	        expressions.push(new AnimationStateTransitionExpression(fromState, toState));
	        var /** @type {?} */ isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	        if (separator[0] == '<' && !isFullAnyStateExpr) {
	            expressions.push(new AnimationStateTransitionExpression(toState, fromState));
	        }
	        return expressions;
	    }
	    /**
	     * @param {?} entry
	     * @return {?}
	     */
	    function _normalizeAnimationEntry(entry) {
	        return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @param {?} permitStateReferences
	     * @return {?}
	     */
	    function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
	        var /** @type {?} */ offset = entry.offset;
	        if (offset > 1 || offset < 0) {
	            errors.push(new AnimationParseError("Offset values for animations must be between 0 and 1"));
	        }
	        var /** @type {?} */ normalizedStyles = [];
	        entry.styles.forEach(function (styleEntry) {
	            if (typeof styleEntry === 'string') {
	                if (permitStateReferences) {
	                    normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(/** @type {?} */ (styleEntry), stateStyles, errors));
	                }
	                else {
	                    errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	                }
	            }
	            else {
	                var /** @type {?} */ stylesObj_1 = (styleEntry);
	                var /** @type {?} */ normalizedStylesObj_1 = {};
	                Object.keys(stylesObj_1).forEach(function (propName) {
	                    var /** @type {?} */ normalizedProp = schema.normalizeAnimationStyleProperty(propName);
	                    var /** @type {?} */ normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
	                    var /** @type {?} */ normalizationError = normalizedOutput['error'];
	                    if (normalizationError) {
	                        errors.push(new AnimationParseError(normalizationError));
	                    }
	                    normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
	                });
	                normalizedStyles.push(normalizedStylesObj_1);
	            }
	        });
	        return normalizedStyles;
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
	        var /** @type {?} */ steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
	        return (entry instanceof CompileAnimationGroupMetadata) ?
	            new CompileAnimationGroupMetadata(steps) :
	            new CompileAnimationSequenceMetadata(steps);
	    }
	    /**
	     * @param {?} stylesList
	     * @param {?} newItem
	     * @return {?}
	     */
	    function _mergeAnimationStyles(stylesList, newItem) {
	        if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
	            var /** @type {?} */ lastIndex = stylesList.length - 1;
	            var /** @type {?} */ lastItem = stylesList[lastIndex];
	            if (typeof lastItem === 'object' && lastItem !== null) {
	                stylesList[lastIndex] = StringMapWrapper.merge(/** @type {?} */ (lastItem), /** @type {?} */ (newItem));
	                return;
	            }
	        }
	        stylesList.push(newItem);
	    }
	    /**
	     * @param {?} entry
	     * @param {?} stateStyles
	     * @param {?} schema
	     * @param {?} errors
	     * @return {?}
	     */
	    function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
	        var /** @type {?} */ steps;
	        if (entry instanceof CompileAnimationWithStepsMetadata) {
	            steps = entry.steps;
	        }
	        else {
	            return [entry];
	        }
	        var /** @type {?} */ newSteps = [];
	        var /** @type {?} */ combinedStyles;
	        steps.forEach(function (step) {
	            if (step instanceof CompileAnimationStyleMetadata) {
	                // this occurs when a style step is followed by a previous style step
	                // or when the first style step is run. We want to concatenate all subsequent
	                // style steps together into a single style step such that we have the correct
	                // starting keyframe data to pass into the animation player.
	                if (!isPresent(combinedStyles)) {
	                    combinedStyles = [];
	                }
	                _normalizeStyleMetadata(/** @type {?} */ (step), stateStyles, schema, errors, true)
	                    .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	            }
	            else {
	                // it is important that we create a metadata entry of the combined styles
	                // before we go on an process the animate, sequence or group metadata steps.
	                // This will ensure that the AST will have the previous styles painted on
	                // screen before any further animations that use the styles take place.
	                if (isPresent(combinedStyles)) {
	                    newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	                    combinedStyles = null;
	                }
	                if (step instanceof CompileAnimationAnimateMetadata) {
	                    // we do not recurse into CompileAnimationAnimateMetadata since
	                    // those style steps are not going to be squashed
	                    var /** @type {?} */ animateStyleValue = ((step)).styles;
	                    if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
	                        animateStyleValue.styles =
	                            _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
	                    }
	                    else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
	                        animateStyleValue.steps.forEach(function (step) {
	                            step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
	                        });
	                    }
	                }
	                else if (step instanceof CompileAnimationWithStepsMetadata) {
	                    var /** @type {?} */ innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
	                    step = step instanceof CompileAnimationGroupMetadata ?
	                        new CompileAnimationGroupMetadata(innerSteps) :
	                        new CompileAnimationSequenceMetadata(innerSteps);
	                }
	                newSteps.push(step);
	            }
	        });
	        // this happens when only styles were animated within the sequence
	        if (isPresent(combinedStyles)) {
	            newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	        }
	        return newSteps;
	    }
	    /**
	     * @param {?} stateName
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _resolveStylesFromState(stateName, stateStyles, errors) {
	        var /** @type {?} */ styles = [];
	        if (stateName[0] != ':') {
	            errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	        }
	        else {
	            var /** @type {?} */ normalizedStateName = stateName.substring(1);
	            var /** @type {?} */ value = stateStyles[normalizedStateName];
	            if (!isPresent(value)) {
	                errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	            }
	            else {
	                value.styles.forEach(function (stylesEntry) {
	                    if (typeof stylesEntry === 'object' && stylesEntry !== null) {
	                        styles.push(/** @type {?} */ (stylesEntry));
	                    }
	                });
	            }
	        }
	        return styles;
	    }
	    var _AnimationTimings = (function () {
	        /**
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         */
	        function _AnimationTimings(duration, delay, easing) {
	            this.duration = duration;
	            this.delay = delay;
	            this.easing = easing;
	        }
	        return _AnimationTimings;
	    }());
	    /**
	     * @param {?} keyframeSequence
	     * @param {?} currentTime
	     * @param {?} collectedStyles
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	        var /** @type {?} */ totalEntries = keyframeSequence.steps.length;
	        var /** @type {?} */ totalOffsets = 0;
	        keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });
	        if (totalOffsets > 0 && totalOffsets < totalEntries) {
	            errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	            totalOffsets = totalEntries;
	        }
	        var /** @type {?} */ limit = totalEntries - 1;
	        var /** @type {?} */ margin = totalOffsets == 0 ? (1 / limit) : 0;
	        var /** @type {?} */ rawKeyframes = [];
	        var /** @type {?} */ index = 0;
	        var /** @type {?} */ doSortKeyframes = false;
	        var /** @type {?} */ lastOffset = 0;
	        keyframeSequence.steps.forEach(function (styleMetadata) {
	            var /** @type {?} */ offset = styleMetadata.offset;
	            var /** @type {?} */ keyframeStyles = {};
	            styleMetadata.styles.forEach(function (entry) {
	                Object.keys(entry).forEach(function (prop) {
	                    if (prop != 'offset') {
	                        keyframeStyles[prop] = ((entry))[prop];
	                    }
	                });
	            });
	            if (isPresent(offset)) {
	                doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	            }
	            else {
	                offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	            }
	            rawKeyframes.push([offset, keyframeStyles]);
	            lastOffset = offset;
	            index++;
	        });
	        if (doSortKeyframes) {
	            rawKeyframes.sort(function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	        }
	        var /** @type {?} */ firstKeyframe = rawKeyframes[0];
	        if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	            rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	        }
	        var /** @type {?} */ firstKeyframeStyles = firstKeyframe[1];
	        limit = rawKeyframes.length - 1;
	        var /** @type {?} */ lastKeyframe = rawKeyframes[limit];
	        if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	            rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	            limit++;
	        }
	        var /** @type {?} */ lastKeyframeStyles = lastKeyframe[1];
	        for (var /** @type {?} */ i = 1; i <= limit; i++) {
	            var /** @type {?} */ entry = rawKeyframes[i];
	            var /** @type {?} */ styles = entry[1];
	            Object.keys(styles).forEach(function (prop) {
	                if (!isPresent(firstKeyframeStyles[prop])) {
	                    firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
	                }
	            });
	        }
	        var _loop_1 = function(i) {
	            var /** @type {?} */ entry = rawKeyframes[i];
	            var /** @type {?} */ styles = entry[1];
	            Object.keys(styles).forEach(function (prop) {
	                if (!isPresent(lastKeyframeStyles[prop])) {
	                    lastKeyframeStyles[prop] = styles[prop];
	                }
	            });
	        };
	        for (var /** @type {?} */ i = limit - 1; i >= 0; i--) {
	            _loop_1(i);
	        }
	        return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });
	    }
	    /**
	     * @param {?} entry
	     * @param {?} currentTime
	     * @param {?} collectedStyles
	     * @param {?} stateStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	        var /** @type {?} */ ast;
	        var /** @type {?} */ playTime = 0;
	        var /** @type {?} */ startingTime = currentTime;
	        if (entry instanceof CompileAnimationWithStepsMetadata) {
	            var /** @type {?} */ maxDuration_1 = 0;
	            var /** @type {?} */ steps_1 = [];
	            var /** @type {?} */ isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
	            var /** @type {?} */ previousStyles_1;
	            entry.steps.forEach(function (entry) {
	                // these will get picked up by the next step...
	                var /** @type {?} */ time = isGroup_1 ? startingTime : currentTime;
	                if (entry instanceof CompileAnimationStyleMetadata) {
	                    entry.styles.forEach(function (stylesEntry) {
	                        // by this point we know that we only have stringmap values
	                        var /** @type {?} */ map = (stylesEntry);
	                        Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]); });
	                    });
	                    previousStyles_1 = entry.styles;
	                    return;
	                }
	                var /** @type {?} */ innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	                if (isPresent(previousStyles_1)) {
	                    if (entry instanceof CompileAnimationWithStepsMetadata) {
	                        var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	                        steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	                    }
	                    else {
	                        var /** @type {?} */ innerStep = (innerAst);
	                        (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
	                    }
	                    previousStyles_1 = null;
	                }
	                var /** @type {?} */ astDuration = innerAst.playTime;
	                currentTime += astDuration;
	                playTime += astDuration;
	                maxDuration_1 = Math.max(astDuration, maxDuration_1);
	                steps_1.push(innerAst);
	                var _a;
	            });
	            if (isPresent(previousStyles_1)) {
	                var /** @type {?} */ startingStyles = new AnimationStylesAst(previousStyles_1);
	                steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	            }
	            if (isGroup_1) {
	                ast = new AnimationGroupAst(steps_1);
	                playTime = maxDuration_1;
	                currentTime = startingTime + playTime;
	            }
	            else {
	                ast = new AnimationSequenceAst(steps_1);
	            }
	        }
	        else if (entry instanceof CompileAnimationAnimateMetadata) {
	            var /** @type {?} */ timings = _parseTimeExpression(entry.timings, errors);
	            var /** @type {?} */ styles = entry.styles;
	            var /** @type {?} */ keyframes = void 0;
	            if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
	                keyframes =
	                    _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	            }
	            else {
	                var /** @type {?} */ styleData = (styles);
	                var /** @type {?} */ offset = _TERMINAL_KEYFRAME;
	                var /** @type {?} */ styleAst = new AnimationStylesAst(/** @type {?} */ (styleData.styles));
	                var /** @type {?} */ keyframe = new AnimationKeyframeAst(offset, styleAst);
	                keyframes = [keyframe];
	            }
	            ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	            playTime = timings.duration + timings.delay;
	            currentTime += playTime;
	            keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); }); }); });
	        }
	        else {
	            // if the code reaches this stage then an error
	            // has already been populated within the _normalizeStyleSteps()
	            // operation...
	            ast = new AnimationStepAst(null, [], 0, 0, '');
	        }
	        ast.playTime = playTime;
	        ast.startTime = startingTime;
	        return ast;
	    }
	    /**
	     * @param {?} ast
	     * @param {?} collectedStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	        // steps that only contain style will not be filled
	        if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
	            var /** @type {?} */ keyframes = ast.keyframes;
	            if (keyframes.length == 1) {
	                var /** @type {?} */ endKeyframe = keyframes[0];
	                var /** @type {?} */ startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	                ast.keyframes = [startKeyframe, endKeyframe];
	            }
	        }
	        else if (ast instanceof AnimationWithStepsAst) {
	            ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	        }
	    }
	    /**
	     * @param {?} exp
	     * @param {?} errors
	     * @return {?}
	     */
	    function _parseTimeExpression(exp, errors) {
	        var /** @type {?} */ regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
	        var /** @type {?} */ duration;
	        var /** @type {?} */ delay = 0;
	        var /** @type {?} */ easing = null;
	        if (typeof exp === 'string') {
	            var /** @type {?} */ matches = exp.match(regex);
	            if (matches === null) {
	                errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	                return new _AnimationTimings(0, 0, null);
	            }
	            var /** @type {?} */ durationMatch = parseFloat(matches[1]);
	            var /** @type {?} */ durationUnit = matches[2];
	            if (durationUnit == 's') {
	                durationMatch *= _ONE_SECOND;
	            }
	            duration = Math.floor(durationMatch);
	            var /** @type {?} */ delayMatch = matches[3];
	            var /** @type {?} */ delayUnit = matches[4];
	            if (isPresent(delayMatch)) {
	                var /** @type {?} */ delayVal = parseFloat(delayMatch);
	                if (isPresent(delayUnit) && delayUnit == 's') {
	                    delayVal *= _ONE_SECOND;
	                }
	                delay = Math.floor(delayVal);
	            }
	            var /** @type {?} */ easingVal = matches[5];
	            if (!isBlank(easingVal)) {
	                easing = easingVal;
	            }
	        }
	        else {
	            duration = (exp);
	        }
	        return new _AnimationTimings(duration, delay, easing);
	    }
	    /**
	     * @param {?} endKeyframe
	     * @param {?} startTime
	     * @param {?} duration
	     * @param {?} collectedStyles
	     * @param {?} errors
	     * @return {?}
	     */
	    function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	        var /** @type {?} */ values = {};
	        var /** @type {?} */ endTime = startTime + duration;
	        endKeyframe.styles.styles.forEach(function (styleData) {
	            Object.keys(styleData).forEach(function (prop) {
	                var /** @type {?} */ val = styleData[prop];
	                if (prop == 'offset')
	                    return;
	                var /** @type {?} */ resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	                var /** @type {?} */ resultEntry /** TODO #9100 */, /** @type {?} */ nextEntry /** TODO #9100 */, /** @type {?} */ value;
	                if (isPresent(resultIndex)) {
	                    resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                    value = resultEntry.value;
	                    nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	                }
	                else {
	                    // this is a flag that the runtime code uses to pass
	                    // in a value either from the state declaration styles
	                    // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                    value = FILL_STYLE_FLAG;
	                }
	                if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                    errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	                }
	                values[prop] = value;
	            });
	        });
	        return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
	    }

	    /**
	     * An interface for retrieving documents by URL that the compiler uses
	     * to load templates.
	     */
	    var ResourceLoader = (function () {
	        function ResourceLoader() {
	        }
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        ResourceLoader.prototype.get = function (url) { return null; };
	        return ResourceLoader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$6 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$6 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * Create a {\@link UrlResolver} with no package prefix.
	     * @return {?}
	     */
	    function createUrlResolverWithoutPackagePrefix() {
	        return new UrlResolver();
	    }
	    /**
	     * @return {?}
	     */
	    function createOfflineCompileUrlResolver() {
	        return new UrlResolver('.');
	    }
	    /**
	     * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	     */
	    var /** @type {?} */ DEFAULT_PACKAGE_URL_PROVIDER = {
	        provide: _angular_core.PACKAGE_ROOT_URL,
	        useValue: '/'
	    };
	    /**
	     * Used by the {\@link Compiler} when resolving HTML and CSS template URLs.
	     *
	     * This class can be overridden by the application developer to create custom behavior.
	     *
	     * See {\@link Compiler}
	     *
	     * ## Example
	     *
	     * {\@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	     *
	     * \@security When compiling templates at runtime, you must
	     * ensure that the entire template comes from a trusted source.
	     * Attacker-controlled data introduced by a template could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     */
	    var UrlResolver = (function () {
	        /**
	         * @param {?=} _packagePrefix
	         */
	        function UrlResolver(_packagePrefix) {
	            if (_packagePrefix === void 0) { _packagePrefix = null; }
	            this._packagePrefix = _packagePrefix;
	        }
	        /**
	         * Resolves the `url` given the `baseUrl`:
	         * - when the `url` is null, the `baseUrl` is returned,
	         * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	         * `baseUrl` and `url`,
	         * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	         * returned as is (ignoring the `baseUrl`)
	         * @param {?} baseUrl
	         * @param {?} url
	         * @return {?}
	         */
	        UrlResolver.prototype.resolve = function (baseUrl, url) {
	            var /** @type {?} */ resolvedUrl = url;
	            if (isPresent(baseUrl) && baseUrl.length > 0) {
	                resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	            }
	            var /** @type {?} */ resolvedParts = _split(resolvedUrl);
	            var /** @type {?} */ prefix = this._packagePrefix;
	            if (isPresent(prefix) && isPresent(resolvedParts) &&
	                resolvedParts[_ComponentIndex.Scheme] == 'package') {
	                var /** @type {?} */ path = resolvedParts[_ComponentIndex.Path];
	                prefix = prefix.replace(/\/+$/, '');
	                path = path.replace(/^\/+/, '');
	                return prefix + "/" + path;
	            }
	            return resolvedUrl;
	        };
	        /** @nocollapse */
	        UrlResolver.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	        ]; };
	        UrlResolver = __decorate$6([
	            CompilerInjectable(), 
	            __metadata$6('design:paramtypes', [String])
	        ], UrlResolver);
	        return UrlResolver;
	    }());
	    /**
	     * Extract the scheme of a URL.
	     * @param {?} url
	     * @return {?}
	     */
	    function getUrlScheme(url) {
	        var /** @type {?} */ match = _split(url);
	        return (match && match[_ComponentIndex.Scheme]) || '';
	    }
	    /**
	     * Builds a URI string from already-encoded parts.
	     *
	     * No encoding is performed.  Any component may be omitted as either null or
	     * undefined.
	     *
	     * @param {?=} opt_scheme The scheme such as 'http'.
	     * @param {?=} opt_userInfo The user name before the '\@'.
	     * @param {?=} opt_domain The domain such as 'www.google.com', already
	     *     URI-encoded.
	     * @param {?=} opt_port The port number.
	     * @param {?=} opt_path The path, already URI-encoded.  If it is not
	     *     empty, it must begin with a slash.
	     * @param {?=} opt_queryData The URI-encoded query data.
	     * @param {?=} opt_fragment The URI-encoded fragment identifier.
	     * @return {?} The fully combined URI.
	     */
	    function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	        var /** @type {?} */ out = [];
	        if (isPresent(opt_scheme)) {
	            out.push(opt_scheme + ':');
	        }
	        if (isPresent(opt_domain)) {
	            out.push('//');
	            if (isPresent(opt_userInfo)) {
	                out.push(opt_userInfo + '@');
	            }
	            out.push(opt_domain);
	            if (isPresent(opt_port)) {
	                out.push(':' + opt_port);
	            }
	        }
	        if (isPresent(opt_path)) {
	            out.push(opt_path);
	        }
	        if (isPresent(opt_queryData)) {
	            out.push('?' + opt_queryData);
	        }
	        if (isPresent(opt_fragment)) {
	            out.push('#' + opt_fragment);
	        }
	        return out.join('');
	    }
	    /**
	     * A regular expression for breaking a URI into its component parts.
	     *
	     * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	     * As the "first-match-wins" algorithm is identical to the "greedy"
	     * disambiguation method used by POSIX regular expressions, it is natural and
	     * commonplace to use a regular expression for parsing the potential five
	     * components of a URI reference.
	     *
	     * The following line is the regular expression for breaking-down a
	     * well-formed URI reference into its components.
	     *
	     * <pre>
	     * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	     *  12            3  4          5       6  7        8 9
	     * </pre>
	     *
	     * The numbers in the second line above are only to assist readability; they
	     * indicate the reference points for each subexpression (i.e., each paired
	     * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	     * For example, matching the above expression to
	     * <pre>
	     *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	     * </pre>
	     * results in the following subexpression matches:
	     * <pre>
	     *    $1 = http:
	     *    $2 = http
	     *    $3 = //www.ics.uci.edu
	     *    $4 = www.ics.uci.edu
	     *    $5 = /pub/ietf/uri/
	     *    $6 = <undefined>
	     *    $7 = <undefined>
	     *    $8 = #Related
	     *    $9 = Related
	     * </pre>
	     * where <undefined> indicates that the component is not present, as is the
	     * case for the query component in the above example. Therefore, we can
	     * determine the value of the five components as
	     * <pre>
	     *    scheme    = $2
	     *    authority = $4
	     *    path      = $5
	     *    query     = $7
	     *    fragment  = $9
	     * </pre>
	     *
	     * The regular expression has been modified slightly to expose the
	     * userInfo, domain, and port separately from the authority.
	     * The modified version yields
	     * <pre>
	     *    $1 = http              scheme
	     *    $2 = <undefined>       userInfo -\
	     *    $3 = www.ics.uci.edu   domain     | authority
	     *    $4 = <undefined>       port     -/
	     *    $5 = /pub/ietf/uri/    path
	     *    $6 = <undefined>       query without ?
	     *    $7 = Related           fragment without #
	     * </pre>
	     * @type {!RegExp}
	     * @internal
	     */
	    var /** @type {?} */ _splitRe = new RegExp('^' +
	        '(?:' +
	        '([^:/?#.]+)' +
	        // used by other URL parts such as :,
	        // ?, /, #, and .
	        ':)?' +
	        '(?://' +
	        '(?:([^/?#]*)@)?' +
	        '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	        // digits, dashes, dots, percent
	        // escapes, and unicode characters.
	        '(?::([0-9]+))?' +
	        ')?' +
	        '([^?#]+)?' +
	        '(?:\\?([^#]*))?' +
	        '(?:#(.*))?' +
	        '$');
	    var _ComponentIndex = {};
	    _ComponentIndex.Scheme = 1;
	    _ComponentIndex.UserInfo = 2;
	    _ComponentIndex.Domain = 3;
	    _ComponentIndex.Port = 4;
	    _ComponentIndex.Path = 5;
	    _ComponentIndex.QueryData = 6;
	    _ComponentIndex.Fragment = 7;
	    _ComponentIndex[_ComponentIndex.Scheme] = "Scheme";
	    _ComponentIndex[_ComponentIndex.UserInfo] = "UserInfo";
	    _ComponentIndex[_ComponentIndex.Domain] = "Domain";
	    _ComponentIndex[_ComponentIndex.Port] = "Port";
	    _ComponentIndex[_ComponentIndex.Path] = "Path";
	    _ComponentIndex[_ComponentIndex.QueryData] = "QueryData";
	    _ComponentIndex[_ComponentIndex.Fragment] = "Fragment";
	    /**
	     * Splits a URI into its component parts.
	     *
	     * Each component can be accessed via the component indices; for example:
	     * <pre>
	     * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	     * </pre>
	     *
	     * @param {?} uri The URI string to examine.
	     * @return {?} Each component still URI-encoded.
	     *     Each component that is present will contain the encoded value, whereas
	     *     components that are not present will be undefined or empty, depending
	     *     on the browser's regular expression implementation.  Never null, since
	     *     arbitrary strings may still look like path names.
	     */
	    function _split(uri) {
	        return uri.match(_splitRe);
	    }
	    /**
	     * Removes dot segments in given path component, as described in
	     * RFC 3986, section 5.2.4.
	     *
	     * @param {?} path A non-empty path component.
	     * @return {?} Path component with removed dot segments.
	     */
	    function _removeDotSegments(path) {
	        if (path == '/')
	            return '/';
	        var /** @type {?} */ leadingSlash = path[0] == '/' ? '/' : '';
	        var /** @type {?} */ trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	        var /** @type {?} */ segments = path.split('/');
	        var /** @type {?} */ out = [];
	        var /** @type {?} */ up = 0;
	        for (var /** @type {?} */ pos = 0; pos < segments.length; pos++) {
	            var /** @type {?} */ segment = segments[pos];
	            switch (segment) {
	                case '':
	                case '.':
	                    break;
	                case '..':
	                    if (out.length > 0) {
	                        out.pop();
	                    }
	                    else {
	                        up++;
	                    }
	                    break;
	                default:
	                    out.push(segment);
	            }
	        }
	        if (leadingSlash == '') {
	            while (up-- > 0) {
	                out.unshift('..');
	            }
	            if (out.length === 0)
	                out.push('.');
	        }
	        return leadingSlash + out.join('/') + trailingSlash;
	    }
	    /**
	     * Takes an array of the parts from split and canonicalizes the path part
	     * and then joins all the parts.
	     * @param {?} parts
	     * @return {?}
	     */
	    function _joinAndCanonicalizePath(parts) {
	        var /** @type {?} */ path = parts[_ComponentIndex.Path];
	        path = isBlank(path) ? '' : _removeDotSegments(path);
	        parts[_ComponentIndex.Path] = path;
	        return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	    }
	    /**
	     * Resolves a URL.
	     * @param {?} base The URL acting as the base URL.
	     * @param {?} url
	     * @return {?}
	     */
	    function _resolveUrl(base, url) {
	        var /** @type {?} */ parts = _split(encodeURI(url));
	        var /** @type {?} */ baseParts = _split(base);
	        if (isPresent(parts[_ComponentIndex.Scheme])) {
	            return _joinAndCanonicalizePath(parts);
	        }
	        else {
	            parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	        }
	        for (var /** @type {?} */ i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	            if (isBlank(parts[i])) {
	                parts[i] = baseParts[i];
	            }
	        }
	        if (parts[_ComponentIndex.Path][0] == '/') {
	            return _joinAndCanonicalizePath(parts);
	        }
	        var /** @type {?} */ path = baseParts[_ComponentIndex.Path];
	        if (isBlank(path))
	            path = '/';
	        var /** @type {?} */ index = path.lastIndexOf('/');
	        path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	        parts[_ComponentIndex.Path] = path;
	        return _joinAndCanonicalizePath(parts);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$5 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$5 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveNormalizer = (function () {
	        /**
	         * @param {?} _resourceLoader
	         * @param {?} _urlResolver
	         * @param {?} _htmlParser
	         * @param {?} _config
	         */
	        function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	            this._resourceLoader = _resourceLoader;
	            this._urlResolver = _urlResolver;
	            this._htmlParser = _htmlParser;
	            this._config = _config;
	            this._resourceLoaderCache = new Map();
	        }
	        /**
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	        /**
	         * @param {?} normalizedDirective
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	            var _this = this;
	            if (!normalizedDirective.isComponent) {
	                return;
	            }
	            this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	            normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	        };
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype._fetch = function (url) {
	            var /** @type {?} */ result = this._resourceLoaderCache.get(url);
	            if (!result) {
	                result = this._resourceLoader.get(url);
	                this._resourceLoaderCache.set(url, result);
	            }
	            return result;
	        };
	        /**
	         * @param {?} prenormData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	            var _this = this;
	            var /** @type {?} */ normalizedTemplateSync = null;
	            var /** @type {?} */ normalizedTemplateAsync;
	            if (isPresent(prenormData.template)) {
	                normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	                normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	            }
	            else if (prenormData.templateUrl) {
	                normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	            }
	            else {
	                throw new SyntaxError("No template specified for component " + stringify(prenormData.componentType));
	            }
	            if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	                // sync case
	                return new SyncAsyncResult(normalizedTemplateSync);
	            }
	            else {
	                // async case
	                return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	            }
	        };
	        /**
	         * @param {?} prenomData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	            return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
	        };
	        /**
	         * @param {?} prenomData
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	            var _this = this;
	            var /** @type {?} */ templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	            return this._fetch(templateUrl)
	                .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	        };
	        /**
	         * @param {?} prenomData
	         * @param {?} template
	         * @param {?} templateAbsUrl
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {
	            var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
	            var /** @type {?} */ rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
	            if (rootNodesAndErrors.errors.length > 0) {
	                var /** @type {?} */ errorString = rootNodesAndErrors.errors.join('\n');
	                throw new SyntaxError("Template parse errors:\n" + errorString);
	            }
	            var /** @type {?} */ templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	                styles: prenomData.styles,
	                styleUrls: prenomData.styleUrls,
	                moduleUrl: prenomData.moduleUrl
	            }));
	            var /** @type {?} */ visitor = new TemplatePreparseVisitor();
	            visitAll(visitor, rootNodesAndErrors.rootNodes);
	            var /** @type {?} */ templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	            var /** @type {?} */ encapsulation = prenomData.encapsulation;
	            if (isBlank(encapsulation)) {
	                encapsulation = this._config.defaultEncapsulation;
	            }
	            var /** @type {?} */ styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	            var /** @type {?} */ styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	            if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	                styleUrls.length === 0) {
	                encapsulation = _angular_core.ViewEncapsulation.None;
	            }
	            return new CompileTemplateMetadata({
	                encapsulation: encapsulation,
	                template: template,
	                templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	                ngContentSelectors: visitor.ngContentSelectors,
	                animations: prenomData.animations,
	                interpolation: prenomData.interpolation,
	            });
	        };
	        /**
	         * @param {?} templateMeta
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	            return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	                .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	                encapsulation: templateMeta.encapsulation,
	                template: templateMeta.template,
	                templateUrl: templateMeta.templateUrl,
	                styles: templateMeta.styles,
	                styleUrls: templateMeta.styleUrls,
	                externalStylesheets: externalStylesheets,
	                ngContentSelectors: templateMeta.ngContentSelectors,
	                animations: templateMeta.animations,
	                interpolation: templateMeta.interpolation
	            }); });
	        };
	        /**
	         * @param {?} styleUrls
	         * @param {?=} loadedStylesheets
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	            var _this = this;
	            if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	            return Promise
	                .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	                .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	                var /** @type {?} */ stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	                loadedStylesheets.set(styleUrl, stylesheet);
	                return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	            }); }))
	                .then(function (_) { return Array.from(loadedStylesheets.values()); });
	        };
	        /**
	         * @param {?} stylesheet
	         * @return {?}
	         */
	        DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	            var _this = this;
	            var /** @type {?} */ allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	                .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	            var /** @type {?} */ allStyles = stylesheet.styles.map(function (style) {
	                var /** @type {?} */ styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
	                allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	                return styleWithImports.style;
	            });
	            return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	        };
	        DirectiveNormalizer = __decorate$5([
	            CompilerInjectable(), 
	            __metadata$5('design:paramtypes', [ResourceLoader, UrlResolver, HtmlParser, CompilerConfig])
	        ], DirectiveNormalizer);
	        return DirectiveNormalizer;
	    }());
	    var TemplatePreparseVisitor = (function () {
	        function TemplatePreparseVisitor() {
	            this.ngContentSelectors = [];
	            this.styles = [];
	            this.styleUrls = [];
	            this.ngNonBindableStackCount = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	            var /** @type {?} */ preparsedElement = preparseElement(ast);
	            switch (preparsedElement.type) {
	                case PreparsedElementType.NG_CONTENT:
	                    if (this.ngNonBindableStackCount === 0) {
	                        this.ngContentSelectors.push(preparsedElement.selectAttr);
	                    }
	                    break;
	                case PreparsedElementType.STYLE:
	                    var /** @type {?} */ textContent_1 = '';
	                    ast.children.forEach(function (child) {
	                        if (child instanceof Text) {
	                            textContent_1 += child.value;
	                        }
	                    });
	                    this.styles.push(textContent_1);
	                    break;
	                case PreparsedElementType.STYLESHEET:
	                    this.styleUrls.push(preparsedElement.hrefAttr);
	                    break;
	                default:
	                    break;
	            }
	            if (preparsedElement.nonBindable) {
	                this.ngNonBindableStackCount++;
	            }
	            visitAll(this, ast.children);
	            if (preparsedElement.nonBindable) {
	                this.ngNonBindableStackCount--;
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	        return TemplatePreparseVisitor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$7 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$7 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function DirectiveResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        DirectiveResolver.prototype.isDirective = function (type) {
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	        };
	        /**
	         * Return {\@link Directive} for a given `Type`.
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            if (typeMetadata) {
	                var /** @type {?} */ metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);
	                if (metadata) {
	                    var /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);
	                    return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	                }
	            }
	            if (throwIfNotFound) {
	                throw new Error("No Directive annotation found on " + stringify(type));
	            }
	            return null;
	        };
	        /**
	         * @param {?} dm
	         * @param {?} propertyMetadata
	         * @param {?} directiveType
	         * @return {?}
	         */
	        DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	            var /** @type {?} */ inputs = [];
	            var /** @type {?} */ outputs = [];
	            var /** @type {?} */ host = {};
	            var /** @type {?} */ queries = {};
	            Object.keys(propertyMetadata).forEach(function (propName) {
	                var /** @type {?} */ input = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Input; });
	                if (input) {
	                    if (input.bindingPropertyName) {
	                        inputs.push(propName + ": " + input.bindingPropertyName);
	                    }
	                    else {
	                        inputs.push(propName);
	                    }
	                }
	                var /** @type {?} */ output = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Output; });
	                if (output) {
	                    if (output.bindingPropertyName) {
	                        outputs.push(propName + ": " + output.bindingPropertyName);
	                    }
	                    else {
	                        outputs.push(propName);
	                    }
	                }
	                var /** @type {?} */ hostBindings = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostBinding; });
	                hostBindings.forEach(function (hostBinding) {
	                    if (hostBinding.hostPropertyName) {
	                        var /** @type {?} */ startWith = hostBinding.hostPropertyName[0];
	                        if (startWith === '(') {
	                            throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                        }
	                        else if (startWith === '[') {
	                            throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                        }
	                        host[("[" + hostBinding.hostPropertyName + "]")] = propName;
	                    }
	                    else {
	                        host[("[" + propName + "]")] = propName;
	                    }
	                });
	                var /** @type {?} */ hostListeners = propertyMetadata[propName].filter(function (a) { return a && a instanceof _angular_core.HostListener; });
	                hostListeners.forEach(function (hostListener) {
	                    var /** @type {?} */ args = hostListener.args || [];
	                    host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
	                });
	                var /** @type {?} */ query = ListWrapper.findLast(propertyMetadata[propName], function (a) { return a instanceof _angular_core.Query; });
	                if (query) {
	                    queries[propName] = query;
	                }
	            });
	            return this._merge(dm, inputs, outputs, host, queries, directiveType);
	        };
	        /**
	         * @param {?} def
	         * @return {?}
	         */
	        DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	        /**
	         * @param {?} bindings
	         * @return {?}
	         */
	        DirectiveResolver.prototype._dedupeBindings = function (bindings) {
	            var /** @type {?} */ names = new Set();
	            var /** @type {?} */ reversedResult = [];
	            // go last to first to allow later entries to overwrite previous entries
	            for (var /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {
	                var /** @type {?} */ binding = bindings[i];
	                var /** @type {?} */ name_1 = this._extractPublicName(binding);
	                if (!names.has(name_1)) {
	                    names.add(name_1);
	                    reversedResult.push(binding);
	                }
	            }
	            return reversedResult.reverse();
	        };
	        /**
	         * @param {?} directive
	         * @param {?} inputs
	         * @param {?} outputs
	         * @param {?} host
	         * @param {?} queries
	         * @param {?} directiveType
	         * @return {?}
	         */
	        DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	            var /** @type {?} */ mergedInputs = this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);
	            var /** @type {?} */ mergedOutputs = this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);
	            var /** @type {?} */ mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
	            var /** @type {?} */ mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
	            if (directive instanceof _angular_core.Component) {
	                return new _angular_core.Component({
	                    selector: directive.selector,
	                    inputs: mergedInputs,
	                    outputs: mergedOutputs,
	                    host: mergedHost,
	                    exportAs: directive.exportAs,
	                    moduleId: directive.moduleId,
	                    queries: mergedQueries,
	                    changeDetection: directive.changeDetection,
	                    providers: directive.providers,
	                    viewProviders: directive.viewProviders,
	                    entryComponents: directive.entryComponents,
	                    template: directive.template,
	                    templateUrl: directive.templateUrl,
	                    styles: directive.styles,
	                    styleUrls: directive.styleUrls,
	                    encapsulation: directive.encapsulation,
	                    animations: directive.animations,
	                    interpolation: directive.interpolation
	                });
	            }
	            else {
	                return new _angular_core.Directive({
	                    selector: directive.selector,
	                    inputs: mergedInputs,
	                    outputs: mergedOutputs,
	                    host: mergedHost,
	                    exportAs: directive.exportAs,
	                    queries: mergedQueries,
	                    providers: directive.providers
	                });
	            }
	        };
	        DirectiveResolver = __decorate$7([
	            CompilerInjectable(), 
	            __metadata$7('design:paramtypes', [ReflectorReader])
	        ], DirectiveResolver);
	        return DirectiveResolver;
	    }());
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function isDirectiveMetadata(type) {
	        return type instanceof _angular_core.Directive;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$20 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var TypeModifier = {};
	    TypeModifier.Const = 0;
	    TypeModifier[TypeModifier.Const] = "Const";
	    /**
	     * @abstract
	     */
	    var Type$1 = (function () {
	        /**
	         * @param {?=} modifiers
	         */
	        function Type(modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Type.prototype.visitType = function (visitor, context) { };
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return Type;
	    }());
	    var BuiltinTypeName = {};
	    BuiltinTypeName.Dynamic = 0;
	    BuiltinTypeName.Bool = 1;
	    BuiltinTypeName.String = 2;
	    BuiltinTypeName.Int = 3;
	    BuiltinTypeName.Number = 4;
	    BuiltinTypeName.Function = 5;
	    BuiltinTypeName.Null = 6;
	    BuiltinTypeName[BuiltinTypeName.Dynamic] = "Dynamic";
	    BuiltinTypeName[BuiltinTypeName.Bool] = "Bool";
	    BuiltinTypeName[BuiltinTypeName.String] = "String";
	    BuiltinTypeName[BuiltinTypeName.Int] = "Int";
	    BuiltinTypeName[BuiltinTypeName.Number] = "Number";
	    BuiltinTypeName[BuiltinTypeName.Function] = "Function";
	    BuiltinTypeName[BuiltinTypeName.Null] = "Null";
	    var BuiltinType = (function (_super) {
	        __extends$20(BuiltinType, _super);
	        /**
	         * @param {?} name
	         * @param {?=} modifiers
	         */
	        function BuiltinType(name, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BuiltinType.prototype.visitType = function (visitor, context) {
	            return visitor.visitBuiltintType(this, context);
	        };
	        return BuiltinType;
	    }(Type$1));
	    var ExpressionType = (function (_super) {
	        __extends$20(ExpressionType, _super);
	        /**
	         * @param {?} value
	         * @param {?=} typeParams
	         * @param {?=} modifiers
	         */
	        function ExpressionType(value, typeParams, modifiers) {
	            if (typeParams === void 0) { typeParams = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.value = value;
	            this.typeParams = typeParams;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionType.prototype.visitType = function (visitor, context) {
	            return visitor.visitExpressionType(this, context);
	        };
	        return ExpressionType;
	    }(Type$1));
	    var ArrayType = (function (_super) {
	        __extends$20(ArrayType, _super);
	        /**
	         * @param {?} of
	         * @param {?=} modifiers
	         */
	        function ArrayType(of, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.of = of;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ArrayType.prototype.visitType = function (visitor, context) {
	            return visitor.visitArrayType(this, context);
	        };
	        return ArrayType;
	    }(Type$1));
	    var MapType = (function (_super) {
	        __extends$20(MapType, _super);
	        /**
	         * @param {?} valueType
	         * @param {?=} modifiers
	         */
	        function MapType(valueType, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.valueType = valueType;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	        return MapType;
	    }(Type$1));
	    var /** @type {?} */ DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	    var /** @type {?} */ BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	    var /** @type {?} */ INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	    var /** @type {?} */ NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	    var /** @type {?} */ STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	    var /** @type {?} */ FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	    var /** @type {?} */ NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
	    var BinaryOperator = {};
	    BinaryOperator.Equals = 0;
	    BinaryOperator.NotEquals = 1;
	    BinaryOperator.Identical = 2;
	    BinaryOperator.NotIdentical = 3;
	    BinaryOperator.Minus = 4;
	    BinaryOperator.Plus = 5;
	    BinaryOperator.Divide = 6;
	    BinaryOperator.Multiply = 7;
	    BinaryOperator.Modulo = 8;
	    BinaryOperator.And = 9;
	    BinaryOperator.Or = 10;
	    BinaryOperator.Lower = 11;
	    BinaryOperator.LowerEquals = 12;
	    BinaryOperator.Bigger = 13;
	    BinaryOperator.BiggerEquals = 14;
	    BinaryOperator[BinaryOperator.Equals] = "Equals";
	    BinaryOperator[BinaryOperator.NotEquals] = "NotEquals";
	    BinaryOperator[BinaryOperator.Identical] = "Identical";
	    BinaryOperator[BinaryOperator.NotIdentical] = "NotIdentical";
	    BinaryOperator[BinaryOperator.Minus] = "Minus";
	    BinaryOperator[BinaryOperator.Plus] = "Plus";
	    BinaryOperator[BinaryOperator.Divide] = "Divide";
	    BinaryOperator[BinaryOperator.Multiply] = "Multiply";
	    BinaryOperator[BinaryOperator.Modulo] = "Modulo";
	    BinaryOperator[BinaryOperator.And] = "And";
	    BinaryOperator[BinaryOperator.Or] = "Or";
	    BinaryOperator[BinaryOperator.Lower] = "Lower";
	    BinaryOperator[BinaryOperator.LowerEquals] = "LowerEquals";
	    BinaryOperator[BinaryOperator.Bigger] = "Bigger";
	    BinaryOperator[BinaryOperator.BiggerEquals] = "BiggerEquals";
	    /**
	     * @abstract
	     */
	    var Expression = (function () {
	        /**
	         * @param {?} type
	         */
	        function Expression(type) {
	            this.type = type;
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Expression.prototype.visitExpression = function (visitor, context) { };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	        /**
	         * @param {?} index
	         * @param {?=} type
	         * @return {?}
	         */
	        Expression.prototype.key = function (index, type) {
	            if (type === void 0) { type = null; }
	            return new ReadKeyExpr(this, index, type);
	        };
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @return {?}
	         */
	        Expression.prototype.callMethod = function (name, params) {
	            return new InvokeMethodExpr(this, name, params);
	        };
	        /**
	         * @param {?} params
	         * @return {?}
	         */
	        Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	        /**
	         * @param {?} params
	         * @param {?=} type
	         * @return {?}
	         */
	        Expression.prototype.instantiate = function (params, type) {
	            if (type === void 0) { type = null; }
	            return new InstantiateExpr(this, params, type);
	        };
	        /**
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         * @return {?}
	         */
	        Expression.prototype.conditional = function (trueCase, falseCase) {
	            if (falseCase === void 0) { falseCase = null; }
	            return new ConditionalExpr(this, trueCase, falseCase);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.equals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.notEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.identical = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.notIdentical = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.minus = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.plus = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.divide = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.multiply = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.modulo = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.and = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.or = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.lower = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.lowerEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.bigger = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	        };
	        /**
	         * @param {?} rhs
	         * @return {?}
	         */
	        Expression.prototype.biggerEquals = function (rhs) {
	            return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	        };
	        /**
	         * @return {?}
	         */
	        Expression.prototype.isBlank = function () {
	            // Note: We use equals by purpose here to compare to null and undefined in JS.
	            // We use the typed null to allow strictNullChecks to narrow types.
	            return this.equals(TYPED_NULL_EXPR);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	        /**
	         * @return {?}
	         */
	        Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	        return Expression;
	    }());
	    var BuiltinVar = {};
	    BuiltinVar.This = 0;
	    BuiltinVar.Super = 1;
	    BuiltinVar.CatchError = 2;
	    BuiltinVar.CatchStack = 3;
	    BuiltinVar[BuiltinVar.This] = "This";
	    BuiltinVar[BuiltinVar.Super] = "Super";
	    BuiltinVar[BuiltinVar.CatchError] = "CatchError";
	    BuiltinVar[BuiltinVar.CatchStack] = "CatchStack";
	    var ReadVarExpr = (function (_super) {
	        __extends$20(ReadVarExpr, _super);
	        /**
	         * @param {?} name
	         * @param {?=} type
	         */
	        function ReadVarExpr(name, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            if (typeof name === 'string') {
	                this.name = name;
	                this.builtin = null;
	            }
	            else {
	                this.name = null;
	                this.builtin = name;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadVarExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	        return ReadVarExpr;
	    }(Expression));
	    var WriteVarExpr = (function (_super) {
	        __extends$20(WriteVarExpr, _super);
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WriteVarExpr(name, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWriteVarExpr(this, context);
	        };
	        /**
	         * @param {?=} type
	         * @param {?=} modifiers
	         * @return {?}
	         */
	        WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            return new DeclareVarStmt(this.name, this.value, type, modifiers);
	        };
	        return WriteVarExpr;
	    }(Expression));
	    var WriteKeyExpr = (function (_super) {
	        __extends$20(WriteKeyExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} index
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WriteKeyExpr(receiver, index, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.receiver = receiver;
	            this.index = index;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWriteKeyExpr(this, context);
	        };
	        return WriteKeyExpr;
	    }(Expression));
	    var WritePropExpr = (function (_super) {
	        __extends$20(WritePropExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         */
	        function WritePropExpr(receiver, name, value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || value.type);
	            this.receiver = receiver;
	            this.name = name;
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        WritePropExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitWritePropExpr(this, context);
	        };
	        return WritePropExpr;
	    }(Expression));
	    var BuiltinMethod = {};
	    BuiltinMethod.ConcatArray = 0;
	    BuiltinMethod.SubscribeObservable = 1;
	    BuiltinMethod.Bind = 2;
	    BuiltinMethod[BuiltinMethod.ConcatArray] = "ConcatArray";
	    BuiltinMethod[BuiltinMethod.SubscribeObservable] = "SubscribeObservable";
	    BuiltinMethod[BuiltinMethod.Bind] = "Bind";
	    var InvokeMethodExpr = (function (_super) {
	        __extends$20(InvokeMethodExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} method
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InvokeMethodExpr(receiver, method, args, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.args = args;
	            if (typeof method === 'string') {
	                this.name = method;
	                this.builtin = null;
	            }
	            else {
	                this.name = null;
	                this.builtin = method;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInvokeMethodExpr(this, context);
	        };
	        return InvokeMethodExpr;
	    }(Expression));
	    var InvokeFunctionExpr = (function (_super) {
	        __extends$20(InvokeFunctionExpr, _super);
	        /**
	         * @param {?} fn
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InvokeFunctionExpr(fn, args, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.fn = fn;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInvokeFunctionExpr(this, context);
	        };
	        return InvokeFunctionExpr;
	    }(Expression));
	    var InstantiateExpr = (function (_super) {
	        __extends$20(InstantiateExpr, _super);
	        /**
	         * @param {?} classExpr
	         * @param {?} args
	         * @param {?=} type
	         */
	        function InstantiateExpr(classExpr, args, type) {
	            _super.call(this, type);
	            this.classExpr = classExpr;
	            this.args = args;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitInstantiateExpr(this, context);
	        };
	        return InstantiateExpr;
	    }(Expression));
	    var LiteralExpr = (function (_super) {
	        __extends$20(LiteralExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?=} type
	         */
	        function LiteralExpr(value, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralExpr(this, context);
	        };
	        return LiteralExpr;
	    }(Expression));
	    var ExternalExpr = (function (_super) {
	        __extends$20(ExternalExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?=} type
	         * @param {?=} typeParams
	         */
	        function ExternalExpr(value, type, typeParams) {
	            if (type === void 0) { type = null; }
	            if (typeParams === void 0) { typeParams = null; }
	            _super.call(this, type);
	            this.value = value;
	            this.typeParams = typeParams;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExternalExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitExternalExpr(this, context);
	        };
	        return ExternalExpr;
	    }(Expression));
	    var ConditionalExpr = (function (_super) {
	        __extends$20(ConditionalExpr, _super);
	        /**
	         * @param {?} condition
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         * @param {?=} type
	         */
	        function ConditionalExpr(condition, trueCase, falseCase, type) {
	            if (falseCase === void 0) { falseCase = null; }
	            if (type === void 0) { type = null; }
	            _super.call(this, type || trueCase.type);
	            this.condition = condition;
	            this.falseCase = falseCase;
	            this.trueCase = trueCase;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitConditionalExpr(this, context);
	        };
	        return ConditionalExpr;
	    }(Expression));
	    var NotExpr = (function (_super) {
	        __extends$20(NotExpr, _super);
	        /**
	         * @param {?} condition
	         */
	        function NotExpr(condition) {
	            _super.call(this, BOOL_TYPE);
	            this.condition = condition;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        NotExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitNotExpr(this, context);
	        };
	        return NotExpr;
	    }(Expression));
	    var CastExpr = (function (_super) {
	        __extends$20(CastExpr, _super);
	        /**
	         * @param {?} value
	         * @param {?} type
	         */
	        function CastExpr(value, type) {
	            _super.call(this, type);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        CastExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitCastExpr(this, context);
	        };
	        return CastExpr;
	    }(Expression));
	    var FnParam = (function () {
	        /**
	         * @param {?} name
	         * @param {?=} type
	         */
	        function FnParam(name, type) {
	            if (type === void 0) { type = null; }
	            this.name = name;
	            this.type = type;
	        }
	        return FnParam;
	    }());
	    var FunctionExpr = (function (_super) {
	        __extends$20(FunctionExpr, _super);
	        /**
	         * @param {?} params
	         * @param {?} statements
	         * @param {?=} type
	         */
	        function FunctionExpr(params, statements, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.params = params;
	            this.statements = statements;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        FunctionExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitFunctionExpr(this, context);
	        };
	        /**
	         * @param {?} name
	         * @param {?=} modifiers
	         * @return {?}
	         */
	        FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	        };
	        return FunctionExpr;
	    }(Expression));
	    var BinaryOperatorExpr = (function (_super) {
	        __extends$20(BinaryOperatorExpr, _super);
	        /**
	         * @param {?} operator
	         * @param {?} lhs
	         * @param {?} rhs
	         * @param {?=} type
	         */
	        function BinaryOperatorExpr(operator, lhs, rhs, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type || lhs.type);
	            this.operator = operator;
	            this.rhs = rhs;
	            this.lhs = lhs;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitBinaryOperatorExpr(this, context);
	        };
	        return BinaryOperatorExpr;
	    }(Expression));
	    var ReadPropExpr = (function (_super) {
	        __extends$20(ReadPropExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} name
	         * @param {?=} type
	         */
	        function ReadPropExpr(receiver, name, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.name = name;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadPropExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadPropExpr.prototype.set = function (value) {
	            return new WritePropExpr(this.receiver, this.name, value);
	        };
	        return ReadPropExpr;
	    }(Expression));
	    var ReadKeyExpr = (function (_super) {
	        __extends$20(ReadKeyExpr, _super);
	        /**
	         * @param {?} receiver
	         * @param {?} index
	         * @param {?=} type
	         */
	        function ReadKeyExpr(receiver, index, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.receiver = receiver;
	            this.index = index;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitReadKeyExpr(this, context);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ReadKeyExpr.prototype.set = function (value) {
	            return new WriteKeyExpr(this.receiver, this.index, value);
	        };
	        return ReadKeyExpr;
	    }(Expression));
	    var LiteralArrayExpr = (function (_super) {
	        __extends$20(LiteralArrayExpr, _super);
	        /**
	         * @param {?} entries
	         * @param {?=} type
	         */
	        function LiteralArrayExpr(entries, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.entries = entries;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralArrayExpr(this, context);
	        };
	        return LiteralArrayExpr;
	    }(Expression));
	    var LiteralMapEntry = (function () {
	        /**
	         * @param {?} key
	         * @param {?} value
	         * @param {?=} quoted
	         */
	        function LiteralMapEntry(key, value, quoted) {
	            if (quoted === void 0) { quoted = false; }
	            this.key = key;
	            this.value = value;
	            this.quoted = quoted;
	        }
	        return LiteralMapEntry;
	    }());
	    var LiteralMapExpr = (function (_super) {
	        __extends$20(LiteralMapExpr, _super);
	        /**
	         * @param {?} entries
	         * @param {?=} type
	         */
	        function LiteralMapExpr(entries, type) {
	            if (type === void 0) { type = null; }
	            _super.call(this, type);
	            this.entries = entries;
	            this.valueType = null;
	            if (isPresent(type)) {
	                this.valueType = type.valueType;
	            }
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	            return visitor.visitLiteralMapExpr(this, context);
	        };
	        return LiteralMapExpr;
	    }(Expression));
	    var /** @type {?} */ THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	    var /** @type {?} */ SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	    var /** @type {?} */ CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	    var /** @type {?} */ CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	    var /** @type {?} */ NULL_EXPR = new LiteralExpr(null, null);
	    var /** @type {?} */ TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
	    var StmtModifier = {};
	    StmtModifier.Final = 0;
	    StmtModifier.Private = 1;
	    StmtModifier[StmtModifier.Final] = "Final";
	    StmtModifier[StmtModifier.Private] = "Private";
	    /**
	     * @abstract
	     */
	    var Statement = (function () {
	        /**
	         * @param {?=} modifiers
	         */
	        function Statement(modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @abstract
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        Statement.prototype.visitStatement = function (visitor, context) { };
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return Statement;
	    }());
	    var DeclareVarStmt = (function (_super) {
	        __extends$20(DeclareVarStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function DeclareVarStmt(name, value, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.value = value;
	            this.type = type || value.type;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareVarStmt(this, context);
	        };
	        return DeclareVarStmt;
	    }(Statement));
	    var DeclareFunctionStmt = (function (_super) {
	        __extends$20(DeclareFunctionStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @param {?} statements
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.params = params;
	            this.statements = statements;
	            this.type = type;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareFunctionStmt(this, context);
	        };
	        return DeclareFunctionStmt;
	    }(Statement));
	    var ExpressionStatement = (function (_super) {
	        __extends$20(ExpressionStatement, _super);
	        /**
	         * @param {?} expr
	         */
	        function ExpressionStatement(expr) {
	            _super.call(this);
	            this.expr = expr;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitExpressionStmt(this, context);
	        };
	        return ExpressionStatement;
	    }(Statement));
	    var ReturnStatement = (function (_super) {
	        __extends$20(ReturnStatement, _super);
	        /**
	         * @param {?} value
	         */
	        function ReturnStatement(value) {
	            _super.call(this);
	            this.value = value;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ReturnStatement.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitReturnStmt(this, context);
	        };
	        return ReturnStatement;
	    }(Statement));
	    var AbstractClassPart = (function () {
	        /**
	         * @param {?=} type
	         * @param {?} modifiers
	         */
	        function AbstractClassPart(type, modifiers) {
	            if (type === void 0) { type = null; }
	            this.type = type;
	            this.modifiers = modifiers;
	            if (!modifiers) {
	                this.modifiers = [];
	            }
	        }
	        /**
	         * @param {?} modifier
	         * @return {?}
	         */
	        AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	        return AbstractClassPart;
	    }());
	    var ClassField = (function (_super) {
	        __extends$20(ClassField, _super);
	        /**
	         * @param {?} name
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassField(name, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	        }
	        return ClassField;
	    }(AbstractClassPart));
	    var ClassMethod = (function (_super) {
	        __extends$20(ClassMethod, _super);
	        /**
	         * @param {?} name
	         * @param {?} params
	         * @param {?} body
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassMethod(name, params, body, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	            this.params = params;
	            this.body = body;
	        }
	        return ClassMethod;
	    }(AbstractClassPart));
	    var ClassGetter = (function (_super) {
	        __extends$20(ClassGetter, _super);
	        /**
	         * @param {?} name
	         * @param {?} body
	         * @param {?=} type
	         * @param {?=} modifiers
	         */
	        function ClassGetter(name, body, type, modifiers) {
	            if (type === void 0) { type = null; }
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, type, modifiers);
	            this.name = name;
	            this.body = body;
	        }
	        return ClassGetter;
	    }(AbstractClassPart));
	    var ClassStmt = (function (_super) {
	        __extends$20(ClassStmt, _super);
	        /**
	         * @param {?} name
	         * @param {?} parent
	         * @param {?} fields
	         * @param {?} getters
	         * @param {?} constructorMethod
	         * @param {?} methods
	         * @param {?=} modifiers
	         */
	        function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	            if (modifiers === void 0) { modifiers = null; }
	            _super.call(this, modifiers);
	            this.name = name;
	            this.parent = parent;
	            this.fields = fields;
	            this.getters = getters;
	            this.constructorMethod = constructorMethod;
	            this.methods = methods;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ClassStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitDeclareClassStmt(this, context);
	        };
	        return ClassStmt;
	    }(Statement));
	    var IfStmt = (function (_super) {
	        __extends$20(IfStmt, _super);
	        /**
	         * @param {?} condition
	         * @param {?} trueCase
	         * @param {?=} falseCase
	         */
	        function IfStmt(condition, trueCase, falseCase) {
	            if (falseCase === void 0) { falseCase = []; }
	            _super.call(this);
	            this.condition = condition;
	            this.trueCase = trueCase;
	            this.falseCase = falseCase;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        IfStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitIfStmt(this, context);
	        };
	        return IfStmt;
	    }(Statement));
	    var CommentStmt = (function (_super) {
	        __extends$20(CommentStmt, _super);
	        /**
	         * @param {?} comment
	         */
	        function CommentStmt(comment) {
	            _super.call(this);
	            this.comment = comment;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        CommentStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitCommentStmt(this, context);
	        };
	        return CommentStmt;
	    }(Statement));
	    var TryCatchStmt = (function (_super) {
	        __extends$20(TryCatchStmt, _super);
	        /**
	         * @param {?} bodyStmts
	         * @param {?} catchStmts
	         */
	        function TryCatchStmt(bodyStmts, catchStmts) {
	            _super.call(this);
	            this.bodyStmts = bodyStmts;
	            this.catchStmts = catchStmts;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitTryCatchStmt(this, context);
	        };
	        return TryCatchStmt;
	    }(Statement));
	    var ThrowStmt = (function (_super) {
	        __extends$20(ThrowStmt, _super);
	        /**
	         * @param {?} error
	         */
	        function ThrowStmt(error) {
	            _super.call(this);
	            this.error = error;
	        }
	        /**
	         * @param {?} visitor
	         * @param {?} context
	         * @return {?}
	         */
	        ThrowStmt.prototype.visitStatement = function (visitor, context) {
	            return visitor.visitThrowStmt(this, context);
	        };
	        return ThrowStmt;
	    }(Statement));
	    var ExpressionTransformer = (function () {
	        function ExpressionTransformer() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	            return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	            return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	            return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	            var /** @type {?} */ method = ast.builtin || ast.name;
	            return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	            return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	            return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	            return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	            return new NotExpr(ast.condition.visitExpression(this, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	            return new CastExpr(ast.value.visitExpression(this, context), context);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	            // Don't descend into nested functions
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	            return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	            return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	            return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	            return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ entries = ast.entries.map(function (entry) { return new LiteralMapEntry(entry.key, entry.value.visitExpression(_this, context), entry.quoted); });
	            return new LiteralMapExpr(entries);
	        };
	        /**
	         * @param {?} exprs
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	            var _this = this;
	            return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	            return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	            return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	            return new ReturnStatement(stmt.value.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	            return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	            return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	            return new ThrowStmt(stmt.error.visitExpression(this, context));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	        /**
	         * @param {?} stmts
	         * @param {?} context
	         * @return {?}
	         */
	        ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	            var _this = this;
	            return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	        };
	        return ExpressionTransformer;
	    }());
	    var RecursiveExpressionVisitor = (function () {
	        function RecursiveExpressionVisitor() {
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	            expr.receiver.visitExpression(this, context);
	            expr.index.visitExpression(this, context);
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	            expr.receiver.visitExpression(this, context);
	            expr.value.visitExpression(this, context);
	            return expr;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	            ast.fn.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	            ast.classExpr.visitExpression(this, context);
	            this.visitAllExpressions(ast.args, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	            ast.condition.visitExpression(this, context);
	            ast.trueCase.visitExpression(this, context);
	            ast.falseCase.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	            ast.condition.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	            ast.value.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	            ast.lhs.visitExpression(this, context);
	            ast.rhs.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	            ast.receiver.visitExpression(this, context);
	            ast.index.visitExpression(this, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	            this.visitAllExpressions(ast.entries, context);
	            return ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	            var _this = this;
	            ast.entries.forEach(function (entry) { return entry.value.visitExpression(_this, context); });
	            return ast;
	        };
	        /**
	         * @param {?} exprs
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	            var _this = this;
	            exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	            stmt.value.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	            stmt.expr.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	            stmt.value.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	            // Don't descend into nested functions
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	            stmt.condition.visitExpression(this, context);
	            this.visitAllStatements(stmt.trueCase, context);
	            this.visitAllStatements(stmt.falseCase, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	            this.visitAllStatements(stmt.bodyStmts, context);
	            this.visitAllStatements(stmt.catchStmts, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	            stmt.error.visitExpression(this, context);
	            return stmt;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	        /**
	         * @param {?} stmts
	         * @param {?} context
	         * @return {?}
	         */
	        RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	            var _this = this;
	            stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	        };
	        return RecursiveExpressionVisitor;
	    }());
	    /**
	     * @param {?} varName
	     * @param {?} newValue
	     * @param {?} expression
	     * @return {?}
	     */
	    function replaceVarInExpression(varName, newValue, expression) {
	        var /** @type {?} */ transformer = new _ReplaceVariableTransformer(varName, newValue);
	        return expression.visitExpression(transformer, null);
	    }
	    var _ReplaceVariableTransformer = (function (_super) {
	        __extends$20(_ReplaceVariableTransformer, _super);
	        /**
	         * @param {?} _varName
	         * @param {?} _newValue
	         */
	        function _ReplaceVariableTransformer(_varName, _newValue) {
	            _super.call(this);
	            this._varName = _varName;
	            this._newValue = _newValue;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	            return ast.name == this._varName ? this._newValue : ast;
	        };
	        return _ReplaceVariableTransformer;
	    }(ExpressionTransformer));
	    /**
	     * @param {?} stmts
	     * @return {?}
	     */
	    function findReadVarNames(stmts) {
	        var /** @type {?} */ finder = new _VariableFinder();
	        finder.visitAllStatements(stmts, null);
	        return finder.varNames;
	    }
	    var _VariableFinder = (function (_super) {
	        __extends$20(_VariableFinder, _super);
	        function _VariableFinder() {
	            _super.apply(this, arguments);
	            this.varNames = new Set();
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	            this.varNames.add(ast.name);
	            return null;
	        };
	        return _VariableFinder;
	    }(RecursiveExpressionVisitor));
	    /**
	     * @param {?} name
	     * @param {?=} type
	     * @return {?}
	     */
	    function variable(name, type) {
	        if (type === void 0) { type = null; }
	        return new ReadVarExpr(name, type);
	    }
	    /**
	     * @param {?} id
	     * @param {?=} typeParams
	     * @return {?}
	     */
	    function importExpr(id, typeParams) {
	        if (typeParams === void 0) { typeParams = null; }
	        return new ExternalExpr(id, null, typeParams);
	    }
	    /**
	     * @param {?} id
	     * @param {?=} typeParams
	     * @param {?=} typeModifiers
	     * @return {?}
	     */
	    function importType(id, typeParams, typeModifiers) {
	        if (typeParams === void 0) { typeParams = null; }
	        if (typeModifiers === void 0) { typeModifiers = null; }
	        return isPresent(id) ? expressionType(importExpr(id), typeParams, typeModifiers) : null;
	    }
	    /**
	     * @param {?} expr
	     * @param {?=} typeParams
	     * @param {?=} typeModifiers
	     * @return {?}
	     */
	    function expressionType(expr, typeParams, typeModifiers) {
	        if (typeParams === void 0) { typeParams = null; }
	        if (typeModifiers === void 0) { typeModifiers = null; }
	        return isPresent(expr) ? new ExpressionType(expr, typeParams, typeModifiers) : null;
	    }
	    /**
	     * @param {?} values
	     * @param {?=} type
	     * @return {?}
	     */
	    function literalArr(values, type) {
	        if (type === void 0) { type = null; }
	        return new LiteralArrayExpr(values, type);
	    }
	    /**
	     * @param {?} values
	     * @param {?=} type
	     * @param {?=} quoted
	     * @return {?}
	     */
	    function literalMap(values, type, quoted) {
	        if (type === void 0) { type = null; }
	        if (quoted === void 0) { quoted = false; }
	        return new LiteralMapExpr(values.map(function (entry) { return new LiteralMapEntry(entry[0], entry[1], quoted); }), type);
	    }
	    /**
	     * @param {?} expr
	     * @return {?}
	     */
	    function not(expr) {
	        return new NotExpr(expr);
	    }
	    /**
	     * @param {?} params
	     * @param {?} body
	     * @param {?=} type
	     * @return {?}
	     */
	    function fn(params, body, type) {
	        if (type === void 0) { type = null; }
	        return new FunctionExpr(params, body, type);
	    }
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @return {?}
	     */
	    function literal(value, type) {
	        if (type === void 0) { type = null; }
	        return new LiteralExpr(value, type);
	    }

	    var CheckBindingField = (function () {
	        /**
	         * @param {?} expression
	         * @param {?} bindingId
	         */
	        function CheckBindingField(expression, bindingId) {
	            this.expression = expression;
	            this.bindingId = bindingId;
	        }
	        return CheckBindingField;
	    }());
	    /**
	     * @param {?} builder
	     * @return {?}
	     */
	    function createCheckBindingField(builder) {
	        var /** @type {?} */ bindingId = "" + builder.fields.length;
	        var /** @type {?} */ fieldExpr = createBindFieldExpr(bindingId);
	        // private is fine here as no child view will reference the cached value...
	        builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
	        builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name)
	            .set(importExpr(createIdentifier(Identifiers.UNINITIALIZED)))
	            .toStmt());
	        return new CheckBindingField(fieldExpr, bindingId);
	    }
	    /**
	     * @param {?} evalResult
	     * @param {?} fieldExpr
	     * @param {?} throwOnChangeVar
	     * @param {?} actions
	     * @return {?}
	     */
	    function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
	        var /** @type {?} */ condition = importExpr(createIdentifier(Identifiers.checkBinding)).callFn([
	            throwOnChangeVar, fieldExpr, evalResult.currValExpr
	        ]);
	        if (evalResult.forceUpdate) {
	            condition = evalResult.forceUpdate.or(condition);
	        }
	        return evalResult.stmts.concat([
	            new IfStmt(condition, actions.concat([(THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt())
	            ]))
	        ]);
	    }
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createBindFieldExpr(bindingId) {
	        return THIS_EXPR.prop("_expr_" + bindingId);
	    }

	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function createDiTokenExpression(token) {
	        if (isPresent(token.value)) {
	            return literal(token.value);
	        }
	        else {
	            return importExpr(token.identifier);
	        }
	    }
	    /**
	     * @param {?} values
	     * @return {?}
	     */
	    function createInlineArray(values) {
	        if (values.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
	        }
	        var /** @type {?} */ log2 = Math.log(values.length) / Math.log(2);
	        var /** @type {?} */ index = Math.ceil(log2);
	        var /** @type {?} */ identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :
	            Identifiers.InlineArrayDynamic;
	        var /** @type {?} */ identifier = createIdentifier(identifierSpec);
	        return importExpr(identifier).instantiate([(literal(values.length))
	        ].concat(values));
	    }
	    /**
	     * @param {?} fn
	     * @param {?} argCount
	     * @param {?} pureProxyProp
	     * @param {?} builder
	     * @return {?}
	     */
	    function createPureProxy(fn, argCount, pureProxyProp, builder) {
	        builder.fields.push(new ClassField(pureProxyProp.name, null));
	        var /** @type {?} */ pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
	        if (!pureProxyId) {
	            throw new Error("Unsupported number of argument for pure functions: " + argCount);
	        }
	        builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)
	            .set(importExpr(createIdentifier(pureProxyId)).callFn([fn]))
	            .toStmt());
	    }
	    /**
	     * @param {?} enumType
	     * @param {?} enumValue
	     * @return {?}
	     */
	    function createEnumExpression(enumType, enumValue) {
	        var /** @type {?} */ enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue; });
	        if (!enumName) {
	            throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
	        }
	        return importExpr(createEnumIdentifier(enumType, enumName));
	    }

	    var /** @type {?} */ VAL_UNWRAPPER_VAR = variable("valUnwrapper");
	    var EventHandlerVars = (function () {
	        function EventHandlerVars() {
	        }
	        EventHandlerVars.event = variable('$event');
	        return EventHandlerVars;
	    }());
	    var ConvertPropertyBindingResult = (function () {
	        /**
	         * @param {?} stmts
	         * @param {?} currValExpr
	         * @param {?} forceUpdate
	         */
	        function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
	            this.stmts = stmts;
	            this.currValExpr = currValExpr;
	            this.forceUpdate = forceUpdate;
	        }
	        return ConvertPropertyBindingResult;
	    }());
	    /**
	     * Converts the given expression AST into an executable output AST, assuming the expression is
	     * used in a property binding.
	     * @param {?} builder
	     * @param {?} nameResolver
	     * @param {?} implicitReceiver
	     * @param {?} expression
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
	        var /** @type {?} */ currValExpr = createCurrValueExpr(bindingId);
	        var /** @type {?} */ stmts = [];
	        if (!nameResolver) {
	            nameResolver = new DefaultNameResolver();
	        }
	        var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
	        var /** @type {?} */ outputExpr = expression.visit(visitor, _Mode.Expression);
	        if (!outputExpr) {
	            // e.g. an empty expression was given
	            return null;
	        }
	        if (visitor.temporaryCount) {
	            for (var /** @type {?} */ i = 0; i < visitor.temporaryCount; i++) {
	                stmts.push(temporaryDeclaration(bindingId, i));
	            }
	        }
	        if (visitor.needsValueUnwrapper) {
	            var /** @type {?} */ initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
	            stmts.push(initValueUnwrapperStmt);
	        }
	        stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	        if (visitor.needsValueUnwrapper) {
	            return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
	        }
	        else {
	            return new ConvertPropertyBindingResult(stmts, currValExpr, null);
	        }
	    }
	    var ConvertActionBindingResult = (function () {
	        /**
	         * @param {?} stmts
	         * @param {?} preventDefault
	         */
	        function ConvertActionBindingResult(stmts, preventDefault) {
	            this.stmts = stmts;
	            this.preventDefault = preventDefault;
	        }
	        return ConvertActionBindingResult;
	    }());
	    /**
	     * Converts the given expression AST into an executable output AST, assuming the expression is
	     * used in an action binding (e.g. an event handler).
	     * @param {?} builder
	     * @param {?} nameResolver
	     * @param {?} implicitReceiver
	     * @param {?} action
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
	        if (!nameResolver) {
	            nameResolver = new DefaultNameResolver();
	        }
	        var /** @type {?} */ visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
	        var /** @type {?} */ actionStmts = [];
	        flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
	        prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	        var /** @type {?} */ lastIndex = actionStmts.length - 1;
	        var /** @type {?} */ preventDefaultVar = null;
	        if (lastIndex >= 0) {
	            var /** @type {?} */ lastStatement = actionStmts[lastIndex];
	            var /** @type {?} */ returnExpr = convertStmtIntoExpression(lastStatement);
	            if (returnExpr) {
	                // Note: We need to cast the result of the method call to dynamic,
	                // as it might be a void method!
	                preventDefaultVar = createPreventDefaultVar(bindingId);
	                actionStmts[lastIndex] =
	                    preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                        .toDeclStmt(null, [StmtModifier.Final]);
	            }
	        }
	        return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	    }
	    /**
	     * Creates variables that are shared by multiple calls to `convertActionBinding` /
	     * `convertPropertyBinding`
	     * @param {?} stmts
	     * @return {?}
	     */
	    function createSharedBindingVariablesIfNeeded(stmts) {
	        var /** @type {?} */ unwrapperStmts = [];
	        var /** @type {?} */ readVars = findReadVarNames(stmts);
	        if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
	            unwrapperStmts.push(VAL_UNWRAPPER_VAR
	                .set(importExpr(createIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
	                .toDeclStmt(null, [StmtModifier.Final]));
	        }
	        return unwrapperStmts;
	    }
	    /**
	     * @param {?} bindingId
	     * @param {?} temporaryNumber
	     * @return {?}
	     */
	    function temporaryName(bindingId, temporaryNumber) {
	        return "tmp_" + bindingId + "_" + temporaryNumber;
	    }
	    /**
	     * @param {?} bindingId
	     * @param {?} temporaryNumber
	     * @return {?}
	     */
	    function temporaryDeclaration(bindingId, temporaryNumber) {
	        return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	    }
	    /**
	     * @param {?} temporaryCount
	     * @param {?} bindingId
	     * @param {?} statements
	     * @return {?}
	     */
	    function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	        for (var /** @type {?} */ i = temporaryCount - 1; i >= 0; i--) {
	            statements.unshift(temporaryDeclaration(bindingId, i));
	        }
	    }
	    var _Mode = {};
	    _Mode.Statement = 0;
	    _Mode.Expression = 1;
	    _Mode[_Mode.Statement] = "Statement";
	    _Mode[_Mode.Expression] = "Expression";
	    /**
	     * @param {?} mode
	     * @param {?} ast
	     * @return {?}
	     */
	    function ensureStatementMode(mode, ast) {
	        if (mode !== _Mode.Statement) {
	            throw new Error("Expected a statement, but saw " + ast);
	        }
	    }
	    /**
	     * @param {?} mode
	     * @param {?} ast
	     * @return {?}
	     */
	    function ensureExpressionMode(mode, ast) {
	        if (mode !== _Mode.Expression) {
	            throw new Error("Expected an expression, but saw " + ast);
	        }
	    }
	    /**
	     * @param {?} mode
	     * @param {?} expr
	     * @return {?}
	     */
	    function convertToStatementIfNeeded(mode, expr) {
	        if (mode === _Mode.Statement) {
	            return expr.toStmt();
	        }
	        else {
	            return expr;
	        }
	    }
	    var _AstToIrVisitor = (function () {
	        /**
	         * @param {?} _builder
	         * @param {?} _nameResolver
	         * @param {?} _implicitReceiver
	         * @param {?} _valueUnwrapper
	         * @param {?} bindingId
	         * @param {?} isAction
	         */
	        function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
	            this._builder = _builder;
	            this._nameResolver = _nameResolver;
	            this._implicitReceiver = _implicitReceiver;
	            this._valueUnwrapper = _valueUnwrapper;
	            this.bindingId = bindingId;
	            this.isAction = isAction;
	            this._nodeMap = new Map();
	            this._resultMap = new Map();
	            this._currentTemporary = 0;
	            this.needsValueUnwrapper = false;
	            this.temporaryCount = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	            var /** @type {?} */ op;
	            switch (ast.operation) {
	                case '+':
	                    op = BinaryOperator.Plus;
	                    break;
	                case '-':
	                    op = BinaryOperator.Minus;
	                    break;
	                case '*':
	                    op = BinaryOperator.Multiply;
	                    break;
	                case '/':
	                    op = BinaryOperator.Divide;
	                    break;
	                case '%':
	                    op = BinaryOperator.Modulo;
	                    break;
	                case '&&':
	                    op = BinaryOperator.And;
	                    break;
	                case '||':
	                    op = BinaryOperator.Or;
	                    break;
	                case '==':
	                    op = BinaryOperator.Equals;
	                    break;
	                case '!=':
	                    op = BinaryOperator.NotEquals;
	                    break;
	                case '===':
	                    op = BinaryOperator.Identical;
	                    break;
	                case '!==':
	                    op = BinaryOperator.NotIdentical;
	                    break;
	                case '<':
	                    op = BinaryOperator.Lower;
	                    break;
	                case '>':
	                    op = BinaryOperator.Bigger;
	                    break;
	                case '<=':
	                    op = BinaryOperator.LowerEquals;
	                    break;
	                case '>=':
	                    op = BinaryOperator.BiggerEquals;
	                    break;
	                default:
	                    throw new Error("Unsupported operation " + ast.operation);
	            }
	            return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	            ensureStatementMode(mode, ast);
	            return this.visitAll(ast.expressions, mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	            var /** @type {?} */ value = this.visit(ast.condition, _Mode.Expression);
	            return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	            var /** @type {?} */ input = this.visit(ast.exp, _Mode.Expression);
	            var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	            var /** @type {?} */ value = this._nameResolver.callPipe(ast.name, input, args);
	            if (!value) {
	                throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
	            }
	            this.needsValueUnwrapper = true;
	            return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	            ensureExpressionMode(mode, ast);
	            return this._implicitReceiver;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	            ensureExpressionMode(mode, ast);
	            var /** @type {?} */ args = [literal(ast.expressions.length)];
	            for (var /** @type {?} */ i = 0; i < ast.strings.length - 1; i++) {
	                args.push(literal(ast.strings[i]));
	                args.push(this.visit(ast.expressions[i], _Mode.Expression));
	            }
	            args.push(literal(ast.strings[ast.strings.length - 1]));
	            return ast.expressions.length <= 9 ?
	                importExpr(createIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	                importExpr(createIdentifier(Identifiers.interpolate)).callFn([
	                    args[0], literalArr(args.slice(1))
	                ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	            var /** @type {?} */ obj = this.visit(ast.obj, _Mode.Expression);
	            var /** @type {?} */ key = this.visit(ast.key, _Mode.Expression);
	            var /** @type {?} */ value = this.visit(ast.value, _Mode.Expression);
	            return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	            var /** @type {?} */ parts = this.visitAll(ast.expressions, mode);
	            var /** @type {?} */ literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
	            return convertToStatementIfNeeded(mode, literalArr$$);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	            var /** @type {?} */ parts = [];
	            for (var /** @type {?} */ i = 0; i < ast.keys.length; i++) {
	                parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
	            }
	            var /** @type {?} */ literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
	            return convertToStatementIfNeeded(mode, literalMap$$);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, literal(ast.value));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype._getLocal = function (name) {
	            if (this.isAction && name == EventHandlerVars.event.name) {
	                return EventHandlerVars.event;
	            }
	            return this._nameResolver.getLocal(name);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                var /** @type {?} */ args = this.visitAll(ast.args, _Mode.Expression);
	                var /** @type {?} */ result = null;
	                var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	                if (receiver === this._implicitReceiver) {
	                    var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                    if (varExpr) {
	                        result = varExpr.callFn(args);
	                    }
	                }
	                if (isBlank(result)) {
	                    result = receiver.callMethod(ast.name, args);
	                }
	                return convertToStatementIfNeeded(mode, result);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	            return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	            var /** @type {?} */ leftMostSafe = this.leftMostSafeNode(ast);
	            if (leftMostSafe) {
	                return this.convertSafeAccess(ast, leftMostSafe, mode);
	            }
	            else {
	                var /** @type {?} */ result = null;
	                var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	                if (receiver === this._implicitReceiver) {
	                    result = this._getLocal(ast.name);
	                }
	                if (isBlank(result)) {
	                    result = receiver.prop(ast.name);
	                }
	                return convertToStatementIfNeeded(mode, result);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	            var /** @type {?} */ receiver = this.visit(ast.receiver, _Mode.Expression);
	            if (receiver === this._implicitReceiver) {
	                var /** @type {?} */ varExpr = this._getLocal(ast.name);
	                if (varExpr) {
	                    throw new Error('Cannot assign to a reference or variable!');
	                }
	            }
	            return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	            return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	        };
	        /**
	         * @param {?} asts
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	            var _this = this;
	            return asts.map(function (ast) { return _this.visit(ast, mode); });
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	            throw new Error('Quotes are not supported for evaluation!');
	        };
	        /**
	         * @param {?} ast
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.visit = function (ast, mode) {
	            var /** @type {?} */ result = this._resultMap.get(ast);
	            if (result)
	                return result;
	            return (this._nodeMap.get(ast) || ast).visit(this, mode);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} leftMostSafe
	         * @param {?} mode
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	            // If the expression contains a safe access node on the left it needs to be converted to
	            // an expression that guards the access to the member by checking the receiver for blank. As
	            // execution proceeds from left to right, the left most part of the expression must be guarded
	            // first but, because member access is left associative, the right side of the expression is at
	            // the top of the AST. The desired result requires lifting a copy of the the left part of the
	            // expression up to test it for blank before generating the unguarded version.
	            // Consider, for example the following expression: a?.b.c?.d.e
	            // This results in the ast:
	            //         .
	            //        / \
	            //       ?.   e
	            //      /  \
	            //     .    d
	            //    / \
	            //   ?.  c
	            //  /  \
	            // a    b
	            // The following tree should be generated:
	            //
	            //        /---- ? ----\
	            //       /      |      \
	            //     a   /--- ? ---\  null
	            //        /     |     \
	            //       .      .     null
	            //      / \    / \
	            //     .  c   .   e
	            //    / \    / \
	            //   a   b  ,   d
	            //         / \
	            //        .   c
	            //       / \
	            //      a   b
	            //
	            // Notice that the first guard condition is the left hand of the left most safe access node
	            // which comes in as leftMostSafe to this routine.
	            var /** @type {?} */ guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	            var /** @type {?} */ temporary;
	            if (this.needsTemporary(leftMostSafe.receiver)) {
	                // If the expression has method calls or pipes then we need to save the result into a
	                // temporary variable to avoid calling stateful or impure code more than once.
	                temporary = this.allocateTemporary();
	                // Preserve the result in the temporary variable
	                guardedExpression = temporary.set(guardedExpression);
	                // Ensure all further references to the guarded expression refer to the temporary instead.
	                this._resultMap.set(leftMostSafe.receiver, temporary);
	            }
	            var /** @type {?} */ condition = guardedExpression.isBlank();
	            // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	            // leftMostNode with its unguarded version in the call to `this.visit()`.
	            if (leftMostSafe instanceof SafeMethodCall) {
	                this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	            }
	            else {
	                this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	            }
	            // Recursively convert the node now without the guarded member access.
	            var /** @type {?} */ access = this.visit(ast, _Mode.Expression);
	            // Remove the mapping. This is not strictly required as the converter only traverses each node
	            // once but is safer if the conversion is changed to traverse the nodes more than once.
	            this._nodeMap.delete(leftMostSafe);
	            // If we allcoated a temporary, release it.
	            if (temporary) {
	                this.releaseTemporary(temporary);
	            }
	            // Produce the conditional
	            return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	            var _this = this;
	            var /** @type {?} */ visit = function (visitor, ast) {
	                return (_this._nodeMap.get(ast) || ast).visit(visitor);
	            };
	            return ast.visit({
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitBinary: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitChain: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitConditional: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitFunctionCall: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitImplicitReceiver: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitInterpolation: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedWrite: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralArray: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralMap: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralPrimitive: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPipe: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPrefixNot: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyWrite: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitQuote: function (ast) { return null; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafePropertyRead: function (ast) {
	                    return visit(this, ast.receiver) || ast;
	                }
	            });
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	            var _this = this;
	            var /** @type {?} */ visit = function (visitor, ast) {
	                return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	            };
	            var /** @type {?} */ visitSome = function (visitor, ast) {
	                return ast.some(function (ast) { return visit(visitor, ast); });
	            };
	            return ast.visit({
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitChain: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitConditional: function (ast) {
	                    return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                        visit(this, ast.falseExp);
	                },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitFunctionCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitImplicitReceiver: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedRead: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitKeyedWrite: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralArray: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralMap: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitLiteralPrimitive: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitMethodCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPipe: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyRead: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitPropertyWrite: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitQuote: function (ast) { return false; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafeMethodCall: function (ast) { return true; },
	                /**
	                 * @param {?} ast
	                 * @return {?}
	                 */
	                visitSafePropertyRead: function (ast) { return false; }
	            });
	        };
	        /**
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.allocateTemporary = function () {
	            var /** @type {?} */ tempNumber = this._currentTemporary++;
	            this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	            return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	        };
	        /**
	         * @param {?} temporary
	         * @return {?}
	         */
	        _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	            this._currentTemporary--;
	            if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	                throw new Error("Temporary " + temporary.name + " released out of order");
	            }
	        };
	        return _AstToIrVisitor;
	    }());
	    /**
	     * @param {?} arg
	     * @param {?} output
	     * @return {?}
	     */
	    function flattenStatements(arg, output) {
	        if (Array.isArray(arg)) {
	            ((arg)).forEach(function (entry) { return flattenStatements(entry, output); });
	        }
	        else {
	            output.push(arg);
	        }
	    }
	    /**
	     * @param {?} builder
	     * @param {?} values
	     * @return {?}
	     */
	    function createCachedLiteralArray(builder, values) {
	        if (values.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_ARRAY));
	        }
	        var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
	        var /** @type {?} */ proxyParams = [];
	        var /** @type {?} */ proxyReturnEntries = [];
	        for (var /** @type {?} */ i = 0; i < values.length; i++) {
	            var /** @type {?} */ paramName = "p" + i;
	            proxyParams.push(new FnParam(paramName));
	            proxyReturnEntries.push(variable(paramName));
	        }
	        createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
	        return proxyExpr.callFn(values);
	    }
	    /**
	     * @param {?} builder
	     * @param {?} entries
	     * @return {?}
	     */
	    function createCachedLiteralMap(builder, entries) {
	        if (entries.length === 0) {
	            return importExpr(createIdentifier(Identifiers.EMPTY_MAP));
	        }
	        var /** @type {?} */ proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
	        var /** @type {?} */ proxyParams = [];
	        var /** @type {?} */ proxyReturnEntries = [];
	        var /** @type {?} */ values = [];
	        for (var /** @type {?} */ i = 0; i < entries.length; i++) {
	            var /** @type {?} */ paramName = "p" + i;
	            proxyParams.push(new FnParam(paramName));
	            proxyReturnEntries.push([entries[i][0], variable(paramName)]);
	            values.push(/** @type {?} */ (entries[i][1]));
	        }
	        createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
	        return proxyExpr.callFn(values);
	    }
	    var DefaultNameResolver = (function () {
	        function DefaultNameResolver() {
	        }
	        /**
	         * @param {?} name
	         * @param {?} input
	         * @param {?} args
	         * @return {?}
	         */
	        DefaultNameResolver.prototype.callPipe = function (name, input, args) { return null; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DefaultNameResolver.prototype.getLocal = function (name) { return null; };
	        return DefaultNameResolver;
	    }());
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createCurrValueExpr(bindingId) {
	        return variable("currVal_" + bindingId); // fix syntax highlighting: `
	    }
	    /**
	     * @param {?} bindingId
	     * @return {?}
	     */
	    function createPreventDefaultVar(bindingId) {
	        return variable("pd_" + bindingId);
	    }
	    /**
	     * @param {?} stmt
	     * @return {?}
	     */
	    function convertStmtIntoExpression(stmt) {
	        if (stmt instanceof ExpressionStatement) {
	            return stmt.expr;
	        }
	        else if (stmt instanceof ReturnStatement) {
	            return stmt.value;
	        }
	        return null;
	    }

	    /**
	     * @param {?} view
	     * @param {?} boundProp
	     * @param {?} renderElement
	     * @param {?} renderValue
	     * @param {?} logBindingUpdate
	     * @param {?=} securityContextExpression
	     * @return {?}
	     */
	    function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
	        var /** @type {?} */ updateStmts = [];
	        var /** @type {?} */ renderer = view.prop('renderer');
	        renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
	        switch (boundProp.type) {
	            case PropertyBindingType.Property:
	                if (logBindingUpdate) {
	                    updateStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfo))
	                        .callFn([renderer, renderElement, literal(boundProp.name), renderValue])
	                        .toStmt());
	                }
	                updateStmts.push(renderer
	                    .callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Attribute:
	                renderValue =
	                    renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
	                updateStmts.push(renderer
	                    .callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Class:
	                updateStmts.push(renderer
	                    .callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Style:
	                var /** @type {?} */ strValue = renderValue.callMethod('toString', []);
	                if (isPresent(boundProp.unit)) {
	                    strValue = strValue.plus(literal(boundProp.unit));
	                }
	                renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
	                updateStmts.push(renderer
	                    .callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue])
	                    .toStmt());
	                break;
	            case PropertyBindingType.Animation:
	                throw new Error('Illegal state: Should not come here!');
	        }
	        return updateStmts;
	    }
	    /**
	     * @param {?} view
	     * @param {?} boundProp
	     * @param {?} renderValue
	     * @param {?=} securityContextExpression
	     * @return {?}
	     */
	    function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
	        if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
	            return renderValue; // No sanitization needed.
	        }
	        if (!boundProp.needsRuntimeSecurityContext) {
	            securityContextExpression =
	                createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
	        }
	        if (!securityContextExpression) {
	            throw new Error("internal error, no SecurityContext given " + boundProp.name);
	        }
	        var /** @type {?} */ ctx = view.prop('viewUtils').prop('sanitizer');
	        var /** @type {?} */ args = [securityContextExpression, renderValue];
	        return ctx.callMethod('sanitize', args);
	    }
	    /**
	     * @param {?} view
	     * @param {?} componentView
	     * @param {?} boundProp
	     * @param {?} boundOutputs
	     * @param {?} eventListener
	     * @param {?} renderElement
	     * @param {?} renderValue
	     * @param {?} lastRenderValue
	     * @return {?}
	     */
	    function triggerAnimation(view, componentView, boundProp, boundOutputs, eventListener, renderElement, renderValue, lastRenderValue) {
	        var /** @type {?} */ detachStmts = [];
	        var /** @type {?} */ updateStmts = [];
	        var /** @type {?} */ animationName = boundProp.name;
	        var /** @type {?} */ animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
	        // it's important to normalize the void value as `void` explicitly
	        // so that the styles data can be obtained from the stringmap
	        var /** @type {?} */ emptyStateValue = literal(EMPTY_STATE);
	        var /** @type {?} */ unitializedValue = importExpr(createIdentifier(Identifiers.UNINITIALIZED));
	        var /** @type {?} */ animationTransitionVar = variable('animationTransition_' + animationName);
	        updateStmts.push(animationTransitionVar
	            .set(animationFnExpr.callFn([
	            view, renderElement,
	            lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),
	            renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)
	        ]))
	            .toDeclStmt());
	        detachStmts.push(animationTransitionVar
	            .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))
	            .toDeclStmt());
	        var /** @type {?} */ registerStmts = [];
	        var /** @type {?} */ animationStartMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'start'; });
	        if (animationStartMethodExists) {
	            registerStmts.push(animationTransitionVar
	                .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])
	                .toStmt());
	        }
	        var /** @type {?} */ animationDoneMethodExists = boundOutputs.find(function (event) { return event.isAnimation && event.name == animationName && event.phase == 'done'; });
	        if (animationDoneMethodExists) {
	            registerStmts.push(animationTransitionVar
	                .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])
	                .toStmt());
	        }
	        updateStmts.push.apply(updateStmts, registerStmts);
	        detachStmts.push.apply(detachStmts, registerStmts);
	        return { updateStmts: updateStmts, detachStmts: detachStmts };
	    }

	    /**
	     * Create a new class stmts based on the given data.
	     * @param {?} config
	     * @return {?}
	     */
	    function createClassStmt(config) {
	        var /** @type {?} */ parentArgs = config.parentArgs || [];
	        var /** @type {?} */ superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	        var /** @type {?} */ builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	        var /** @type {?} */ ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	        return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
	    }
	    /**
	     * @param {?} builders
	     * @return {?}
	     */
	    function concatClassBuilderParts(builders) {
	        return {
	            fields: (_a = []).concat.apply(_a, builders.map(function (builder) { return builder.fields || []; })),
	            methods: (_b = []).concat.apply(_b, builders.map(function (builder) { return builder.methods || []; })),
	            getters: (_c = []).concat.apply(_c, builders.map(function (builder) { return builder.getters || []; })),
	            ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) { return builder.ctorStmts || []; })),
	        };
	        var _a, _b, _c, _d;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$8 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$8 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var DirectiveWrapperCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} dirWrapperClassVar
	         */
	        function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
	            this.statements = statements;
	            this.dirWrapperClassVar = dirWrapperClassVar;
	        }
	        return DirectiveWrapperCompileResult;
	    }());
	    var /** @type {?} */ CONTEXT_FIELD_NAME = 'context';
	    var /** @type {?} */ CHANGES_FIELD_NAME = '_changes';
	    var /** @type {?} */ CHANGED_FIELD_NAME = '_changed';
	    var /** @type {?} */ EVENT_HANDLER_FIELD_NAME = '_eventHandler';
	    var /** @type {?} */ CURR_VALUE_VAR = variable('currValue');
	    var /** @type {?} */ THROW_ON_CHANGE_VAR = variable('throwOnChange');
	    var /** @type {?} */ FORCE_UPDATE_VAR = variable('forceUpdate');
	    var /** @type {?} */ VIEW_VAR = variable('view');
	    var /** @type {?} */ COMPONENT_VIEW_VAR = variable('componentView');
	    var /** @type {?} */ RENDER_EL_VAR = variable('el');
	    var /** @type {?} */ EVENT_NAME_VAR = variable('eventName');
	    var /** @type {?} */ RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
	    /**
	     * We generate directive wrappers to prevent code bloat when a directive is used.
	     * A directive wrapper encapsulates
	     * the dirty checking for `\@Input`, the handling of `\@HostListener` / `\@HostBinding`
	     * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
	     *
	     * So far, only `\@Input` and the lifecycle hooks have been implemented.
	     */
	    var DirectiveWrapperCompiler = (function () {
	        /**
	         * @param {?} compilerConfig
	         * @param {?} _exprParser
	         * @param {?} _schemaRegistry
	         * @param {?} _console
	         */
	        function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
	            this.compilerConfig = compilerConfig;
	            this._exprParser = _exprParser;
	            this._schemaRegistry = _schemaRegistry;
	            this._console = _console;
	        }
	        /**
	         * @param {?} id
	         * @return {?}
	         */
	        DirectiveWrapperCompiler.dirWrapperClassName = function (id) {
	            return "Wrapper_" + identifierName(id);
	        };
	        /**
	         * @param {?} dirMeta
	         * @return {?}
	         */
	        DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {
	            var /** @type {?} */ hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
	            reportParseErrors(hostParseResult.errors, this._console);
	            var /** @type {?} */ builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
	            Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {
	                addCheckInputMethod(inputFieldName, builder);
	            });
	            addNgDoCheckMethod(builder);
	            addCheckHostMethod(hostParseResult.hostProps, hostParseResult.hostListeners, builder);
	            addHandleEventMethod(hostParseResult.hostListeners, builder);
	            addSubscribeMethod(dirMeta, builder);
	            var /** @type {?} */ classStmt = builder.build();
	            return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
	        };
	        DirectiveWrapperCompiler = __decorate$8([
	            CompilerInjectable(), 
	            __metadata$8('design:paramtypes', [CompilerConfig, Parser, ElementSchemaRegistry, Console])
	        ], DirectiveWrapperCompiler);
	        return DirectiveWrapperCompiler;
	    }());
	    var DirectiveWrapperBuilder = (function () {
	        /**
	         * @param {?} compilerConfig
	         * @param {?} dirMeta
	         */
	        function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
	            this.compilerConfig = compilerConfig;
	            this.dirMeta = dirMeta;
	            this.fields = [];
	            this.getters = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this.detachStmts = [];
	            this.destroyStmts = [];
	            var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
	            this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 ||
	                this.compilerConfig.logBindingUpdate;
	            this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
	            this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
	            this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
	            this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
	            if (this.ngOnDestroy) {
	                this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
	            }
	        }
	        /**
	         * @return {?}
	         */
	        DirectiveWrapperBuilder.prototype.build = function () {
	            var /** @type {?} */ dirDepParamNames = [];
	            for (var /** @type {?} */ i = 0; i < this.dirMeta.type.diDeps.length; i++) {
	                dirDepParamNames.push("p" + i);
	            }
	            var /** @type {?} */ methods = [
	                new ClassMethod('ngOnDetach', [
	                    new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                    new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                    new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	                ], this.detachStmts),
	                new ClassMethod('ngOnDestroy', [], this.destroyStmts),
	            ];
	            var /** @type {?} */ fields = [
	                new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),
	                new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),
	                new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),
	            ];
	            var /** @type {?} */ ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
	            if (this.genChanges) {
	                fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
	                ctorStmts.push(RESET_CHANGES_STMT);
	            }
	            ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                .set(importExpr(this.dirMeta.type)
	                .instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName); })))
	                .toStmt());
	            return createClassStmt({
	                name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
	                ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE); }),
	                builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this]
	            });
	        };
	        return DirectiveWrapperBuilder;
	    }());
	    /**
	     * @param {?} builder
	     * @return {?}
	     */
	    function addNgDoCheckMethod(builder) {
	        var /** @type {?} */ changedVar = variable('changed');
	        var /** @type {?} */ stmts = [
	            changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),
	            THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
	        ];
	        var /** @type {?} */ lifecycleStmts = [];
	        if (builder.genChanges) {
	            var /** @type {?} */ onChangesStmts = [];
	            if (builder.ngOnChanges) {
	                onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                    .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                    .toStmt());
	            }
	            if (builder.compilerConfig.logBindingUpdate) {
	                onChangesStmts.push(importExpr(createIdentifier(Identifiers.setBindingDebugInfoForChanges))
	                    .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                    .toStmt());
	            }
	            onChangesStmts.push(RESET_CHANGES_STMT);
	            lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
	        }
	        if (builder.ngOnInit) {
	            lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
	        }
	        if (builder.ngDoCheck) {
	            lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
	        }
	        if (lifecycleStmts.length > 0) {
	            stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
	        }
	        stmts.push(new ReturnStatement(changedVar));
	        builder.methods.push(new ClassMethod('ngDoCheck', [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	        ], stmts, BOOL_TYPE));
	    }
	    /**
	     * @param {?} input
	     * @param {?} builder
	     * @return {?}
	     */
	    function addCheckInputMethod(input, builder) {
	        var /** @type {?} */ field = createCheckBindingField(builder);
	        var /** @type {?} */ onChangeStatements = [
	            THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),
	            THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),
	        ];
	        if (builder.genChanges) {
	            onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME)
	                .key(literal(input))
	                .set(importExpr(createIdentifier(Identifiers.SimpleChange))
	                .instantiate([field.expression, CURR_VALUE_VAR]))
	                .toStmt());
	        }
	        var /** @type {?} */ methodBody = createCheckBindingStmt({ currValExpr: CURR_VALUE_VAR, forceUpdate: FORCE_UPDATE_VAR, stmts: [] }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
	        builder.methods.push(new ClassMethod("check_" + input, [
	            new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	            new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE),
	        ], methodBody));
	    }
	    /**
	     * @param {?} hostProps
	     * @param {?} hostEvents
	     * @param {?} builder
	     * @return {?}
	     */
	    function addCheckHostMethod(hostProps, hostEvents, builder) {
	        var /** @type {?} */ stmts = [];
	        var /** @type {?} */ methodParams = [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(COMPONENT_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	            new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	        ];
	        hostProps.forEach(function (hostProp, hostPropIdx) {
	            var /** @type {?} */ field = createCheckBindingField(builder);
	            var /** @type {?} */ evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
	            if (!evalResult) {
	                return;
	            }
	            var /** @type {?} */ securityContextExpr;
	            if (hostProp.needsRuntimeSecurityContext) {
	                securityContextExpr = variable("secCtx_" + methodParams.length);
	                methodParams.push(new FnParam(securityContextExpr.name, importType(createIdentifier(Identifiers.SecurityContext))));
	            }
	            var /** @type {?} */ checkBindingStmts;
	            if (hostProp.isAnimation) {
	                var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, hostEvents, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)
	                    .or(importExpr(createIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                checkBindingStmts = updateStmts;
	                (_b = builder.detachStmts).push.apply(_b, detachStmts);
	            }
	            else {
	                checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
	            }
	            stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
	            var _b;
	        });
	        builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
	    }
	    /**
	     * @param {?} hostListeners
	     * @param {?} builder
	     * @return {?}
	     */
	    function addHandleEventMethod(hostListeners, builder) {
	        var /** @type {?} */ resultVar = variable("result");
	        var /** @type {?} */ actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	        hostListeners.forEach(function (hostListener, eventIdx) {
	            var /** @type {?} */ evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
	            var /** @type {?} */ trueStmts = evalResult.stmts;
	            if (evalResult.preventDefault) {
	                trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	            }
	            // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	            actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
	        });
	        actionStmts.push(new ReturnStatement(resultVar));
	        builder.methods.push(new ClassMethod('handleEvent', [
	            new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),
	            new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	        ], actionStmts, BOOL_TYPE));
	    }
	    /**
	     * @param {?} dirMeta
	     * @param {?} builder
	     * @return {?}
	     */
	    function addSubscribeMethod(dirMeta, builder) {
	        var /** @type {?} */ methodParams = [
	            new FnParam(VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)
	        ];
	        var /** @type {?} */ stmts = [
	            THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()
	        ];
	        Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {
	            var /** @type {?} */ eventName = dirMeta.outputs[emitterPropName];
	            var /** @type {?} */ paramName = "emit" + emitterIdx;
	            methodParams.push(new FnParam(paramName, BOOL_TYPE));
	            var /** @type {?} */ subscriptionFieldName = "subscription" + emitterIdx;
	            builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
	            stmts.push(new IfStmt(variable(paramName), [
	                THIS_EXPR.prop(subscriptionFieldName)
	                    .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                    .prop(emitterPropName)
	                    .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)
	                        .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))
	                    .toStmt()
	            ]));
	            builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)
	                .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))
	                .toStmt());
	        });
	        builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
	    }
	    var ParseResult = (function () {
	        /**
	         * @param {?} hostProps
	         * @param {?} hostListeners
	         * @param {?} errors
	         */
	        function ParseResult(hostProps, hostListeners, errors) {
	            this.hostProps = hostProps;
	            this.hostListeners = hostListeners;
	            this.errors = errors;
	        }
	        return ParseResult;
	    }());
	    /**
	     * @param {?} dirMeta
	     * @param {?} exprParser
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
	        var /** @type {?} */ errors = [];
	        var /** @type {?} */ parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
	        var /** @type {?} */ moduleUrl = identifierModuleUrl(dirMeta.type);
	        var /** @type {?} */ sourceFileName = moduleUrl ?
	            "in Directive " + identifierName(dirMeta.type) + " in " + moduleUrl :
	            "in Directive " + identifierName(dirMeta.type);
	        var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	        var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	        var /** @type {?} */ parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
	        var /** @type {?} */ parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
	        return new ParseResult(parsedHostProps, parsedHostListeners, errors);
	    }
	    /**
	     * @param {?} parseErrors
	     * @param {?} console
	     * @return {?}
	     */
	    function reportParseErrors(parseErrors, console) {
	        var /** @type {?} */ warnings = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.WARNING; });
	        var /** @type {?} */ errors = parseErrors.filter(function (error) { return error.level === ParseErrorLevel.FATAL; });
	        if (warnings.length > 0) {
	            this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
	        }
	        if (errors.length > 0) {
	            throw new Error("Directive parse errors:\n" + errors.join('\n'));
	        }
	    }
	    var DirectiveWrapperExpressions = (function () {
	        function DirectiveWrapperExpressions() {
	        }
	        /**
	         * @param {?} dir
	         * @param {?} depsExpr
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.create = function (dir, depsExpr) {
	            return importExpr(dir).instantiate(depsExpr, importType(dir));
	        };
	        /**
	         * @param {?} dirWrapper
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.context = function (dirWrapper) {
	            return dirWrapper.prop(CONTEXT_FIELD_NAME);
	        };
	        /**
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} renderElement
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) {
	            return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
	        };
	        /**
	         * @param {?} hostProps
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} componentView
	         * @param {?} renderElement
	         * @param {?} throwOnChange
	         * @param {?} runtimeSecurityContexts
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
	            if (hostProps.length) {
	                return [dirWrapper
	                        .callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts))
	                        .toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} hostProps
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} componentView
	         * @param {?} renderEl
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {
	            if (hostProps.some(function (prop) { return prop.isAnimation; })) {
	                return [dirWrapper
	                        .callMethod('ngOnDetach', [
	                        view,
	                        componentView,
	                        renderEl,
	                    ])
	                        .toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} dir
	         * @param {?} dirWrapper
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {
	            if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 ||
	                Object.keys(dir.outputs).length > 0) {
	                return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} hostProps
	         * @param {?} usedEvents
	         * @param {?} dirWrapper
	         * @param {?} view
	         * @param {?} eventListener
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
	            var /** @type {?} */ needsSubscribe = false;
	            var /** @type {?} */ eventFlags = [];
	            Object.keys(dirMeta.outputs).forEach(function (propName) {
	                var /** @type {?} */ eventName = dirMeta.outputs[propName];
	                var /** @type {?} */ eventUsed = usedEvents.indexOf(eventName) > -1;
	                needsSubscribe = needsSubscribe || eventUsed;
	                eventFlags.push(literal(eventUsed));
	            });
	            hostProps.forEach(function (hostProp) {
	                if (hostProp.isAnimation && usedEvents.length > 0) {
	                    needsSubscribe = true;
	                }
	            });
	            if (needsSubscribe) {
	                return [
	                    dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()
	                ];
	            }
	            else {
	                return [];
	            }
	        };
	        /**
	         * @param {?} hostEvents
	         * @param {?} dirWrapper
	         * @param {?} eventName
	         * @param {?} event
	         * @return {?}
	         */
	        DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {
	            return dirWrapper.callMethod('handleEvent', [eventName, event]);
	        };
	        return DirectiveWrapperExpressions;
	    }());

	    /**
	     * @param {?} hook
	     * @param {?} token
	     * @return {?}
	     */
	    function hasLifecycleHook(hook, token) {
	        return reflector.hasLifecycleHook(token, getHookName(hook));
	    }
	    /**
	     * @param {?} hook
	     * @return {?}
	     */
	    function getHookName(hook) {
	        switch (hook) {
	            case LifecycleHooks.OnInit:
	                return 'ngOnInit';
	            case LifecycleHooks.OnDestroy:
	                return 'ngOnDestroy';
	            case LifecycleHooks.DoCheck:
	                return 'ngDoCheck';
	            case LifecycleHooks.OnChanges:
	                return 'ngOnChanges';
	            case LifecycleHooks.AfterContentInit:
	                return 'ngAfterContentInit';
	            case LifecycleHooks.AfterContentChecked:
	                return 'ngAfterContentChecked';
	            case LifecycleHooks.AfterViewInit:
	                return 'ngAfterViewInit';
	            case LifecycleHooks.AfterViewChecked:
	                return 'ngAfterViewChecked';
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$10 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$10 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _isNgModuleMetadata(obj) {
	        return obj instanceof _angular_core.NgModule;
	    }
	    /**
	     * Resolves types to {\@link NgModule}.
	     */
	    var NgModuleResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function NgModuleResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	        /**
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ ngModuleMeta = ListWrapper.findLast(this._reflector.annotations(type), _isNgModuleMetadata);
	            if (ngModuleMeta) {
	                return ngModuleMeta;
	            }
	            else {
	                if (throwIfNotFound) {
	                    throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	                }
	                return null;
	            }
	        };
	        NgModuleResolver = __decorate$10([
	            CompilerInjectable(), 
	            __metadata$10('design:paramtypes', [ReflectorReader])
	        ], NgModuleResolver);
	        return NgModuleResolver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$11 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$11 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function _isPipeMetadata(type) {
	        return type instanceof _angular_core.Pipe;
	    }
	    /**
	     * Resolve a `Type` for {\@link Pipe}.
	     *
	     * This interface can be overridden by the application developer to create custom behavior.
	     *
	     * See {\@link Compiler}
	     */
	    var PipeResolver = (function () {
	        /**
	         * @param {?=} _reflector
	         */
	        function PipeResolver(_reflector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._reflector = _reflector;
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        PipeResolver.prototype.isPipe = function (type) {
	            var /** @type {?} */ typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            return typeMetadata && typeMetadata.some(_isPipeMetadata);
	        };
	        /**
	         * Return {\@link Pipe} for a given `Type`.
	         * @param {?} type
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	            if (metas) {
	                var /** @type {?} */ annotation = ListWrapper.findLast(metas, _isPipeMetadata);
	                if (annotation) {
	                    return annotation;
	                }
	            }
	            if (throwIfNotFound) {
	                throw new Error("No Pipe decorator found on " + stringify(type));
	            }
	            return null;
	        };
	        PipeResolver = __decorate$11([
	            CompilerInjectable(), 
	            __metadata$11('design:paramtypes', [ReflectorReader])
	        ], PipeResolver);
	        return PipeResolver;
	    }());

	    var __decorate$12 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$12 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var SummaryResolver = (function () {
	        function SummaryResolver() {
	        }
	        /**
	         * @param {?} reference
	         * @return {?}
	         */
	        SummaryResolver.prototype.resolveSummary = function (reference) { return null; };
	        ;
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        SummaryResolver.prototype.getSymbolsOf = function (filePath) { return []; };
	        SummaryResolver = __decorate$12([
	            CompilerInjectable(), 
	            __metadata$12('design:paramtypes', [])
	        ], SummaryResolver);
	        return SummaryResolver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$21 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$9 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$9 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ ERROR_COLLECTOR_TOKEN = new _angular_core.OpaqueToken('ErrorCollector');
	    var CompileMetadataResolver = (function () {
	        /**
	         * @param {?} _ngModuleResolver
	         * @param {?} _directiveResolver
	         * @param {?} _pipeResolver
	         * @param {?} _summaryResolver
	         * @param {?} _schemaRegistry
	         * @param {?} _directiveNormalizer
	         * @param {?=} _reflector
	         * @param {?=} _errorCollector
	         */
	        function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _summaryResolver, _schemaRegistry, _directiveNormalizer, _reflector, _errorCollector) {
	            if (_reflector === void 0) { _reflector = reflector; }
	            this._ngModuleResolver = _ngModuleResolver;
	            this._directiveResolver = _directiveResolver;
	            this._pipeResolver = _pipeResolver;
	            this._summaryResolver = _summaryResolver;
	            this._schemaRegistry = _schemaRegistry;
	            this._directiveNormalizer = _directiveNormalizer;
	            this._reflector = _reflector;
	            this._errorCollector = _errorCollector;
	            this._directiveCache = new Map();
	            this._summaryCache = new Map();
	            this._pipeCache = new Map();
	            this._ngModuleCache = new Map();
	            this._ngModuleOfTypes = new Map();
	        }
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	            var /** @type {?} */ dirMeta = this._directiveCache.get(type);
	            this._directiveCache.delete(type);
	            this._summaryCache.delete(type);
	            this._pipeCache.delete(type);
	            this._ngModuleOfTypes.delete(type);
	            // Clear all of the NgModule as they contain transitive information!
	            this._ngModuleCache.clear();
	            if (dirMeta) {
	                this._directiveNormalizer.clearCacheFor(dirMeta);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.clearCache = function () {
	            this._directiveCache.clear();
	            this._summaryCache.clear();
	            this._pipeCache.clear();
	            this._ngModuleCache.clear();
	            this._ngModuleOfTypes.clear();
	            this._directiveNormalizer.clearCache();
	        };
	        /**
	         * @param {?} entry
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	            var _this = this;
	            var /** @type {?} */ defs = entry.definitions.map(function (def) { return _this._getAnimationStateMetadata(def); });
	            return new CompileAnimationEntryMetadata(entry.name, defs);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) {
	            if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
	                var /** @type {?} */ styles = this._getAnimationStyleMetadata(value.styles);
	                return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	            }
	            if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
	                return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
	            }
	            return null;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) {
	            return new CompileAnimationStyleMetadata(value.offset, value.styles);
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getAnimationMetadata = function (value) {
	            var _this = this;
	            if (value instanceof _angular_core.AnimationStyleMetadata) {
	                return this._getAnimationStyleMetadata(value);
	            }
	            if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
	                return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this._getAnimationStyleMetadata(entry); }));
	            }
	            if (value instanceof _angular_core.AnimationAnimateMetadata) {
	                var /** @type {?} */ animateData = (this
	                    ._getAnimationMetadata(value.styles));
	                return new CompileAnimationAnimateMetadata(value.timings, animateData);
	            }
	            if (value instanceof _angular_core.AnimationWithStepsMetadata) {
	                var /** @type {?} */ steps = value.steps.map(function (step) { return _this._getAnimationMetadata(step); });
	                if (value instanceof _angular_core.AnimationGroupMetadata) {
	                    return new CompileAnimationGroupMetadata(steps);
	                }
	                return new CompileAnimationSequenceMetadata(steps);
	            }
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} kind
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadSummary = function (type, kind) {
	            var /** @type {?} */ typeSummary = this._summaryCache.get(type);
	            if (!typeSummary) {
	                var /** @type {?} */ summary = this._summaryResolver.resolveSummary(type);
	                typeSummary = summary ? summary.type : null;
	                this._summaryCache.set(type, typeSummary);
	            }
	            return typeSummary && typeSummary.summaryKind === kind ? typeSummary : null;
	        };
	        /**
	         * @param {?} directiveType
	         * @param {?} isSync
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {
	            var _this = this;
	            if (this._directiveCache.has(directiveType)) {
	                return;
	            }
	            directiveType = _angular_core.resolveForwardRef(directiveType);
	            var _a = this.getNonNormalizedDirectiveMetadata(directiveType), annotation = _a.annotation, metadata = _a.metadata;
	            var /** @type {?} */ createDirectiveMetadata = function (templateMetadata) {
	                var /** @type {?} */ normalizedDirMeta = new CompileDirectiveMetadata({
	                    type: metadata.type,
	                    isComponent: metadata.isComponent,
	                    selector: metadata.selector,
	                    exportAs: metadata.exportAs,
	                    changeDetection: metadata.changeDetection,
	                    inputs: metadata.inputs,
	                    outputs: metadata.outputs,
	                    hostListeners: metadata.hostListeners,
	                    hostProperties: metadata.hostProperties,
	                    hostAttributes: metadata.hostAttributes,
	                    providers: metadata.providers,
	                    viewProviders: metadata.viewProviders,
	                    queries: metadata.queries,
	                    viewQueries: metadata.viewQueries,
	                    entryComponents: metadata.entryComponents,
	                    template: templateMetadata
	                });
	                _this._directiveCache.set(directiveType, normalizedDirMeta);
	                _this._summaryCache.set(directiveType, normalizedDirMeta.toSummary());
	                return normalizedDirMeta;
	            };
	            if (metadata.isComponent) {
	                var /** @type {?} */ templateMeta = this._directiveNormalizer.normalizeTemplate({
	                    componentType: directiveType,
	                    moduleUrl: componentModuleUrl(this._reflector, directiveType, annotation),
	                    encapsulation: metadata.template.encapsulation,
	                    template: metadata.template.template,
	                    templateUrl: metadata.template.templateUrl,
	                    styles: metadata.template.styles,
	                    styleUrls: metadata.template.styleUrls,
	                    animations: metadata.template.animations,
	                    interpolation: metadata.template.interpolation
	                });
	                if (templateMeta.syncResult) {
	                    createDirectiveMetadata(templateMeta.syncResult);
	                    return null;
	                }
	                else {
	                    if (isSync) {
	                        this._reportError(new ComponentStillLoadingError(directiveType), directiveType);
	                        return null;
	                    }
	                    return templateMeta.asyncResult.then(createDirectiveMetadata);
	                }
	            }
	            else {
	                // directive
	                createDirectiveMetadata(null);
	                return null;
	            }
	        };
	        /**
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	            var _this = this;
	            directiveType = _angular_core.resolveForwardRef(directiveType);
	            var /** @type {?} */ dirMeta = this._directiveResolver.resolve(directiveType);
	            if (!dirMeta) {
	                return null;
	            }
	            var /** @type {?} */ nonNormalizedTemplateMetadata;
	            if (dirMeta instanceof _angular_core.Component) {
	                // component
	                assertArrayOfStrings('styles', dirMeta.styles);
	                assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	                assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	                var /** @type {?} */ animations = dirMeta.animations ?
	                    dirMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                    null;
	                nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                    encapsulation: dirMeta.encapsulation,
	                    template: dirMeta.template,
	                    templateUrl: dirMeta.templateUrl,
	                    styles: dirMeta.styles,
	                    styleUrls: dirMeta.styleUrls,
	                    animations: animations,
	                    interpolation: dirMeta.interpolation
	                });
	            }
	            var /** @type {?} */ changeDetectionStrategy = null;
	            var /** @type {?} */ viewProviders = [];
	            var /** @type {?} */ entryComponentMetadata = [];
	            var /** @type {?} */ selector = dirMeta.selector;
	            if (dirMeta instanceof _angular_core.Component) {
	                // Component
	                changeDetectionStrategy = dirMeta.changeDetection;
	                if (dirMeta.viewProviders) {
	                    viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	                }
	                if (dirMeta.entryComponents) {
	                    entryComponentMetadata = flattenAndDedupeArray(dirMeta.entryComponents)
	                        .map(function (type) { return _this._getIdentifierMetadata(type); })
	                        .concat(entryComponentMetadata);
	                }
	                if (!selector) {
	                    selector = this._schemaRegistry.getDefaultComponentElementName();
	                }
	            }
	            else {
	                // Directive
	                if (!selector) {
	                    this._reportError(new SyntaxError("Directive " + stringifyType(directiveType) + " has no selector, please add it!"), directiveType);
	                    selector = 'error';
	                }
	            }
	            var /** @type {?} */ providers = [];
	            if (isPresent(dirMeta.providers)) {
	                providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringifyType(directiveType) + "\"", [], directiveType);
	            }
	            var /** @type {?} */ queries = [];
	            var /** @type {?} */ viewQueries = [];
	            if (isPresent(dirMeta.queries)) {
	                queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	                viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	            }
	            var /** @type {?} */ metadata = CompileDirectiveMetadata.create({
	                selector: selector,
	                exportAs: dirMeta.exportAs,
	                isComponent: !!nonNormalizedTemplateMetadata,
	                type: this._getTypeMetadata(directiveType),
	                template: nonNormalizedTemplateMetadata,
	                changeDetection: changeDetectionStrategy,
	                inputs: dirMeta.inputs,
	                outputs: dirMeta.outputs,
	                host: dirMeta.host,
	                providers: providers,
	                viewProviders: viewProviders,
	                queries: queries,
	                viewQueries: viewQueries,
	                entryComponents: entryComponentMetadata
	            });
	            return { metadata: metadata, annotation: dirMeta };
	        };
	        /**
	         * Gets the metadata for the given directive.
	         * This assumes `loadNgModuleMetadata` has been called first.
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	            var /** @type {?} */ dirMeta = this._directiveCache.get(directiveType);
	            if (!dirMeta) {
	                this._reportError(new SyntaxError("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringifyType(directiveType) + "."), directiveType);
	            }
	            return dirMeta;
	        };
	        /**
	         * @param {?} dirType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	            var /** @type {?} */ dirSummary = (this._loadSummary(dirType, CompileSummaryKind.Directive));
	            if (!dirSummary) {
	                this._reportError(new SyntaxError("Illegal state: Could not load the summary for directive " + stringifyType(dirType) + "."), dirType);
	            }
	            return dirSummary;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNgModuleSummary = function (moduleType) {
	            var /** @type {?} */ moduleSummary = (this._loadSummary(moduleType, CompileSummaryKind.NgModule));
	            if (!moduleSummary) {
	                var /** @type {?} */ moduleMeta = this.getNgModuleMetadata(moduleType, false);
	                moduleSummary = moduleMeta ? moduleMeta.toSummary() : null;
	                if (moduleSummary) {
	                    this._summaryCache.set(moduleType, moduleSummary);
	                }
	            }
	            return moduleSummary;
	        };
	        /**
	         * Loads the declared directives and pipes of an NgModule.
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.loadNgModuleDirectiveAndPipeMetadata = function (moduleType, isSync, throwIfNotFound) {
	            var _this = this;
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            var /** @type {?} */ ngModule = this.getNgModuleMetadata(moduleType, throwIfNotFound);
	            var /** @type {?} */ loading = [];
	            if (ngModule) {
	                ngModule.declaredDirectives.forEach(function (id) {
	                    var /** @type {?} */ promise = _this._loadDirectiveMetadata(id.reference, isSync);
	                    if (promise) {
	                        loading.push(promise);
	                    }
	                });
	                ngModule.declaredPipes.forEach(function (id) { return _this._loadPipeMetadata(id.reference); });
	            }
	            return Promise.all(loading);
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} throwIfNotFound
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType, throwIfNotFound) {
	            var _this = this;
	            if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	            moduleType = _angular_core.resolveForwardRef(moduleType);
	            var /** @type {?} */ compileMeta = this._ngModuleCache.get(moduleType);
	            if (compileMeta) {
	                return compileMeta;
	            }
	            var /** @type {?} */ meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	            if (!meta) {
	                return null;
	            }
	            var /** @type {?} */ declaredDirectives = [];
	            var /** @type {?} */ exportedNonModuleIdentifiers = [];
	            var /** @type {?} */ declaredPipes = [];
	            var /** @type {?} */ importedModules = [];
	            var /** @type {?} */ exportedModules = [];
	            var /** @type {?} */ providers = [];
	            var /** @type {?} */ entryComponents = [];
	            var /** @type {?} */ bootstrapComponents = [];
	            var /** @type {?} */ schemas = [];
	            if (meta.imports) {
	                flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                    var /** @type {?} */ importedModuleType;
	                    if (isValidType(importedType)) {
	                        importedModuleType = importedType;
	                    }
	                    else if (importedType && importedType.ngModule) {
	                        var /** @type {?} */ moduleWithProviders = importedType;
	                        importedModuleType = moduleWithProviders.ngModule;
	                        if (moduleWithProviders.providers) {
	                            providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringifyType(importedModuleType) + "'", [], importedType));
	                        }
	                    }
	                    if (importedModuleType) {
	                        var /** @type {?} */ importedModuleSummary = _this.getNgModuleSummary(importedModuleType);
	                        if (!importedModuleSummary) {
	                            _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                            return;
	                        }
	                        importedModules.push(importedModuleSummary);
	                    }
	                    else {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(importedType) + "' imported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                });
	            }
	            if (meta.exports) {
	                flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                    if (!isValidType(exportedType)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(exportedType) + "' exported by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    var /** @type {?} */ exportedModuleSummary = _this.getNgModuleSummary(exportedType);
	                    if (exportedModuleSummary) {
	                        exportedModules.push(exportedModuleSummary);
	                    }
	                    else {
	                        exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType));
	                    }
	                });
	            }
	            // Note: This will be modified later, so we rely on
	            // getting a new instance every time!
	            var /** @type {?} */ transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	            if (meta.declarations) {
	                flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                    if (!isValidType(declaredType)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    var /** @type {?} */ declaredIdentifier = _this._getIdentifierMetadata(declaredType);
	                    if (_this._directiveResolver.isDirective(declaredType)) {
	                        transitiveModule.addDirective(declaredIdentifier);
	                        declaredDirectives.push(declaredIdentifier);
	                        _this._addTypeToModule(declaredType, moduleType);
	                    }
	                    else if (_this._pipeResolver.isPipe(declaredType)) {
	                        transitiveModule.addPipe(declaredIdentifier);
	                        transitiveModule.pipes.push(declaredIdentifier);
	                        declaredPipes.push(declaredIdentifier);
	                        _this._addTypeToModule(declaredType, moduleType);
	                    }
	                    else {
	                        _this._reportError(new SyntaxError("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringifyType(declaredType) + "' declared by the module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                });
	            }
	            var /** @type {?} */ exportedDirectives = [];
	            var /** @type {?} */ exportedPipes = [];
	            exportedNonModuleIdentifiers.forEach(function (exportedId) {
	                if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                    exportedDirectives.push(exportedId);
	                    transitiveModule.addExportedDirective(exportedId);
	                }
	                else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                    exportedPipes.push(exportedId);
	                    transitiveModule.addExportedPipe(exportedId);
	                }
	                else {
	                    _this._reportError(new SyntaxError("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringifyType(exportedId.reference) + " from " + stringifyType(moduleType) + " as it was neither declared nor imported!"), moduleType);
	                }
	            });
	            // The providers of the module have to go last
	            // so that they overwrite any other provider we already added.
	            if (meta.providers) {
	                providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringifyType(moduleType) + "'", [], moduleType));
	            }
	            if (meta.entryComponents) {
	                entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)
	                    .map(function (type) { return _this._getIdentifierMetadata(type); }));
	            }
	            if (meta.bootstrap) {
	                flattenAndDedupeArray(meta.bootstrap).forEach(function (type) {
	                    if (!isValidType(type)) {
	                        _this._reportError(new SyntaxError("Unexpected value '" + stringifyType(type) + "' used in the bootstrap property of module '" + stringifyType(moduleType) + "'"), moduleType);
	                        return;
	                    }
	                    bootstrapComponents.push(_this._getIdentifierMetadata(type));
	                });
	            }
	            entryComponents.push.apply(entryComponents, bootstrapComponents);
	            if (meta.schemas) {
	                schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	            }
	            compileMeta = new CompileNgModuleMetadata({
	                type: this._getTypeMetadata(moduleType),
	                providers: providers,
	                entryComponents: entryComponents,
	                bootstrapComponents: bootstrapComponents,
	                schemas: schemas,
	                declaredDirectives: declaredDirectives,
	                exportedDirectives: exportedDirectives,
	                declaredPipes: declaredPipes,
	                exportedPipes: exportedPipes,
	                importedModules: importedModules,
	                exportedModules: exportedModules,
	                transitiveModule: transitiveModule,
	                id: meta.id,
	            });
	            entryComponents.forEach(function (id) { return transitiveModule.addEntryComponent(id); });
	            providers.forEach(function (provider) { return transitiveModule.addProvider(provider, compileMeta.type); });
	            transitiveModule.addModule(compileMeta.type);
	            this._ngModuleCache.set(moduleType, compileMeta);
	            return compileMeta;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	            if (this._directiveResolver.isDirective(type)) {
	                return 'directive';
	            }
	            if (this._pipeResolver.isPipe(type)) {
	                return 'pipe';
	            }
	            if (this._ngModuleResolver.isNgModule(type)) {
	                return 'module';
	            }
	            if (((type)).provide) {
	                return 'provider';
	            }
	            return 'value';
	        };
	        /**
	         * @param {?} type
	         * @param {?} moduleType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	            var /** @type {?} */ oldModule = this._ngModuleOfTypes.get(type);
	            if (oldModule && oldModule !== moduleType) {
	                this._reportError(new SyntaxError(("Type " + stringifyType(type) + " is part of the declarations of 2 modules: " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + "! ") +
	                    ("Please consider moving " + stringifyType(type) + " to a higher module that imports " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ". ") +
	                    ("You can also create a new NgModule that exports and includes " + stringifyType(type) + " then import that NgModule in " + stringifyType(oldModule) + " and " + stringifyType(moduleType) + ".")), moduleType);
	            }
	            this._ngModuleOfTypes.set(type, moduleType);
	        };
	        /**
	         * @param {?} importedModules
	         * @param {?} exportedModules
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	            // collect `providers` / `entryComponents` from all imported and all exported modules
	            var /** @type {?} */ result = new TransitiveCompileNgModuleMetadata();
	            var /** @type {?} */ modulesByToken = new Map();
	            importedModules.concat(exportedModules).forEach(function (modSummary) {
	                modSummary.modules.forEach(function (mod) { return result.addModule(mod); });
	                modSummary.entryComponents.forEach(function (comp) { return result.addEntryComponent(comp); });
	                var /** @type {?} */ addedTokens = new Set();
	                modSummary.providers.forEach(function (entry) {
	                    var /** @type {?} */ tokenRef = tokenReference(entry.provider.token);
	                    var /** @type {?} */ prevModules = modulesByToken.get(tokenRef);
	                    if (!prevModules) {
	                        prevModules = new Set();
	                        modulesByToken.set(tokenRef, prevModules);
	                    }
	                    var /** @type {?} */ moduleRef = entry.module.reference;
	                    // Note: the providers of one module may still contain multiple providers
	                    // per token (e.g. for multi providers), and we need to preserve these.
	                    if (addedTokens.has(tokenRef) || !prevModules.has(moduleRef)) {
	                        prevModules.add(moduleRef);
	                        addedTokens.add(tokenRef);
	                        result.addProvider(entry.provider, entry.module);
	                    }
	                });
	            });
	            exportedModules.forEach(function (modSummary) {
	                modSummary.exportedDirectives.forEach(function (id) { return result.addExportedDirective(id); });
	                modSummary.exportedPipes.forEach(function (id) { return result.addExportedPipe(id); });
	            });
	            importedModules.forEach(function (modSummary) {
	                modSummary.exportedDirectives.forEach(function (id) { return result.addDirective(id); });
	                modSummary.exportedPipes.forEach(function (id) { return result.addPipe(id); });
	            });
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getIdentifierMetadata = function (type) {
	            type = _angular_core.resolveForwardRef(type);
	            return { reference: type };
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.isInjectable = function (type) {
	            var /** @type {?} */ annotations = this._reflector.annotations(type);
	            // Note: We need an exact check here as @Component / @Directive / ... inherit
	            // from @CompilerInjectable!
	            return annotations.some(function (ann) { return ann.constructor === _angular_core.Injectable; });
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getInjectableSummary = function (type) {
	            return { summaryKind: CompileSummaryKind.Injectable, type: this._getTypeMetadata(type) };
	        };
	        /**
	         * @param {?} type
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getInjectableMetadata = function (type, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            var /** @type {?} */ typeSummary = this._loadSummary(type, CompileSummaryKind.Injectable);
	            if (typeSummary) {
	                return typeSummary.type;
	            }
	            return this._getTypeMetadata(type, dependencies);
	        };
	        /**
	         * @param {?} type
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTypeMetadata = function (type, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            var /** @type {?} */ identifier = this._getIdentifierMetadata(type);
	            return {
	                reference: identifier.reference,
	                diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
	                lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	            };
	        };
	        /**
	         * @param {?} factory
	         * @param {?=} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, dependencies) {
	            if (dependencies === void 0) { dependencies = null; }
	            factory = _angular_core.resolveForwardRef(factory);
	            return { reference: factory, diDeps: this._getDependenciesMetadata(factory, dependencies) };
	        };
	        /**
	         * Gets the metadata for the given pipe.
	         * This assumes `loadNgModuleMetadata` has been called first.
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	            var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	            if (!pipeMeta) {
	                this._reportError(new SyntaxError("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringifyType(pipeType) + "."), pipeType);
	            }
	            return pipeMeta;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	            var /** @type {?} */ pipeSummary = (this._loadSummary(pipeType, CompileSummaryKind.Pipe));
	            if (!pipeSummary) {
	                this._reportError(new SyntaxError("Illegal state: Could not load the summary for pipe " + stringifyType(pipeType) + "."), pipeType);
	            }
	            return pipeSummary;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	            var /** @type {?} */ pipeMeta = this._pipeCache.get(pipeType);
	            if (!pipeMeta) {
	                pipeMeta = this._loadPipeMetadata(pipeType);
	            }
	            return pipeMeta;
	        };
	        /**
	         * @param {?} pipeType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	            pipeType = _angular_core.resolveForwardRef(pipeType);
	            var /** @type {?} */ pipeAnnotation = this._pipeResolver.resolve(pipeType);
	            var /** @type {?} */ pipeMeta = new CompilePipeMetadata({
	                type: this._getTypeMetadata(pipeType),
	                name: pipeAnnotation.name,
	                pure: pipeAnnotation.pure
	            });
	            this._pipeCache.set(pipeType, pipeMeta);
	            this._summaryCache.set(pipeType, pipeMeta.toSummary());
	            return pipeMeta;
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} dependencies
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {
	            var _this = this;
	            var /** @type {?} */ hasUnknownDeps = false;
	            var /** @type {?} */ params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	            var /** @type {?} */ dependenciesMetadata = params.map(function (param) {
	                var /** @type {?} */ isAttribute = false;
	                var /** @type {?} */ isHost = false;
	                var /** @type {?} */ isSelf = false;
	                var /** @type {?} */ isSkipSelf = false;
	                var /** @type {?} */ isOptional = false;
	                var /** @type {?} */ token = null;
	                if (Array.isArray(param)) {
	                    param.forEach(function (paramEntry) {
	                        if (paramEntry instanceof _angular_core.Host) {
	                            isHost = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Self) {
	                            isSelf = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.SkipSelf) {
	                            isSkipSelf = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Optional) {
	                            isOptional = true;
	                        }
	                        else if (paramEntry instanceof _angular_core.Attribute) {
	                            isAttribute = true;
	                            token = paramEntry.attributeName;
	                        }
	                        else if (paramEntry instanceof _angular_core.Inject) {
	                            token = paramEntry.token;
	                        }
	                        else if (isValidType(paramEntry) && isBlank(token)) {
	                            token = paramEntry;
	                        }
	                    });
	                }
	                else {
	                    token = param;
	                }
	                if (isBlank(token)) {
	                    hasUnknownDeps = true;
	                    return null;
	                }
	                return {
	                    isAttribute: isAttribute,
	                    isHost: isHost,
	                    isSelf: isSelf,
	                    isSkipSelf: isSkipSelf,
	                    isOptional: isOptional,
	                    token: _this._getTokenMetadata(token)
	                };
	            });
	            if (hasUnknownDeps) {
	                var /** @type {?} */ depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringifyType(dep.token) : '?'; }).join(', ');
	                this._reportError(new SyntaxError("Can't resolve all parameters for " + stringifyType(typeOrFunc) + ": (" + depsTokens + ")."), typeOrFunc);
	            }
	            return dependenciesMetadata;
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	            token = _angular_core.resolveForwardRef(token);
	            var /** @type {?} */ compileToken;
	            if (typeof token === 'string') {
	                compileToken = { value: token };
	            }
	            else {
	                compileToken = { identifier: { reference: token } };
	            }
	            return compileToken;
	        };
	        /**
	         * @param {?} providers
	         * @param {?} targetEntryComponents
	         * @param {?=} debugInfo
	         * @param {?=} compileProviders
	         * @param {?=} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo, compileProviders, type) {
	            var _this = this;
	            if (compileProviders === void 0) { compileProviders = []; }
	            providers.forEach(function (provider, providerIdx) {
	                if (Array.isArray(provider)) {
	                    _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo, compileProviders);
	                }
	                else {
	                    provider = _angular_core.resolveForwardRef(provider);
	                    var /** @type {?} */ providerMeta = void 0;
	                    if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
	                        providerMeta = new ProviderMeta(provider.provide, provider);
	                    }
	                    else if (isValidType(provider)) {
	                        providerMeta = new ProviderMeta(provider, { useClass: provider });
	                    }
	                    else {
	                        var /** @type {?} */ providersInfo = ((providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                            if (seenProviderIdx < providerIdx) {
	                                soFar.push("" + stringifyType(seenProvider));
	                            }
	                            else if (seenProviderIdx == providerIdx) {
	                                soFar.push("?" + stringifyType(seenProvider) + "?");
	                            }
	                            else if (seenProviderIdx == providerIdx + 1) {
	                                soFar.push('...');
	                            }
	                            return soFar;
	                        }, [])))
	                            .join(', ');
	                        _this._reportError(new SyntaxError("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]"), type);
	                    }
	                    if (providerMeta.token === resolveIdentifier(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS)) {
	                        targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(providerMeta, type));
	                    }
	                    else {
	                        compileProviders.push(_this.getProviderMetadata(providerMeta));
	                    }
	                }
	            });
	            return compileProviders;
	        };
	        /**
	         * @param {?} provider
	         * @param {?=} type
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider, type) {
	            var _this = this;
	            var /** @type {?} */ components = [];
	            var /** @type {?} */ collectedIdentifiers = [];
	            if (provider.useFactory || provider.useExisting || provider.useClass) {
	                this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!"), type);
	                return [];
	            }
	            if (!provider.multi) {
	                this._reportError(new SyntaxError("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!"), type);
	                return [];
	            }
	            extractIdentifiers(provider.useValue, collectedIdentifiers);
	            collectedIdentifiers.forEach(function (identifier) {
	                if (_this._directiveResolver.isDirective(identifier.reference) ||
	                    _this._loadSummary(identifier.reference, CompileSummaryKind.Directive)) {
	                    components.push(identifier);
	                }
	            });
	            return components;
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	            var /** @type {?} */ compileDeps;
	            var /** @type {?} */ compileTypeMetadata = null;
	            var /** @type {?} */ compileFactoryMetadata = null;
	            var /** @type {?} */ token = this._getTokenMetadata(provider.token);
	            if (provider.useClass) {
	                compileTypeMetadata = this._getInjectableMetadata(provider.useClass, provider.dependencies);
	                compileDeps = compileTypeMetadata.diDeps;
	                if (provider.token === provider.useClass) {
	                    // use the compileTypeMetadata as it contains information about lifecycleHooks...
	                    token = { identifier: compileTypeMetadata };
	                }
	            }
	            else if (provider.useFactory) {
	                compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, provider.dependencies);
	                compileDeps = compileFactoryMetadata.diDeps;
	            }
	            return {
	                token: token,
	                useClass: compileTypeMetadata,
	                useValue: provider.useValue,
	                useFactory: compileFactoryMetadata,
	                useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
	                deps: compileDeps,
	                multi: provider.multi
	            };
	        };
	        /**
	         * @param {?} queries
	         * @param {?} isViewQuery
	         * @param {?} directiveType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	            var _this = this;
	            var /** @type {?} */ res = [];
	            Object.keys(queries).forEach(function (propertyName) {
	                var /** @type {?} */ query = queries[propertyName];
	                if (query.isViewQuery === isViewQuery) {
	                    res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	                }
	            });
	            return res;
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	        /**
	         * @param {?} q
	         * @param {?} propertyName
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	            var _this = this;
	            var /** @type {?} */ selectors;
	            if (typeof q.selector === 'string') {
	                selectors =
	                    this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	            }
	            else {
	                if (!q.selector) {
	                    this._reportError(new SyntaxError("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringifyType(typeOrFunc) + "\" since the query selector wasn't defined."), typeOrFunc);
	                }
	                selectors = [this._getTokenMetadata(q.selector)];
	            }
	            return {
	                selectors: selectors,
	                first: q.first,
	                descendants: q.descendants, propertyName: propertyName,
	                read: q.read ? this._getTokenMetadata(q.read) : null
	            };
	        };
	        /**
	         * @param {?} error
	         * @param {?=} type
	         * @param {?=} otherType
	         * @return {?}
	         */
	        CompileMetadataResolver.prototype._reportError = function (error, type, otherType) {
	            if (this._errorCollector) {
	                this._errorCollector(error, type);
	                if (otherType) {
	                    this._errorCollector(error, otherType);
	                }
	            }
	            else {
	                throw error;
	            }
	        };
	        /** @nocollapse */
	        CompileMetadataResolver.ctorParameters = function () { return [
	            { type: NgModuleResolver, },
	            { type: DirectiveResolver, },
	            { type: PipeResolver, },
	            { type: SummaryResolver, },
	            { type: ElementSchemaRegistry, },
	            { type: DirectiveNormalizer, },
	            { type: ReflectorReader, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ERROR_COLLECTOR_TOKEN,] },] },
	        ]; };
	        CompileMetadataResolver = __decorate$9([
	            CompilerInjectable(), 
	            __metadata$9('design:paramtypes', [NgModuleResolver, DirectiveResolver, PipeResolver, SummaryResolver, ElementSchemaRegistry, DirectiveNormalizer, ReflectorReader, Function])
	        ], CompileMetadataResolver);
	        return CompileMetadataResolver;
	    }());
	    /**
	     * @param {?} tree
	     * @param {?=} out
	     * @return {?}
	     */
	    function flattenArray(tree, out) {
	        if (out === void 0) { out = []; }
	        if (tree) {
	            for (var /** @type {?} */ i = 0; i < tree.length; i++) {
	                var /** @type {?} */ item = _angular_core.resolveForwardRef(tree[i]);
	                if (Array.isArray(item)) {
	                    flattenArray(item, out);
	                }
	                else {
	                    out.push(item);
	                }
	            }
	        }
	        return out;
	    }
	    /**
	     * @param {?} array
	     * @return {?}
	     */
	    function dedupeArray(array) {
	        if (array) {
	            return Array.from(new Set(array));
	        }
	        return [];
	    }
	    /**
	     * @param {?} tree
	     * @return {?}
	     */
	    function flattenAndDedupeArray(tree) {
	        return dedupeArray(flattenArray(tree));
	    }
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function isValidType(value) {
	        return (value instanceof StaticSymbol) || (value instanceof _angular_core.Type);
	    }
	    /**
	     * @param {?} reflector
	     * @param {?} type
	     * @param {?} cmpMetadata
	     * @return {?}
	     */
	    function componentModuleUrl(reflector, type, cmpMetadata) {
	        if (type instanceof StaticSymbol) {
	            return type.filePath;
	        }
	        var /** @type {?} */ moduleId = cmpMetadata.moduleId;
	        if (typeof moduleId === 'string') {
	            var /** @type {?} */ scheme = getUrlScheme(moduleId);
	            return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	        }
	        else if (moduleId !== null && moduleId !== void 0) {
	            throw new SyntaxError(("moduleId should be a string in \"" + stringifyType(type) + "\". See https://goo.gl/wIDDiL for more information.\n") +
	                "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	        }
	        return reflector.importUri(type);
	    }
	    /**
	     * @param {?} value
	     * @param {?} targetIdentifiers
	     * @return {?}
	     */
	    function extractIdentifiers(value, targetIdentifiers) {
	        visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	    }
	    var _CompileValueConverter = (function (_super) {
	        __extends$21(_CompileValueConverter, _super);
	        function _CompileValueConverter() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} value
	         * @param {?} targetIdentifiers
	         * @return {?}
	         */
	        _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	            targetIdentifiers.push({ reference: value });
	        };
	        return _CompileValueConverter;
	    }(ValueTransformer));
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function stringifyType(type) {
	        if (type instanceof StaticSymbol) {
	            return type.name + " in " + type.filePath;
	        }
	        else {
	            return stringify(type);
	        }
	    }

	    var /** @type {?} */ QUOTED_KEYS = '$quoted$';
	    /**
	     * @param {?} value
	     * @param {?=} type
	     * @return {?}
	     */
	    function convertValueToOutputAst(value, type) {
	        if (type === void 0) { type = null; }
	        return visitValue(value, new _ValueOutputAstTransformer(), type);
	    }
	    var _ValueOutputAstTransformer = (function () {
	        function _ValueOutputAstTransformer() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	            var _this = this;
	            return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	        };
	        /**
	         * @param {?} map
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	            var _this = this;
	            var /** @type {?} */ entries = [];
	            var /** @type {?} */ quotedSet = new Set(map && map[QUOTED_KEYS]);
	            Object.keys(map).forEach(function (key) {
	                entries.push(new LiteralMapEntry(key, visitValue(map[key], _this, null), quotedSet.has(key)));
	            });
	            return new LiteralMapExpr(entries, type);
	        };
	        /**
	         * @param {?} value
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	        /**
	         * @param {?} value
	         * @param {?} type
	         * @return {?}
	         */
	        _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	            if (value instanceof Expression) {
	                return value;
	            }
	            else {
	                return importExpr({ reference: value });
	            }
	        };
	        return _ValueOutputAstTransformer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$13 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$13 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var ComponentFactoryDependency = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} placeholder
	         */
	        function ComponentFactoryDependency(comp, placeholder) {
	            this.comp = comp;
	            this.placeholder = placeholder;
	        }
	        return ComponentFactoryDependency;
	    }());
	    var NgModuleCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} ngModuleFactoryVar
	         * @param {?} dependencies
	         */
	        function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	            this.statements = statements;
	            this.ngModuleFactoryVar = ngModuleFactoryVar;
	            this.dependencies = dependencies;
	        }
	        return NgModuleCompileResult;
	    }());
	    var NgModuleCompiler = (function () {
	        function NgModuleCompiler() {
	        }
	        /**
	         * @param {?} ngModuleMeta
	         * @param {?} extraProviders
	         * @return {?}
	         */
	        NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	            var /** @type {?} */ moduleUrl = identifierModuleUrl(ngModuleMeta.type);
	            var /** @type {?} */ sourceFileName = isPresent(moduleUrl) ?
	                "in NgModule " + identifierName(ngModuleMeta.type) + " in " + moduleUrl :
	                "in NgModule " + identifierName(ngModuleMeta.type);
	            var /** @type {?} */ sourceFile = new ParseSourceFile('', sourceFileName);
	            var /** @type {?} */ sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	            var /** @type {?} */ deps = [];
	            var /** @type {?} */ bootstrapComponentFactories = [];
	            var /** @type {?} */ entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	                var /** @type {?} */ id = { reference: null };
	                if (ngModuleMeta.bootstrapComponents.some(function (id) { return id.reference === entryComponent.reference; })) {
	                    bootstrapComponentFactories.push(id);
	                }
	                deps.push(new ComponentFactoryDependency(entryComponent, id));
	                return id;
	            });
	            var /** @type {?} */ builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	            var /** @type {?} */ providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	            providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	            var /** @type {?} */ injectorClass = builder.build();
	            var /** @type {?} */ ngModuleFactoryVar = identifierName(ngModuleMeta.type) + "NgFactory";
	            var /** @type {?} */ ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	                .set(importExpr(createIdentifier(Identifiers.NgModuleFactory))
	                .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(createIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]);
	            var /** @type {?} */ stmts = [injectorClass, ngModuleFactoryStmt];
	            if (ngModuleMeta.id) {
	                var /** @type {?} */ registerFactoryStmt = importExpr(createIdentifier(Identifiers.RegisterModuleFactoryFn))
	                    .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                    .toStmt();
	                stmts.push(registerFactoryStmt);
	            }
	            return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	        };
	        NgModuleCompiler = __decorate$13([
	            CompilerInjectable(), 
	            __metadata$13('design:paramtypes', [])
	        ], NgModuleCompiler);
	        return NgModuleCompiler;
	    }());
	    var _InjectorBuilder = (function () {
	        /**
	         * @param {?} _ngModuleMeta
	         * @param {?} _entryComponentFactories
	         * @param {?} _bootstrapComponentFactories
	         * @param {?} _sourceSpan
	         */
	        function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	            this._ngModuleMeta = _ngModuleMeta;
	            this._entryComponentFactories = _entryComponentFactories;
	            this._bootstrapComponentFactories = _bootstrapComponentFactories;
	            this._sourceSpan = _sourceSpan;
	            this.fields = [];
	            this.getters = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this._tokens = [];
	            this._instances = new Map();
	            this._createStmts = [];
	            this._destroyStmts = [];
	        }
	        /**
	         * @param {?} resolvedProvider
	         * @return {?}
	         */
	        _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	            var _this = this;
	            var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	            var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + this._instances.size;
	            var /** @type {?} */ instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	            if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	                this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
	            }
	            this._tokens.push(resolvedProvider.token);
	            this._instances.set(tokenReference(resolvedProvider.token), instance);
	        };
	        /**
	         * @return {?}
	         */
	        _InjectorBuilder.prototype.build = function () {
	            var _this = this;
	            var /** @type {?} */ getMethodStmts = this._tokens.map(function (token) {
	                var /** @type {?} */ providerExpr = _this._instances.get(tokenReference(token));
	                return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	            });
	            var /** @type {?} */ methods = [
	                new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	                new ClassMethod('getInternal', [
	                    new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	                    new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	                ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars.notFoundResult)]), DYNAMIC_TYPE),
	                new ClassMethod('destroyInternal', [], this._destroyStmts),
	            ];
	            var /** @type {?} */ parentArgs = [
	                variable(InjectorProps.parent.name),
	                literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	                literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	            ];
	            var /** @type {?} */ injClassName = identifierName(this._ngModuleMeta.type) + "Injector";
	            return createClassStmt({
	                name: injClassName,
	                ctorParams: [new FnParam(InjectorProps.parent.name, importType(createIdentifier(Identifiers.Injector)))],
	                parent: importExpr(createIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
	                parentArgs: parentArgs,
	                builders: [{ methods: methods }, this]
	            });
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._getProviderValue = function (provider) {
	            var _this = this;
	            var /** @type {?} */ result;
	            if (isPresent(provider.useExisting)) {
	                result = this._getDependency({ token: provider.useExisting });
	            }
	            else if (isPresent(provider.useFactory)) {
	                var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	                result = importExpr(provider.useFactory).callFn(depsExpr);
	            }
	            else if (isPresent(provider.useClass)) {
	                var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	                result =
	                    importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	            }
	            else {
	                result = convertValueToOutputAst(provider.useValue);
	            }
	            return result;
	        };
	        /**
	         * @param {?} propName
	         * @param {?} provider
	         * @param {?} providerValueExpressions
	         * @param {?} isMulti
	         * @param {?} isEager
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	            var /** @type {?} */ resolvedProviderValueExpr;
	            var /** @type {?} */ type;
	            if (isMulti) {
	                resolvedProviderValueExpr = literalArr(providerValueExpressions);
	                type = new ArrayType(DYNAMIC_TYPE);
	            }
	            else {
	                resolvedProviderValueExpr = providerValueExpressions[0];
	                type = providerValueExpressions[0].type;
	            }
	            if (!type) {
	                type = DYNAMIC_TYPE;
	            }
	            if (isEager) {
	                this.fields.push(new ClassField(propName, type));
	                this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	            }
	            else {
	                var /** @type {?} */ internalField = "_" + propName;
	                this.fields.push(new ClassField(internalField, type));
	                // Note: Equals is important for JS so that it also checks the undefined case!
	                var /** @type {?} */ getterStmts = [
	                    new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
	                    new ReturnStatement(THIS_EXPR.prop(internalField))
	                ];
	                this.getters.push(new ClassGetter(propName, getterStmts, type));
	            }
	            return THIS_EXPR.prop(propName);
	        };
	        /**
	         * @param {?} dep
	         * @return {?}
	         */
	        _InjectorBuilder.prototype._getDependency = function (dep) {
	            var /** @type {?} */ result = null;
	            if (dep.isValue) {
	                result = literal(dep.value);
	            }
	            if (!dep.isSkipSelf) {
	                if (dep.token &&
	                    (tokenReference(dep.token) === resolveIdentifier(Identifiers.Injector) ||
	                        tokenReference(dep.token) === resolveIdentifier(Identifiers.ComponentFactoryResolver))) {
	                    result = THIS_EXPR;
	                }
	                if (!result) {
	                    result = this._instances.get(tokenReference(dep.token));
	                }
	            }
	            if (!result) {
	                var /** @type {?} */ args = [createDiTokenExpression(dep.token)];
	                if (dep.isOptional) {
	                    args.push(NULL_EXPR);
	                }
	                result = InjectorProps.parent.callMethod('get', args);
	            }
	            return result;
	        };
	        return _InjectorBuilder;
	    }());
	    var InjectorProps = (function () {
	        function InjectorProps() {
	        }
	        InjectorProps.parent = THIS_EXPR.prop('parent');
	        return InjectorProps;
	    }());
	    var InjectMethodVars = (function () {
	        function InjectMethodVars() {
	        }
	        InjectMethodVars.token = variable('token');
	        InjectMethodVars.notFoundResult = variable('notFoundResult');
	        return InjectMethodVars;
	    }());

	    var /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	    var /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	    var /** @type {?} */ CATCH_ERROR_VAR$1 = variable('error');
	    var /** @type {?} */ CATCH_STACK_VAR$1 = variable('stack');
	    var _EmittedLine = (function () {
	        /**
	         * @param {?} indent
	         */
	        function _EmittedLine(indent) {
	            this.indent = indent;
	            this.parts = [];
	        }
	        return _EmittedLine;
	    }());
	    var EmitterVisitorContext = (function () {
	        /**
	         * @param {?} _exportedVars
	         * @param {?} _indent
	         */
	        function EmitterVisitorContext(_exportedVars, _indent) {
	            this._exportedVars = _exportedVars;
	            this._indent = _indent;
	            this._classes = [];
	            this._lines = [new _EmittedLine(_indent)];
	        }
	        /**
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        EmitterVisitorContext.createRoot = function (exportedVars) {
	            return new EmitterVisitorContext(exportedVars, 0);
	        };
	        Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._lines[this._lines.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} varName
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	        /**
	         * @param {?=} lastPart
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.println = function (lastPart) {
	            if (lastPart === void 0) { lastPart = ''; }
	            this.print(lastPart, true);
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	        /**
	         * @param {?} part
	         * @param {?=} newLine
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.print = function (part, newLine) {
	            if (newLine === void 0) { newLine = false; }
	            if (part.length > 0) {
	                this._currentLine.parts.push(part);
	            }
	            if (newLine) {
	                this._lines.push(new _EmittedLine(this._indent));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	            if (this.lineIsEmpty()) {
	                this._lines.pop();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.incIndent = function () {
	            this._indent++;
	            this._currentLine.indent = this._indent;
	        };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.decIndent = function () {
	            this._indent--;
	            this._currentLine.indent = this._indent;
	        };
	        /**
	         * @param {?} clazz
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	        Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        EmitterVisitorContext.prototype.toSource = function () {
	            var /** @type {?} */ lines = this._lines;
	            if (lines[lines.length - 1].parts.length === 0) {
	                lines = lines.slice(0, lines.length - 1);
	            }
	            return lines
	                .map(function (line) {
	                if (line.parts.length > 0) {
	                    return _createIndent(line.indent) + line.parts.join('');
	                }
	                else {
	                    return '';
	                }
	            })
	                .join('\n');
	        };
	        return EmitterVisitorContext;
	    }());
	    /**
	     * @abstract
	     */
	    var AbstractEmitterVisitor = (function () {
	        /**
	         * @param {?} _escapeDollarInStrings
	         */
	        function AbstractEmitterVisitor(_escapeDollarInStrings) {
	            this._escapeDollarInStrings = _escapeDollarInStrings;
	        }
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	            stmt.expr.visitExpression(this, ctx);
	            ctx.println(';');
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	            ctx.print("return ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(';');
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitCastExpr = function (ast, context) { };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	            ctx.print("if (");
	            stmt.condition.visitExpression(this, ctx);
	            ctx.print(") {");
	            var /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	            if (stmt.trueCase.length <= 1 && !hasElseCase) {
	                ctx.print(" ");
	                this.visitAllStatements(stmt.trueCase, ctx);
	                ctx.removeEmptyLastLine();
	                ctx.print(" ");
	            }
	            else {
	                ctx.println();
	                ctx.incIndent();
	                this.visitAllStatements(stmt.trueCase, ctx);
	                ctx.decIndent();
	                if (hasElseCase) {
	                    ctx.println("} else {");
	                    ctx.incIndent();
	                    this.visitAllStatements(stmt.falseCase, ctx);
	                    ctx.decIndent();
	                }
	            }
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	            ctx.print("throw ");
	            stmt.error.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	            var /** @type {?} */ lines = stmt.comment.split('\n');
	            lines.forEach(function (line) { ctx.println("// " + line); });
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) { };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            ctx.print(expr.name + " = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            expr.receiver.visitExpression(this, ctx);
	            ctx.print("[");
	            expr.index.visitExpression(this, ctx);
	            ctx.print("] = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	            var /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();
	            if (!lineWasEmpty) {
	                ctx.print('(');
	            }
	            expr.receiver.visitExpression(this, ctx);
	            ctx.print("." + expr.name + " = ");
	            expr.value.visitExpression(this, ctx);
	            if (!lineWasEmpty) {
	                ctx.print(')');
	            }
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	            expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ name = expr.name;
	            if (isPresent(expr.builtin)) {
	                name = this.getBuiltinMethodName(expr.builtin);
	                if (isBlank(name)) {
	                    // some builtins just mean to skip the call.
	                    return null;
	                }
	            }
	            ctx.print("." + name + "(");
	            this.visitAllExpressions(expr.args, ctx, ",");
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} method
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.getBuiltinMethodName = function (method) { };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	            expr.fn.visitExpression(this, ctx);
	            ctx.print("(");
	            this.visitAllExpressions(expr.args, ctx, ',');
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	            var /** @type {?} */ varName = ast.name;
	            if (isPresent(ast.builtin)) {
	                switch (ast.builtin) {
	                    case BuiltinVar.Super:
	                        varName = 'super';
	                        break;
	                    case BuiltinVar.This:
	                        varName = 'this';
	                        break;
	                    case BuiltinVar.CatchError:
	                        varName = CATCH_ERROR_VAR$1.name;
	                        break;
	                    case BuiltinVar.CatchStack:
	                        varName = CATCH_STACK_VAR$1.name;
	                        break;
	                    default:
	                        throw new Error("Unknown builtin variable " + ast.builtin);
	                }
	            }
	            ctx.print(varName);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	            ctx.print("new ");
	            ast.classExpr.visitExpression(this, ctx);
	            ctx.print("(");
	            this.visitAllExpressions(ast.args, ctx, ',');
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value;
	            if (typeof value === 'string') {
	                ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
	            }
	            else {
	                ctx.print("" + value);
	            }
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) { };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	            ctx.print("(");
	            ast.condition.visitExpression(this, ctx);
	            ctx.print('? ');
	            ast.trueCase.visitExpression(this, ctx);
	            ctx.print(': ');
	            ast.falseCase.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	            ctx.print('!');
	            ast.condition.visitExpression(this, ctx);
	            return null;
	        };
	        /**
	         * @abstract
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) { };
	        /**
	         * @abstract
	         * @param {?} stmt
	         * @param {?} context
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) { };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	            var /** @type {?} */ opStr;
	            switch (ast.operator) {
	                case BinaryOperator.Equals:
	                    opStr = '==';
	                    break;
	                case BinaryOperator.Identical:
	                    opStr = '===';
	                    break;
	                case BinaryOperator.NotEquals:
	                    opStr = '!=';
	                    break;
	                case BinaryOperator.NotIdentical:
	                    opStr = '!==';
	                    break;
	                case BinaryOperator.And:
	                    opStr = '&&';
	                    break;
	                case BinaryOperator.Or:
	                    opStr = '||';
	                    break;
	                case BinaryOperator.Plus:
	                    opStr = '+';
	                    break;
	                case BinaryOperator.Minus:
	                    opStr = '-';
	                    break;
	                case BinaryOperator.Divide:
	                    opStr = '/';
	                    break;
	                case BinaryOperator.Multiply:
	                    opStr = '*';
	                    break;
	                case BinaryOperator.Modulo:
	                    opStr = '%';
	                    break;
	                case BinaryOperator.Lower:
	                    opStr = '<';
	                    break;
	                case BinaryOperator.LowerEquals:
	                    opStr = '<=';
	                    break;
	                case BinaryOperator.Bigger:
	                    opStr = '>';
	                    break;
	                case BinaryOperator.BiggerEquals:
	                    opStr = '>=';
	                    break;
	                default:
	                    throw new Error("Unknown operator " + ast.operator);
	            }
	            ctx.print("(");
	            ast.lhs.visitExpression(this, ctx);
	            ctx.print(" " + opStr + " ");
	            ast.rhs.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	            ast.receiver.visitExpression(this, ctx);
	            ctx.print(".");
	            ctx.print(ast.name);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	            ast.receiver.visitExpression(this, ctx);
	            ctx.print("[");
	            ast.index.visitExpression(this, ctx);
	            ctx.print("]");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            var /** @type {?} */ useNewLine = ast.entries.length > 1;
	            ctx.print("[", useNewLine);
	            ctx.incIndent();
	            this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	            ctx.decIndent();
	            ctx.print("]", useNewLine);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ useNewLine = ast.entries.length > 1;
	            ctx.print("{", useNewLine);
	            ctx.incIndent();
	            this.visitAllObjects(function (entry) {
	                ctx.print(escapeIdentifier(entry.key, _this._escapeDollarInStrings, entry.quoted) + ": ");
	                entry.value.visitExpression(_this, ctx);
	            }, ast.entries, ctx, ',', useNewLine);
	            ctx.decIndent();
	            ctx.print("}", useNewLine);
	            return null;
	        };
	        /**
	         * @param {?} expressions
	         * @param {?} ctx
	         * @param {?} separator
	         * @param {?=} newLine
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	            var _this = this;
	            if (newLine === void 0) { newLine = false; }
	            this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	        };
	        /**
	         * @param {?} handler
	         * @param {?} expressions
	         * @param {?} ctx
	         * @param {?} separator
	         * @param {?=} newLine
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	            if (newLine === void 0) { newLine = false; }
	            for (var /** @type {?} */ i = 0; i < expressions.length; i++) {
	                if (i > 0) {
	                    ctx.print(separator, newLine);
	                }
	                handler(expressions[i]);
	            }
	            if (newLine) {
	                ctx.println();
	            }
	        };
	        /**
	         * @param {?} statements
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	            var _this = this;
	            statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	        };
	        return AbstractEmitterVisitor;
	    }());
	    /**
	     * @param {?} input
	     * @param {?} escapeDollar
	     * @param {?=} alwaysQuote
	     * @return {?}
	     */
	    function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	        if (alwaysQuote === void 0) { alwaysQuote = true; }
	        if (isBlank(input)) {
	            return null;
	        }
	        var /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	            var match = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                match[_i - 0] = arguments[_i];
	            }
	            if (match[0] == '$') {
	                return escapeDollar ? '\\$' : '$';
	            }
	            else if (match[0] == '\n') {
	                return '\\n';
	            }
	            else if (match[0] == '\r') {
	                return '\\r';
	            }
	            else {
	                return "\\" + match[0];
	            }
	        });
	        var /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	        return requiresQuotes ? "'" + body + "'" : body;
	    }
	    /**
	     * @param {?} count
	     * @return {?}
	     */
	    function _createIndent(count) {
	        var /** @type {?} */ res = '';
	        for (var /** @type {?} */ i = 0; i < count; i++) {
	            res += '  ';
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$22 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _debugModuleUrl = '/debug/lib';
	    /**
	     * @param {?} ast
	     * @return {?}
	     */
	    function debugOutputAstAsTypeScript(ast) {
	        var /** @type {?} */ converter = new _TsEmitterVisitor(_debugModuleUrl);
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([]);
	        var /** @type {?} */ asts = Array.isArray(ast) ? ast : [ast];
	        asts.forEach(function (ast) {
	            if (ast instanceof Statement) {
	                ast.visitStatement(converter, ctx);
	            }
	            else if (ast instanceof Expression) {
	                ast.visitExpression(converter, ctx);
	            }
	            else if (ast instanceof Type$1) {
	                ast.visitType(converter, ctx);
	            }
	            else {
	                throw new Error("Don't know how to print debug info for " + ast);
	            }
	        });
	        return ctx.toSource();
	    }
	    var TypeScriptEmitter = (function () {
	        /**
	         * @param {?} _importGenerator
	         */
	        function TypeScriptEmitter(_importGenerator) {
	            this._importGenerator = _importGenerator;
	        }
	        /**
	         * @param {?} moduleUrl
	         * @param {?} stmts
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	            var _this = this;
	            var /** @type {?} */ converter = new _TsEmitterVisitor(moduleUrl);
	            var /** @type {?} */ ctx = EmitterVisitorContext.createRoot(exportedVars);
	            converter.visitAllStatements(stmts, ctx);
	            var /** @type {?} */ srcParts = [];
	            converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	                // Note: can't write the real word for import as it screws up system.js auto detection...
	                srcParts.push("imp" +
	                    ("ort * as " + prefix + " from '" + _this._importGenerator.fileNameToModuleName(importedModuleUrl, moduleUrl) + "';"));
	            });
	            srcParts.push(ctx.toSource());
	            return srcParts.join('\n');
	        };
	        return TypeScriptEmitter;
	    }());
	    var _TsEmitterVisitor = (function (_super) {
	        __extends$22(_TsEmitterVisitor, _super);
	        /**
	         * @param {?} _moduleUrl
	         */
	        function _TsEmitterVisitor(_moduleUrl) {
	            _super.call(this, false);
	            this._moduleUrl = _moduleUrl;
	            this.importsWithPrefixes = new Map();
	        }
	        /**
	         * @param {?} t
	         * @param {?} ctx
	         * @param {?=} defaultType
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	            if (defaultType === void 0) { defaultType = 'any'; }
	            if (isPresent(t)) {
	                t.visitType(this, ctx);
	            }
	            else {
	                ctx.print(defaultType);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value;
	            if (isBlank(value) && ast.type != NULL_TYPE) {
	                ctx.print("(" + value + " as any)");
	                return null;
	            }
	            return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            if (ast.entries.length === 0) {
	                ctx.print('(');
	            }
	            var /** @type {?} */ result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	            if (ast.entries.length === 0) {
	                ctx.print(' as any[])');
	            }
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	            this._visitIdentifier(ast.value, ast.typeParams, ctx);
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            if (stmt.hasModifier(StmtModifier.Final)) {
	                ctx.print("const");
	            }
	            else {
	                ctx.print("var");
	            }
	            ctx.print(" " + stmt.name + ":");
	            this.visitType(stmt.type, ctx);
	            ctx.print(" = ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	            ctx.print("(<");
	            ast.type.visitType(this, ctx);
	            ctx.print(">");
	            ast.value.visitExpression(this, ctx);
	            ctx.print(")");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var _this = this;
	            ctx.pushClass(stmt);
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            ctx.print("class " + stmt.name);
	            if (isPresent(stmt.parent)) {
	                ctx.print(" extends ");
	                stmt.parent.visitExpression(this, ctx);
	            }
	            ctx.println(" {");
	            ctx.incIndent();
	            stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	            if (isPresent(stmt.constructorMethod)) {
	                this._visitClassConstructor(stmt, ctx);
	            }
	            stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	            stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	            ctx.decIndent();
	            ctx.println("}");
	            ctx.popClass();
	            return null;
	        };
	        /**
	         * @param {?} field
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	            if (field.hasModifier(StmtModifier.Private)) {
	                // comment out as a workaround for #10967
	                ctx.print("/*private*/ ");
	            }
	            ctx.print(field.name);
	            ctx.print(':');
	            this.visitType(field.type, ctx);
	            ctx.println(";");
	        };
	        /**
	         * @param {?} getter
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	            if (getter.hasModifier(StmtModifier.Private)) {
	                ctx.print("private ");
	            }
	            ctx.print("get " + getter.name + "()");
	            ctx.print(':');
	            this.visitType(getter.type, ctx);
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(getter.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	            ctx.print("constructor(");
	            this._visitParams(stmt.constructorMethod.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.constructorMethod.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} method
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	            if (method.hasModifier(StmtModifier.Private)) {
	                ctx.print("private ");
	            }
	            ctx.print(method.name + "(");
	            this._visitParams(method.params, ctx);
	            ctx.print("):");
	            this.visitType(method.type, ctx, 'void');
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(method.body, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	            ctx.print("(");
	            this._visitParams(ast.params, ctx);
	            ctx.print("):");
	            this.visitType(ast.type, ctx, 'void');
	            ctx.println(" => {");
	            ctx.incIndent();
	            this.visitAllStatements(ast.statements, ctx);
	            ctx.decIndent();
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            if (ctx.isExportedVar(stmt.name)) {
	                ctx.print("export ");
	            }
	            ctx.print("function " + stmt.name + "(");
	            this._visitParams(stmt.params, ctx);
	            ctx.print("):");
	            this.visitType(stmt.type, ctx, 'void');
	            ctx.println(" {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.statements, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            ctx.println("try {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.bodyStmts, ctx);
	            ctx.decIndent();
	            ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	            ctx.incIndent();
	            var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                    StmtModifier.Final
	                ]))].concat(stmt.catchStmts);
	            this.visitAllStatements(catchStmts, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	            var /** @type {?} */ typeStr;
	            switch (type.name) {
	                case BuiltinTypeName.Bool:
	                    typeStr = 'boolean';
	                    break;
	                case BuiltinTypeName.Dynamic:
	                    typeStr = 'any';
	                    break;
	                case BuiltinTypeName.Function:
	                    typeStr = 'Function';
	                    break;
	                case BuiltinTypeName.Number:
	                    typeStr = 'number';
	                    break;
	                case BuiltinTypeName.Int:
	                    typeStr = 'number';
	                    break;
	                case BuiltinTypeName.String:
	                    typeStr = 'string';
	                    break;
	                default:
	                    throw new Error("Unsupported builtin type " + type.name);
	            }
	            ctx.print(typeStr);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitExpressionType = function (ast, ctx) {
	            var _this = this;
	            ast.value.visitExpression(this, ctx);
	            if (isPresent(ast.typeParams) && ast.typeParams.length > 0) {
	                ctx.print("<");
	                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, ast.typeParams, ctx, ',');
	                ctx.print(">");
	            }
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	            this.visitType(type.of, ctx);
	            ctx.print("[]");
	            return null;
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	            ctx.print("{[key: string]:");
	            this.visitType(type.valueType, ctx);
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} method
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	            var /** @type {?} */ name;
	            switch (method) {
	                case BuiltinMethod.ConcatArray:
	                    name = 'concat';
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    name = 'subscribe';
	                    break;
	                case BuiltinMethod.Bind:
	                    name = 'bind';
	                    break;
	                default:
	                    throw new Error("Unknown builtin method: " + method);
	            }
	            return name;
	        };
	        /**
	         * @param {?} params
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	            var _this = this;
	            this.visitAllObjects(function (param) {
	                ctx.print(param.name);
	                ctx.print(':');
	                _this.visitType(param.type, ctx);
	            }, params, ctx, ',');
	        };
	        /**
	         * @param {?} value
	         * @param {?} typeParams
	         * @param {?} ctx
	         * @return {?}
	         */
	        _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	            var _this = this;
	            var /** @type {?} */ name = identifierName(value);
	            var /** @type {?} */ moduleUrl = identifierModuleUrl(value);
	            if (isBlank(name)) {
	                throw new Error("Internal error: unknown identifier " + value);
	            }
	            if (isPresent(moduleUrl) && moduleUrl != this._moduleUrl) {
	                var /** @type {?} */ prefix = this.importsWithPrefixes.get(moduleUrl);
	                if (isBlank(prefix)) {
	                    prefix = "import" + this.importsWithPrefixes.size;
	                    this.importsWithPrefixes.set(moduleUrl, prefix);
	                }
	                ctx.print(prefix + ".");
	            }
	            if (value.reference && value.reference.members && value.reference.members.length) {
	                ctx.print(value.reference.name);
	                ctx.print('.');
	                ctx.print(value.reference.members.join('.'));
	            }
	            else {
	                ctx.print(name);
	            }
	            if (isPresent(typeParams) && typeParams.length > 0) {
	                ctx.print("<");
	                this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	                ctx.print(">");
	            }
	        };
	        return _TsEmitterVisitor;
	    }(AbstractEmitterVisitor));

	    // =================================================================================================
	    // =================================================================================================
	    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	    // =================================================================================================
	    // =================================================================================================
	    //
	    //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	    //                               Reach out to mprobst for details.
	    //
	    // =================================================================================================
	    /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	    var /** @type {?} */ SECURITY_SCHEMA = {};
	    /**
	     * @param {?} ctx
	     * @param {?} specs
	     * @return {?}
	     */
	    function registerContext(ctx, specs) {
	        for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	            var spec = specs_1[_i];
	            SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	        }
	    }
	    // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	    registerContext(_angular_core.SecurityContext.HTML, [
	        'iframe|srcdoc',
	        '*|innerHTML',
	        '*|outerHTML',
	    ]);
	    registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	    // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	    registerContext(_angular_core.SecurityContext.URL, [
	        '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	        'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	        'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	        'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	    ]);
	    registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	        'applet|code',
	        'applet|codebase',
	        'base|href',
	        'embed|src',
	        'frame|src',
	        'head|profile',
	        'html|manifest',
	        'iframe|src',
	        'link|href',
	        'media|src',
	        'object|codebase',
	        'object|data',
	        'script|src',
	    ]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$23 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var __decorate$14 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$14 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ BOOLEAN = 'boolean';
	    var /** @type {?} */ NUMBER = 'number';
	    var /** @type {?} */ STRING = 'string';
	    var /** @type {?} */ OBJECT = 'object';
	    /**
	     * This array represents the DOM schema. It encodes inheritance, properties, and events.
	     *
	     * ## Overview
	     *
	     * Each line represents one kind of element. The `element_inheritance` and properties are joined
	     * using `element_inheritance|properties` syntax.
	     *
	     * ## Element Inheritance
	     *
	     * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	     * Here the individual elements are separated by `,` (commas). Every element in the list
	     * has identical properties.
	     *
	     * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	     * specified then `""` (blank) element is assumed.
	     *
	     * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	     * elements.
	     *
	     * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	     *
	     * ## Properties
	     *
	     * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	     * by a special character designating its type:
	     *
	     * - (no prefix): property is a string.
	     * - `*`: property represents an event.
	     * - `!`: property is a boolean.
	     * - `#`: property is a number.
	     * - `%`: property is an object.
	     *
	     * ## Query
	     *
	     * The class creates an internal squas representation which allows to easily answer the query of
	     * if a given property exist on a given element.
	     *
	     * NOTE: We don't yet support querying for types or events.
	     * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	     *       see dom_element_schema_registry_spec.ts
	     */
	    // =================================================================================================
	    // =================================================================================================
	    // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	    // =================================================================================================
	    // =================================================================================================
	    //
	    //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	    //
	    // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	    // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	    //
	    // =================================================================================================
	    var /** @type {?} */ SCHEMA = [
	        '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	        '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	        'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	        'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	        ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	        ':svg:graphics^:svg:|',
	        ':svg:animation^:svg:|*begin,*end,*repeat',
	        ':svg:geometry^:svg:|',
	        ':svg:componentTransferFunction^:svg:|',
	        ':svg:gradient^:svg:|',
	        ':svg:textContent^:svg:graphics|',
	        ':svg:textPositioning^:svg:textContent|',
	        'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	        'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	        'audio^media|',
	        'br^[HTMLElement]|clear',
	        'base^[HTMLElement]|href,target',
	        'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	        'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	        'canvas^[HTMLElement]|#height,#width',
	        'content^[HTMLElement]|select',
	        'dl^[HTMLElement]|!compact',
	        'datalist^[HTMLElement]|',
	        'details^[HTMLElement]|!open',
	        'dialog^[HTMLElement]|!open,returnValue',
	        'dir^[HTMLElement]|!compact',
	        'div^[HTMLElement]|align',
	        'embed^[HTMLElement]|align,height,name,src,type,width',
	        'fieldset^[HTMLElement]|!disabled,name',
	        'font^[HTMLElement]|color,face,size',
	        'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	        'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	        'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	        'hr^[HTMLElement]|align,color,!noShade,size,width',
	        'head^[HTMLElement]|',
	        'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	        'html^[HTMLElement]|version',
	        'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	        'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	        'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	        'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	        'li^[HTMLElement]|type,#value',
	        'label^[HTMLElement]|htmlFor',
	        'legend^[HTMLElement]|align',
	        'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	        'map^[HTMLElement]|name',
	        'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	        'menu^[HTMLElement]|!compact',
	        'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	        'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	        'ins,del^[HTMLElement]|cite,dateTime',
	        'ol^[HTMLElement]|!compact,!reversed,#start,type',
	        'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	        'optgroup^[HTMLElement]|!disabled,label',
	        'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	        'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	        'p^[HTMLElement]|align',
	        'param^[HTMLElement]|name,type,value,valueType',
	        'picture^[HTMLElement]|',
	        'pre^[HTMLElement]|#width',
	        'progress^[HTMLElement]|#max,#value',
	        'q,blockquote,cite^[HTMLElement]|',
	        'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	        'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	        'shadow^[HTMLElement]|',
	        'source^[HTMLElement]|media,sizes,src,srcset,type',
	        'span^[HTMLElement]|',
	        'style^[HTMLElement]|!disabled,media,type',
	        'caption^[HTMLElement]|align',
	        'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	        'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	        'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	        'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	        'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	        'template^[HTMLElement]|',
	        'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	        'title^[HTMLElement]|text',
	        'track^[HTMLElement]|!default,kind,label,src,srclang',
	        'ul^[HTMLElement]|!compact,type',
	        'unknown^[HTMLElement]|',
	        'video^media|#height,poster,#width',
	        ':svg:a^:svg:graphics|',
	        ':svg:animate^:svg:animation|',
	        ':svg:animateMotion^:svg:animation|',
	        ':svg:animateTransform^:svg:animation|',
	        ':svg:circle^:svg:geometry|',
	        ':svg:clipPath^:svg:graphics|',
	        ':svg:cursor^:svg:|',
	        ':svg:defs^:svg:graphics|',
	        ':svg:desc^:svg:|',
	        ':svg:discard^:svg:|',
	        ':svg:ellipse^:svg:geometry|',
	        ':svg:feBlend^:svg:|',
	        ':svg:feColorMatrix^:svg:|',
	        ':svg:feComponentTransfer^:svg:|',
	        ':svg:feComposite^:svg:|',
	        ':svg:feConvolveMatrix^:svg:|',
	        ':svg:feDiffuseLighting^:svg:|',
	        ':svg:feDisplacementMap^:svg:|',
	        ':svg:feDistantLight^:svg:|',
	        ':svg:feDropShadow^:svg:|',
	        ':svg:feFlood^:svg:|',
	        ':svg:feFuncA^:svg:componentTransferFunction|',
	        ':svg:feFuncB^:svg:componentTransferFunction|',
	        ':svg:feFuncG^:svg:componentTransferFunction|',
	        ':svg:feFuncR^:svg:componentTransferFunction|',
	        ':svg:feGaussianBlur^:svg:|',
	        ':svg:feImage^:svg:|',
	        ':svg:feMerge^:svg:|',
	        ':svg:feMergeNode^:svg:|',
	        ':svg:feMorphology^:svg:|',
	        ':svg:feOffset^:svg:|',
	        ':svg:fePointLight^:svg:|',
	        ':svg:feSpecularLighting^:svg:|',
	        ':svg:feSpotLight^:svg:|',
	        ':svg:feTile^:svg:|',
	        ':svg:feTurbulence^:svg:|',
	        ':svg:filter^:svg:|',
	        ':svg:foreignObject^:svg:graphics|',
	        ':svg:g^:svg:graphics|',
	        ':svg:image^:svg:graphics|',
	        ':svg:line^:svg:geometry|',
	        ':svg:linearGradient^:svg:gradient|',
	        ':svg:mpath^:svg:|',
	        ':svg:marker^:svg:|',
	        ':svg:mask^:svg:|',
	        ':svg:metadata^:svg:|',
	        ':svg:path^:svg:geometry|',
	        ':svg:pattern^:svg:|',
	        ':svg:polygon^:svg:geometry|',
	        ':svg:polyline^:svg:geometry|',
	        ':svg:radialGradient^:svg:gradient|',
	        ':svg:rect^:svg:geometry|',
	        ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	        ':svg:script^:svg:|type',
	        ':svg:set^:svg:animation|',
	        ':svg:stop^:svg:|',
	        ':svg:style^:svg:|!disabled,media,title,type',
	        ':svg:switch^:svg:graphics|',
	        ':svg:symbol^:svg:|',
	        ':svg:tspan^:svg:textPositioning|',
	        ':svg:text^:svg:textPositioning|',
	        ':svg:textPath^:svg:textContent|',
	        ':svg:title^:svg:|',
	        ':svg:use^:svg:graphics|',
	        ':svg:view^:svg:|#zoomAndPan',
	        'data^[HTMLElement]|value',
	        'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	        'summary^[HTMLElement]|',
	        'time^[HTMLElement]|dateTime',
	    ];
	    var /** @type {?} */ _ATTR_TO_PROP = {
	        'class': 'className',
	        'for': 'htmlFor',
	        'formaction': 'formAction',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex',
	    };
	    var DomElementSchemaRegistry = (function (_super) {
	        __extends$23(DomElementSchemaRegistry, _super);
	        function DomElementSchemaRegistry() {
	            var _this = this;
	            _super.call(this);
	            this._schema = {};
	            SCHEMA.forEach(function (encodedType) {
	                var type = {};
	                var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	                var properties = strProperties.split(',');
	                var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	                typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	                var superType = superName && _this._schema[superName.toLowerCase()];
	                if (superType) {
	                    Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	                }
	                properties.forEach(function (property) {
	                    if (property.length > 0) {
	                        switch (property[0]) {
	                            case '*':
	                                // We don't yet support events.
	                                // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                                // will
	                                // almost certainly introduce bad XSS vulnerabilities.
	                                // type[property.substring(1)] = EVENT;
	                                break;
	                            case '!':
	                                type[property.substring(1)] = BOOLEAN;
	                                break;
	                            case '#':
	                                type[property.substring(1)] = NUMBER;
	                                break;
	                            case '%':
	                                type[property.substring(1)] = OBJECT;
	                                break;
	                            default:
	                                type[property] = STRING;
	                        }
	                    }
	                });
	            });
	        }
	        /**
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	                return true;
	            }
	            if (tagName.indexOf('-') > -1) {
	                if (tagName === 'ng-container' || tagName === 'ng-content') {
	                    return false;
	                }
	                if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                    // Can't tell now as we don't know which properties a custom element will get
	                    // once it is instantiated
	                    return true;
	                }
	            }
	            var /** @type {?} */ elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	            return !!elementProperties[propName];
	        };
	        /**
	         * @param {?} tagName
	         * @param {?} schemaMetas
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	            if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	                return true;
	            }
	            if (tagName.indexOf('-') > -1) {
	                if (tagName === 'ng-container' || tagName === 'ng-content') {
	                    return true;
	                }
	                if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                    // Allow any custom elements
	                    return true;
	                }
	            }
	            return !!this._schema[tagName.toLowerCase()];
	        };
	        /**
	         * securityContext returns the security context for the given property on the given DOM tag.
	         *
	         * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	         * possible to bind a value into a changing attribute or tag name.
	         *
	         * The filtering is white list based. All attributes in the schema above are assumed to have the
	         * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	         * attack vectors are assigned their appropriate context.
	         * @param {?} tagName
	         * @param {?} propName
	         * @param {?} isAttribute
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	            if (isAttribute) {
	                // NB: For security purposes, use the mapped property name, not the attribute name.
	                propName = this.getMappedPropName(propName);
	            }
	            // Make sure comparisons are case insensitive, so that case differences between attribute and
	            // property names do not have a security impact.
	            tagName = tagName.toLowerCase();
	            propName = propName.toLowerCase();
	            var /** @type {?} */ ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	            if (ctx) {
	                return ctx;
	            }
	            ctx = SECURITY_SCHEMA['*|' + propName];
	            return ctx ? ctx : _angular_core.SecurityContext.NONE;
	        };
	        /**
	         * @param {?} propName
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	        /**
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	            if (name.toLowerCase().startsWith('on')) {
	                var /** @type {?} */ msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") +
	                    ("please use (" + name.slice(2) + ")=...") +
	                    ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                    " current module.";
	                return { error: true, msg: msg };
	            }
	            else {
	                return { error: false };
	            }
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	            if (name.toLowerCase().startsWith('on')) {
	                var /** @type {?} */ msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") +
	                    ("please use (" + name.slice(2) + ")=...");
	                return { error: true, msg: msg };
	            }
	            else {
	                return { error: false };
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	        /**
	         * @param {?} propName
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	            return dashCaseToCamelCase(propName);
	        };
	        /**
	         * @param {?} camelCaseProp
	         * @param {?} userProvidedProp
	         * @param {?} val
	         * @return {?}
	         */
	        DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	            var /** @type {?} */ unit = '';
	            var /** @type {?} */ strVal = val.toString().trim();
	            var /** @type {?} */ errorMsg = null;
	            if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	                if (typeof val === 'number') {
	                    unit = 'px';
	                }
	                else {
	                    var /** @type {?} */ valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                    if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                        errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                    }
	                }
	            }
	            return { error: errorMsg, value: strVal + unit };
	        };
	        DomElementSchemaRegistry = __decorate$14([
	            CompilerInjectable(), 
	            __metadata$14('design:paramtypes', [])
	        ], DomElementSchemaRegistry);
	        return DomElementSchemaRegistry;
	    }(ElementSchemaRegistry));
	    /**
	     * @param {?} prop
	     * @return {?}
	     */
	    function _isPixelDimensionStyle(prop) {
	        switch (prop) {
	            case 'width':
	            case 'height':
	            case 'minWidth':
	            case 'minHeight':
	            case 'maxWidth':
	            case 'maxHeight':
	            case 'left':
	            case 'top':
	            case 'bottom':
	            case 'right':
	            case 'fontSize':
	            case 'outlineWidth':
	            case 'outlineOffset':
	            case 'paddingTop':
	            case 'paddingLeft':
	            case 'paddingBottom':
	            case 'paddingRight':
	            case 'marginTop':
	            case 'marginLeft':
	            case 'marginBottom':
	            case 'marginRight':
	            case 'borderRadius':
	            case 'borderWidth':
	            case 'borderTopWidth':
	            case 'borderLeftWidth':
	            case 'borderRightWidth':
	            case 'borderBottomWidth':
	            case 'textIndent':
	                return true;
	            default:
	                return false;
	        }
	    }

	    var ShadowCss = (function () {
	        function ShadowCss() {
	            this.strictStyling = true;
	        }
	        /**
	         * @param {?} cssText
	         * @param {?} selector
	         * @param {?=} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	            if (hostSelector === void 0) { hostSelector = ''; }
	            var /** @type {?} */ sourceMappingUrl = extractSourceMappingUrl(cssText);
	            cssText = stripComments(cssText);
	            cssText = this._insertDirectives(cssText);
	            return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertDirectives = function (cssText) {
	            cssText = this._insertPolyfillDirectivesInCssText(cssText);
	            return this._insertPolyfillRulesInCssText(cssText);
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            return cssText.replace(_cssContentNextSelectorRe, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                return m[2] + '{';
	            });
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            return cssText.replace(_cssContentRuleRe, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                var /** @type {?} */ rule = m[0].replace(m[1], '').replace(m[2], '');
	                return m[4] + rule;
	            });
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	            var /** @type {?} */ unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	            // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	            cssText = this._insertPolyfillHostInCssText(cssText);
	            cssText = this._convertColonHost(cssText);
	            cssText = this._convertColonHostContext(cssText);
	            cssText = this._convertShadowDOMSelectors(cssText);
	            if (scopeSelector) {
	                cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	            }
	            cssText = cssText + '\n' + unscopedRules;
	            return cssText.trim();
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	            // Difference with webcomponents.js: does not handle comments
	            var /** @type {?} */ r = '';
	            var /** @type {?} */ m;
	            _cssContentUnscopedRuleRe.lastIndex = 0;
	            while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	                var /** @type {?} */ rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	                r += rule + '\n\n';
	            }
	            return r;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonHost = function (cssText) {
	            return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonHostContext = function (cssText) {
	            return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} regExp
	         * @param {?} partReplacer
	         * @return {?}
	         */
	        ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	            // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	            return cssText.replace(regExp, function () {
	                var m = [];
	                for (var _i = 0; _i < arguments.length; _i++) {
	                    m[_i - 0] = arguments[_i];
	                }
	                if (m[2]) {
	                    var /** @type {?} */ parts = m[2].split(',');
	                    var /** @type {?} */ r = [];
	                    for (var /** @type {?} */ i = 0; i < parts.length; i++) {
	                        var /** @type {?} */ p = parts[i].trim();
	                        if (!p)
	                            break;
	                        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                    }
	                    return r.join(',');
	                }
	                else {
	                    return _polyfillHostNoCombinator + m[3];
	                }
	            });
	        };
	        /**
	         * @param {?} host
	         * @param {?} part
	         * @param {?} suffix
	         * @return {?}
	         */
	        ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	            if (part.indexOf(_polyfillHost) > -1) {
	                return this._colonHostPartReplacer(host, part, suffix);
	            }
	            else {
	                return host + part + suffix + ', ' + part + ' ' + host + suffix;
	            }
	        };
	        /**
	         * @param {?} host
	         * @param {?} part
	         * @param {?} suffix
	         * @return {?}
	         */
	        ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	            return host + part.replace(_polyfillHost, '') + suffix;
	        };
	        /**
	         * @param {?} cssText
	         * @return {?}
	         */
	        ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	            return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	        };
	        /**
	         * @param {?} cssText
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	            var _this = this;
	            return processRules(cssText, function (rule) {
	                var /** @type {?} */ selector = rule.selector;
	                var /** @type {?} */ content = rule.content;
	                if (rule.selector[0] != '@') {
	                    selector =
	                        _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	                }
	                else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                    rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                    content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	                }
	                return new CssRule(selector, content);
	            });
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @param {?} strict
	         * @return {?}
	         */
	        ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	            var _this = this;
	            return selector.split(',')
	                .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	                .map(function (deepParts) {
	                var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	                var /** @type {?} */ applyScope = function (shallowPart) {
	                    if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                        return strict ?
	                            _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                            _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                    }
	                    else {
	                        return shallowPart;
	                    }
	                };
	                return [applyScope(shallowPart)].concat(otherParts).join(' ');
	            })
	                .join(', ');
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	            var /** @type {?} */ re = this._makeScopeMatcher(scopeSelector);
	            return !re.test(selector);
	        };
	        /**
	         * @param {?} scopeSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	            var /** @type {?} */ lre = /\[/g;
	            var /** @type {?} */ rre = /\]/g;
	            scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	            return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	            // Difference from webcomponents.js: scopeSelector could not be an array
	            return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	            // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	            _polyfillHostRe.lastIndex = 0;
	            if (_polyfillHostRe.test(selector)) {
	                var /** @type {?} */ replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	                return selector
	                    .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                    return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                        return before + replaceBy_1 + colon + after;
	                    });
	                })
	                    .replace(_polyfillHostRe, replaceBy_1 + ' ');
	            }
	            return scopeSelector + ' ' + selector;
	        };
	        /**
	         * @param {?} selector
	         * @param {?} scopeSelector
	         * @param {?} hostSelector
	         * @return {?}
	         */
	        ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	            var _this = this;
	            var /** @type {?} */ isRe = /\[is=([^\]]*)\]/g;
	            scopeSelector = scopeSelector.replace(isRe, function (_) {
	                var parts = [];
	                for (var _i = 1; _i < arguments.length; _i++) {
	                    parts[_i - 1] = arguments[_i];
	                }
	                return parts[0];
	            });
	            var /** @type {?} */ attrName = '[' + scopeSelector + ']';
	            var /** @type {?} */ _scopeSelectorPart = function (p) {
	                var /** @type {?} */ scopedP = p.trim();
	                if (!scopedP) {
	                    return '';
	                }
	                if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                    scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	                }
	                else {
	                    // remove :host since it should be unnecessary
	                    var /** @type {?} */ t = p.replace(_polyfillHostRe, '');
	                    if (t.length > 0) {
	                        var /** @type {?} */ matches = t.match(/([^:]*)(:*)(.*)/);
	                        if (matches) {
	                            scopedP = matches[1] + attrName + matches[2] + matches[3];
	                        }
	                    }
	                }
	                return scopedP;
	            };
	            var /** @type {?} */ safeContent = new SafeSelector(selector);
	            selector = safeContent.content();
	            var /** @type {?} */ scopedSelector = '';
	            var /** @type {?} */ startIndex = 0;
	            var /** @type {?} */ res;
	            var /** @type {?} */ sep = /( |>|\+|~(?!=))\s*/g;
	            var /** @type {?} */ scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	            while ((res = sep.exec(selector)) !== null) {
	                var /** @type {?} */ separator = res[1];
	                var /** @type {?} */ part = selector.slice(startIndex, res.index).trim();
	                // if a selector appears before :host-context it should not be shimmed as it
	                // matches on ancestor elements and not on elements in the host's shadow
	                var /** @type {?} */ scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	                scopedSelector += scopedPart + " " + separator + " ";
	                startIndex = sep.lastIndex;
	            }
	            scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	            // replace the placeholders with their original values
	            return safeContent.restore(scopedSelector);
	        };
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	            return selector.replace(_colonHostContextRe, _polyfillHostContext)
	                .replace(_colonHostRe, _polyfillHost);
	        };
	        return ShadowCss;
	    }());
	    var SafeSelector = (function () {
	        /**
	         * @param {?} selector
	         */
	        function SafeSelector(selector) {
	            var _this = this;
	            this.placeholders = [];
	            this.index = 0;
	            // Replaces attribute selectors with placeholders.
	            // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	            selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	                var replaceBy = "__ph-" + _this.index + "__";
	                _this.placeholders.push(keep);
	                _this.index++;
	                return replaceBy;
	            });
	            // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	            // WS and "+" would otherwise be interpreted as selector separators.
	            this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	                var replaceBy = "__ph-" + _this.index + "__";
	                _this.placeholders.push(exp);
	                _this.index++;
	                return pseudo + replaceBy;
	            });
	        }
	        ;
	        /**
	         * @param {?} content
	         * @return {?}
	         */
	        SafeSelector.prototype.restore = function (content) {
	            var _this = this;
	            return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	        };
	        /**
	         * @return {?}
	         */
	        SafeSelector.prototype.content = function () { return this._content; };
	        return SafeSelector;
	    }());
	    var /** @type {?} */ _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	    var /** @type {?} */ _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	    var /** @type {?} */ _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	    var /** @type {?} */ _polyfillHost = '-shadowcsshost';
	    // note: :host-context pre-processed to -shadowcsshostcontext.
	    var /** @type {?} */ _polyfillHostContext = '-shadowcsscontext';
	    var /** @type {?} */ _parenSuffix = ')(?:\\((' +
	        '(?:\\([^)(]*\\)|[^)(]*)+?' +
	        ')\\))?([^,{]*)';
	    var /** @type {?} */ _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	    var /** @type {?} */ _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	    var /** @type {?} */ _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	    var /** @type {?} */ _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	    var /** @type {?} */ _shadowDOMSelectorsRe = [
	        /::shadow/g,
	        /::content/g,
	        // Deprecated selectors
	        /\/shadow-deep\//g,
	        /\/shadow\//g,
	    ];
	    var /** @type {?} */ _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	    var /** @type {?} */ _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	    var /** @type {?} */ _polyfillHostRe = /-shadowcsshost/gim;
	    var /** @type {?} */ _colonHostRe = /:host/gim;
	    var /** @type {?} */ _colonHostContextRe = /:host-context/gim;
	    var /** @type {?} */ _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function stripComments(input) {
	        return input.replace(_commentRe, '');
	    }
	    // all comments except inline source mapping
	    var /** @type {?} */ _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function extractSourceMappingUrl(input) {
	        var /** @type {?} */ matcher = input.match(_sourceMappingUrlRe);
	        return matcher ? matcher[0] : '';
	    }
	    var /** @type {?} */ _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	    var /** @type {?} */ _curlyRe = /([{}])/g;
	    var /** @type {?} */ OPEN_CURLY = '{';
	    var /** @type {?} */ CLOSE_CURLY = '}';
	    var /** @type {?} */ BLOCK_PLACEHOLDER = '%BLOCK%';
	    var CssRule = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} content
	         */
	        function CssRule(selector, content) {
	            this.selector = selector;
	            this.content = content;
	        }
	        return CssRule;
	    }());
	    /**
	     * @param {?} input
	     * @param {?} ruleCallback
	     * @return {?}
	     */
	    function processRules(input, ruleCallback) {
	        var /** @type {?} */ inputWithEscapedBlocks = escapeBlocks(input);
	        var /** @type {?} */ nextBlockIndex = 0;
	        return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ selector = m[2];
	            var /** @type {?} */ content = '';
	            var /** @type {?} */ suffix = m[4];
	            var /** @type {?} */ contentPrefix = '';
	            if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	                content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	                suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	                contentPrefix = '{';
	            }
	            var /** @type {?} */ rule = ruleCallback(new CssRule(selector, content));
	            return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	        });
	    }
	    var StringWithEscapedBlocks = (function () {
	        /**
	         * @param {?} escapedString
	         * @param {?} blocks
	         */
	        function StringWithEscapedBlocks(escapedString, blocks) {
	            this.escapedString = escapedString;
	            this.blocks = blocks;
	        }
	        return StringWithEscapedBlocks;
	    }());
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function escapeBlocks(input) {
	        var /** @type {?} */ inputParts = input.split(_curlyRe);
	        var /** @type {?} */ resultParts = [];
	        var /** @type {?} */ escapedBlocks = [];
	        var /** @type {?} */ bracketCount = 0;
	        var /** @type {?} */ currentBlockParts = [];
	        for (var /** @type {?} */ partIndex = 0; partIndex < inputParts.length; partIndex++) {
	            var /** @type {?} */ part = inputParts[partIndex];
	            if (part == CLOSE_CURLY) {
	                bracketCount--;
	            }
	            if (bracketCount > 0) {
	                currentBlockParts.push(part);
	            }
	            else {
	                if (currentBlockParts.length > 0) {
	                    escapedBlocks.push(currentBlockParts.join(''));
	                    resultParts.push(BLOCK_PLACEHOLDER);
	                    currentBlockParts = [];
	                }
	                resultParts.push(part);
	            }
	            if (part == OPEN_CURLY) {
	                bracketCount++;
	            }
	        }
	        if (currentBlockParts.length > 0) {
	            escapedBlocks.push(currentBlockParts.join(''));
	            resultParts.push(BLOCK_PLACEHOLDER);
	        }
	        return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$15 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$15 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	    var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    var StylesCompileDependency = (function () {
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} isShimmed
	         * @param {?} valuePlaceholder
	         */
	        function StylesCompileDependency(name, moduleUrl, isShimmed, valuePlaceholder) {
	            this.name = name;
	            this.moduleUrl = moduleUrl;
	            this.isShimmed = isShimmed;
	            this.valuePlaceholder = valuePlaceholder;
	        }
	        return StylesCompileDependency;
	    }());
	    var StylesCompileResult = (function () {
	        /**
	         * @param {?} componentStylesheet
	         * @param {?} externalStylesheets
	         */
	        function StylesCompileResult(componentStylesheet, externalStylesheets) {
	            this.componentStylesheet = componentStylesheet;
	            this.externalStylesheets = externalStylesheets;
	        }
	        return StylesCompileResult;
	    }());
	    var CompiledStylesheet = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} stylesVar
	         * @param {?} dependencies
	         * @param {?} isShimmed
	         * @param {?} meta
	         */
	        function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	            this.statements = statements;
	            this.stylesVar = stylesVar;
	            this.dependencies = dependencies;
	            this.isShimmed = isShimmed;
	            this.meta = meta;
	        }
	        return CompiledStylesheet;
	    }());
	    var StyleCompiler = (function () {
	        /**
	         * @param {?} _urlResolver
	         */
	        function StyleCompiler(_urlResolver) {
	            this._urlResolver = _urlResolver;
	            this._shadowCss = new ShadowCss();
	        }
	        /**
	         * @param {?} comp
	         * @return {?}
	         */
	        StyleCompiler.prototype.compileComponent = function (comp) {
	            var _this = this;
	            var /** @type {?} */ externalStylesheets = [];
	            var /** @type {?} */ componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	                styles: comp.template.styles,
	                styleUrls: comp.template.styleUrls,
	                moduleUrl: identifierModuleUrl(comp.type)
	            }), true);
	            comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	                var /** @type {?} */ compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	                externalStylesheets.push(compiledStylesheet);
	            });
	            return new StylesCompileResult(componentStylesheet, externalStylesheets);
	        };
	        /**
	         * @param {?} comp
	         * @param {?} stylesheet
	         * @param {?} isComponentStylesheet
	         * @return {?}
	         */
	        StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	            var _this = this;
	            var /** @type {?} */ shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	            var /** @type {?} */ styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	            var /** @type {?} */ dependencies = [];
	            for (var /** @type {?} */ i = 0; i < stylesheet.styleUrls.length; i++) {
	                var /** @type {?} */ identifier = { reference: null };
	                dependencies.push(new StylesCompileDependency(getStylesVarName(null), stylesheet.styleUrls[i], shim, identifier));
	                styleExpressions.push(new ExternalExpr(identifier));
	            }
	            // styles variable contains plain strings and arrays of other styles arrays (recursive),
	            // so we set its type to dynamic.
	            var /** @type {?} */ stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	            var /** @type {?} */ stmt = variable(stylesVar)
	                .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]);
	            return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	        };
	        /**
	         * @param {?} style
	         * @param {?} shim
	         * @return {?}
	         */
	        StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	            return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	        };
	        StyleCompiler = __decorate$15([
	            CompilerInjectable(), 
	            __metadata$15('design:paramtypes', [UrlResolver])
	        ], StyleCompiler);
	        return StyleCompiler;
	    }());
	    /**
	     * @param {?} component
	     * @return {?}
	     */
	    function getStylesVarName(component) {
	        var /** @type {?} */ result = "styles";
	        if (component) {
	            result += "_" + identifierName(component.type);
	        }
	        return result;
	    }

	    var _DebugState = (function () {
	        /**
	         * @param {?} nodeIndex
	         * @param {?} sourceAst
	         */
	        function _DebugState(nodeIndex, sourceAst) {
	            this.nodeIndex = nodeIndex;
	            this.sourceAst = sourceAst;
	        }
	        return _DebugState;
	    }());
	    var /** @type {?} */ NULL_DEBUG_STATE = new _DebugState(null, null);
	    var CompileMethod = (function () {
	        /**
	         * @param {?} _view
	         */
	        function CompileMethod(_view) {
	            this._view = _view;
	            this._newState = NULL_DEBUG_STATE;
	            this._currState = NULL_DEBUG_STATE;
	            this._bodyStatements = [];
	            this._debugEnabled = this._view.genConfig.genDebugInfo;
	        }
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	            if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	                this._newState.sourceAst !== this._currState.sourceAst) {
	                var /** @type {?} */ expr = this._updateDebugContext(this._newState);
	                if (expr) {
	                    this._bodyStatements.push(expr.toStmt());
	                }
	            }
	        };
	        /**
	         * @param {?} newState
	         * @return {?}
	         */
	        CompileMethod.prototype._updateDebugContext = function (newState) {
	            this._currState = this._newState = newState;
	            if (this._debugEnabled) {
	                var /** @type {?} */ sourceLocation = newState.sourceAst ? newState.sourceAst.sourceSpan.start : null;
	                return THIS_EXPR.callMethod('debug', [
	                    literal(newState.nodeIndex),
	                    sourceLocation ? literal(sourceLocation.line) : NULL_EXPR,
	                    sourceLocation ? literal(sourceLocation.col) : NULL_EXPR
	                ]);
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} templateAst
	         * @return {?}
	         */
	        CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	            var /** @type {?} */ res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	            return res || NULL_EXPR;
	        };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} templateAst
	         * @return {?}
	         */
	        CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	            this._newState = new _DebugState(nodeIndex, templateAst);
	        };
	        /**
	         * @param {...?} stmts
	         * @return {?}
	         */
	        CompileMethod.prototype.push = function () {
	            var stmts = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                stmts[_i - 0] = arguments[_i];
	            }
	            this.addStmts(stmts);
	        };
	        /**
	         * @param {?} stmt
	         * @return {?}
	         */
	        CompileMethod.prototype.addStmt = function (stmt) {
	            this._updateDebugContextIfNeeded();
	            this._bodyStatements.push(stmt);
	        };
	        /**
	         * @param {?} stmts
	         * @return {?}
	         */
	        CompileMethod.prototype.addStmts = function (stmts) {
	            this._updateDebugContextIfNeeded();
	            (_a = this._bodyStatements).push.apply(_a, stmts);
	            var _a;
	        };
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	        /**
	         * @return {?}
	         */
	        CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	        return CompileMethod;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$25 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} property
	     * @param {?} callingView
	     * @param {?} definedView
	     * @return {?}
	     */
	    function getPropertyInView(property, callingView, definedView) {
	        if (callingView === definedView) {
	            return property;
	        }
	        else {
	            var /** @type {?} */ viewProp = THIS_EXPR;
	            var /** @type {?} */ currView = callingView;
	            while (currView !== definedView && currView.declarationElement.view) {
	                currView = currView.declarationElement.view;
	                viewProp = viewProp.prop('parentView');
	            }
	            if (currView !== definedView) {
	                throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
	            }
	            return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
	        }
	    }
	    var _ReplaceViewTransformer = (function (_super) {
	        __extends$25(_ReplaceViewTransformer, _super);
	        /**
	         * @param {?} _viewExpr
	         * @param {?} _view
	         */
	        function _ReplaceViewTransformer(_viewExpr, _view) {
	            _super.call(this);
	            this._viewExpr = _viewExpr;
	            this._view = _view;
	        }
	        /**
	         * @param {?} expr
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype._isThis = function (expr) {
	            return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {
	            return this._isThis(ast) ? this._viewExpr : ast;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {
	            if (this._isThis(ast.receiver)) {
	                // Note: Don't cast for members of the AppView base class...
	                if (this._view.fields.some(function (field) { return field.name == ast.name; }) ||
	                    this._view.getters.some(function (field) { return field.name == ast.name; })) {
	                    return this._viewExpr.cast(this._view.classType).prop(ast.name);
	                }
	            }
	            return _super.prototype.visitReadPropExpr.call(this, ast, context);
	        };
	        return _ReplaceViewTransformer;
	    }(ExpressionTransformer));
	    /**
	     * @param {?} view
	     * @param {?} token
	     * @param {?} optional
	     * @return {?}
	     */
	    function injectFromViewParentInjector(view, token, optional) {
	        var /** @type {?} */ viewExpr;
	        if (view.viewType === ViewType.HOST) {
	            viewExpr = THIS_EXPR;
	        }
	        else {
	            viewExpr = THIS_EXPR.prop('parentView');
	        }
	        var /** @type {?} */ args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
	        if (optional) {
	            args.push(NULL_EXPR);
	        }
	        return viewExpr.callMethod('injectorGet', args);
	    }
	    /**
	     * @param {?} component
	     * @param {?} embeddedTemplateIndex
	     * @return {?}
	     */
	    function getViewClassName(component, embeddedTemplateIndex) {
	        return "View_" + identifierName(component.type) + embeddedTemplateIndex;
	    }
	    /**
	     * @param {?} elementIndex
	     * @return {?}
	     */
	    function getHandleEventMethodName(elementIndex) {
	        return "handleEvent_" + elementIndex;
	    }

	    var ViewQueryValues = (function () {
	        /**
	         * @param {?} view
	         * @param {?} values
	         */
	        function ViewQueryValues(view, values) {
	            this.view = view;
	            this.values = values;
	        }
	        return ViewQueryValues;
	    }());
	    var CompileQuery = (function () {
	        /**
	         * @param {?} meta
	         * @param {?} queryList
	         * @param {?} ownerDirectiveExpression
	         * @param {?} view
	         */
	        function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	            this.meta = meta;
	            this.queryList = queryList;
	            this.ownerDirectiveExpression = ownerDirectiveExpression;
	            this.view = view;
	            this._values = new ViewQueryValues(view, []);
	        }
	        /**
	         * @param {?} value
	         * @param {?} view
	         * @return {?}
	         */
	        CompileQuery.prototype.addValue = function (value, view) {
	            var /** @type {?} */ currentView = view;
	            var /** @type {?} */ elPath = [];
	            while (currentView && currentView !== this.view) {
	                var /** @type {?} */ parentEl = currentView.declarationElement;
	                elPath.unshift(parentEl);
	                currentView = parentEl.view;
	            }
	            var /** @type {?} */ queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
	            var /** @type {?} */ viewValues = this._values;
	            elPath.forEach(function (el) {
	                var /** @type {?} */ last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	                if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                    viewValues = last;
	                }
	                else {
	                    var /** @type {?} */ newViewValues = new ViewQueryValues(el.embeddedView, []);
	                    viewValues.values.push(newViewValues);
	                    viewValues = newViewValues;
	                }
	            });
	            viewValues.values.push(value);
	            if (elPath.length > 0) {
	                view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileQuery.prototype._isStatic = function () {
	            return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	        };
	        /**
	         * @param {?} targetStaticMethod
	         * @param {?} targetDynamicMethod
	         * @return {?}
	         */
	        CompileQuery.prototype.generateStatements = function (targetStaticMethod, targetDynamicMethod) {
	            var /** @type {?} */ values = createQueryValues(this._values);
	            var /** @type {?} */ updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
	            if (this.ownerDirectiveExpression) {
	                var /** @type {?} */ valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	                updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	            }
	            if (!this.meta.first) {
	                updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	            }
	            if (this.meta.first && this._isStatic()) {
	                // for queries that don't change and the user asked for a single element,
	                // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	                // we don't do this for QueryLists for now as this would break the timing when
	                // we call QueryList listeners...
	                targetStaticMethod.addStmts(updateStmts);
	            }
	            else {
	                targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
	            }
	        };
	        return CompileQuery;
	    }());
	    /**
	     * @param {?} viewValues
	     * @return {?}
	     */
	    function createQueryValues(viewValues) {
	        return ListWrapper.flatten(viewValues.values.map(function (entry) {
	            if (entry instanceof ViewQueryValues) {
	                return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
	            }
	            else {
	                return (entry);
	            }
	        }));
	    }
	    /**
	     * @param {?} viewContainer
	     * @param {?} view
	     * @param {?} expressions
	     * @return {?}
	     */
	    function mapNestedViews(viewContainer, view, expressions) {
	        var /** @type {?} */ adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr); });
	        return viewContainer.callMethod('mapNestedViews', [
	            variable(view.className),
	            fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
	        ]);
	    }
	    /**
	     * @param {?} propertyName
	     * @param {?} compileView
	     * @return {?}
	     */
	    function createQueryList(propertyName, compileView) {
	        compileView.fields.push(new ClassField(propertyName, importType(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
	        var /** @type {?} */ expr = THIS_EXPR.prop(propertyName);
	        compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
	            .set(importExpr(createIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE]).instantiate([]))
	            .toStmt());
	        return expr;
	    }
	    /**
	     * @param {?} map
	     * @param {?} query
	     * @return {?}
	     */
	    function addQueryToTokenMap(map, query) {
	        query.meta.selectors.forEach(function (selector) {
	            var /** @type {?} */ entry = map.get(tokenReference(selector));
	            if (!entry) {
	                entry = [];
	                map.set(tokenReference(selector), entry);
	            }
	            entry.push(query);
	        });
	    }

	    var ViewTypeEnum = (function () {
	        function ViewTypeEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ViewTypeEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ViewType, value);
	        };
	        return ViewTypeEnum;
	    }());
	    var ViewEncapsulationEnum = (function () {
	        function ViewEncapsulationEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ViewEncapsulationEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ViewEncapsulation, value);
	        };
	        return ViewEncapsulationEnum;
	    }());
	    var ChangeDetectorStatusEnum = (function () {
	        function ChangeDetectorStatusEnum() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ChangeDetectorStatusEnum.fromValue = function (value) {
	            return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
	        };
	        return ChangeDetectorStatusEnum;
	    }());
	    var ViewConstructorVars = (function () {
	        function ViewConstructorVars() {
	        }
	        ViewConstructorVars.viewUtils = variable('viewUtils');
	        ViewConstructorVars.parentView = variable('parentView');
	        ViewConstructorVars.parentIndex = variable('parentIndex');
	        ViewConstructorVars.parentElement = variable('parentElement');
	        return ViewConstructorVars;
	    }());
	    var ViewProperties = (function () {
	        function ViewProperties() {
	        }
	        ViewProperties.renderer = THIS_EXPR.prop('renderer');
	        ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
	        return ViewProperties;
	    }());
	    var InjectMethodVars$1 = (function () {
	        function InjectMethodVars() {
	        }
	        InjectMethodVars.token = variable('token');
	        InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
	        InjectMethodVars.notFoundResult = variable('notFoundResult');
	        return InjectMethodVars;
	    }());
	    var DetectChangesVars = (function () {
	        function DetectChangesVars() {
	        }
	        DetectChangesVars.throwOnChange = variable("throwOnChange");
	        DetectChangesVars.changes = variable("changes");
	        DetectChangesVars.changed = variable("changed");
	        return DetectChangesVars;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewClassDependency = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} name
	         * @param {?} placeholder
	         */
	        function ViewClassDependency(comp, name, placeholder) {
	            this.comp = comp;
	            this.name = name;
	            this.placeholder = placeholder;
	        }
	        return ViewClassDependency;
	    }());
	    var ComponentFactoryDependency$1 = (function () {
	        /**
	         * @param {?} comp
	         * @param {?} placeholder
	         */
	        function ComponentFactoryDependency(comp, placeholder) {
	            this.comp = comp;
	            this.placeholder = placeholder;
	        }
	        return ComponentFactoryDependency;
	    }());
	    var DirectiveWrapperDependency = (function () {
	        /**
	         * @param {?} dir
	         * @param {?} name
	         * @param {?} placeholder
	         */
	        function DirectiveWrapperDependency(dir, name, placeholder) {
	            this.dir = dir;
	            this.name = name;
	            this.placeholder = placeholder;
	        }
	        return DirectiveWrapperDependency;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$24 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var CompileNode = (function () {
	        /**
	         * @param {?} parent
	         * @param {?} view
	         * @param {?} nodeIndex
	         * @param {?} renderNode
	         * @param {?} sourceAst
	         */
	        function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	            this.parent = parent;
	            this.view = view;
	            this.nodeIndex = nodeIndex;
	            this.renderNode = renderNode;
	            this.sourceAst = sourceAst;
	        }
	        /**
	         * @return {?}
	         */
	        CompileNode.prototype.isNull = function () { return !this.renderNode; };
	        /**
	         * @return {?}
	         */
	        CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	        return CompileNode;
	    }());
	    var CompileElement = (function (_super) {
	        __extends$24(CompileElement, _super);
	        /**
	         * @param {?} parent
	         * @param {?} view
	         * @param {?} nodeIndex
	         * @param {?} renderNode
	         * @param {?} sourceAst
	         * @param {?} component
	         * @param {?} _directives
	         * @param {?} _resolvedProvidersArray
	         * @param {?} hasViewContainer
	         * @param {?} hasEmbeddedView
	         * @param {?} references
	         */
	        function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references) {
	            var _this = this;
	            _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	            this.component = component;
	            this._directives = _directives;
	            this._resolvedProvidersArray = _resolvedProvidersArray;
	            this.hasViewContainer = hasViewContainer;
	            this.hasEmbeddedView = hasEmbeddedView;
	            this.compViewExpr = null;
	            this.instances = new Map();
	            this.directiveWrapperInstance = new Map();
	            this._queryCount = 0;
	            this._queries = new Map();
	            this.contentNodesByNgContentIndex = null;
	            this.referenceTokens = {};
	            references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	            this.elementRef =
	                importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
	            this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);
	            this.instances.set(resolveIdentifier(Identifiers.Injector), THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
	            this.instances.set(resolveIdentifier(Identifiers.Renderer), THIS_EXPR.prop('renderer'));
	            if (this.hasViewContainer || this.hasEmbeddedView) {
	                this._createViewContainer();
	            }
	            if (this.component) {
	                this._createComponentFactoryResolver();
	            }
	        }
	        /**
	         * @return {?}
	         */
	        CompileElement.createNull = function () {
	            return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype._createViewContainer = function () {
	            var /** @type {?} */ fieldName = "_vc_" + this.nodeIndex;
	            var /** @type {?} */ parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	            // private is fine here as no child view will reference a ViewContainer
	            this.view.fields.push(new ClassField(fieldName, importType(createIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
	            var /** @type {?} */ statement = THIS_EXPR.prop(fieldName)
	                .set(importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([
	                literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
	            ]))
	                .toStmt();
	            this.view.createMethod.addStmt(statement);
	            this.viewContainer = THIS_EXPR.prop(fieldName);
	            this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);
	            this.view.viewContainers.push(this.viewContainer);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype._createComponentFactoryResolver = function () {
	            var _this = this;
	            var /** @type {?} */ entryComponents = this.component.entryComponents.map(function (entryComponent) {
	                var /** @type {?} */ id = { reference: null };
	                _this.view.targetDependencies.push(new ComponentFactoryDependency$1(entryComponent, id));
	                return id;
	            });
	            if (!entryComponents || entryComponents.length === 0) {
	                return;
	            }
	            var /** @type {?} */ createComponentFactoryResolverExpr = importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
	                literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),
	                injectFromViewParentInjector(this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)
	            ]);
	            var /** @type {?} */ provider = {
	                token: createIdentifierToken(Identifiers.ComponentFactoryResolver),
	                useValue: createComponentFactoryResolverExpr
	            };
	            // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
	            // ProviderAstType.PrivateService as only the component and its view can see it,
	            // but nobody else
	            this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
	        };
	        /**
	         * @param {?} compViewExpr
	         * @return {?}
	         */
	        CompileElement.prototype.setComponentView = function (compViewExpr) {
	            this.compViewExpr = compViewExpr;
	            this.contentNodesByNgContentIndex =
	                new Array(this.component.template.ngContentSelectors.length);
	            for (var /** @type {?} */ i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	                this.contentNodesByNgContentIndex[i] = [];
	            }
	        };
	        /**
	         * @param {?} embeddedView
	         * @return {?}
	         */
	        CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	            this.embeddedView = embeddedView;
	            if (isPresent(embeddedView)) {
	                var /** @type {?} */ createTemplateRefExpr = importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([
	                    THIS_EXPR, literal(this.nodeIndex), this.renderNode
	                ]);
	                var /** @type {?} */ provider = {
	                    token: createIdentifierToken(Identifiers.TemplateRef),
	                    useValue: createTemplateRefExpr
	                };
	                // Add TemplateRef as first provider as it does not have deps on other providers
	                this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.beforeChildren = function () {
	            var _this = this;
	            if (this.hasViewContainer) {
	                this.instances.set(resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));
	            }
	            this._resolvedProviders = new Map();
	            this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(tokenReference(provider.token), provider); });
	            // create all the provider instances, some in the view constructor,
	            // some as getters. We rely on the fact that they are already sorted topologically.
	            Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	                var /** @type {?} */ isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||
	                    resolvedProvider.providerType === ProviderAstType.Directive;
	                var /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                    if (provider.useExisting) {
	                        return _this._getDependency(resolvedProvider.providerType, { token: provider.useExisting });
	                    }
	                    else if (provider.useFactory) {
	                        var /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;
	                        var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                        return importExpr(provider.useFactory).callFn(depsExpr);
	                    }
	                    else if (provider.useClass) {
	                        var /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;
	                        var /** @type {?} */ depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                        if (isDirectiveWrapper) {
	                            var /** @type {?} */ directiveWrapperIdentifier = { reference: null };
	                            _this.view.targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass), directiveWrapperIdentifier));
	                            return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
	                        }
	                        else {
	                            return importExpr(provider.useClass)
	                                .instantiate(depsExpr, importType(provider.useClass));
	                        }
	                    }
	                    else {
	                        return convertValueToOutputAst(provider.useValue);
	                    }
	                });
	                var /** @type {?} */ propName = "_" + tokenName(resolvedProvider.token) + "_" + _this.nodeIndex + "_" + _this.instances.size;
	                var /** @type {?} */ instance = createProviderProperty(propName, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	                if (isDirectiveWrapper) {
	                    _this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);
	                    _this.instances.set(tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));
	                }
	                else {
	                    _this.instances.set(tokenReference(resolvedProvider.token), instance);
	                }
	            });
	            var _loop_1 = function(i) {
	                var /** @type {?} */ directive = this_1._directives[i];
	                var /** @type {?} */ directiveInstance = this_1.instances.get(tokenReference(identifierToken(directive.type)));
	                directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	            };
	            var this_1 = this;
	            for (var /** @type {?} */ i = 0; i < this._directives.length; i++) {
	                _loop_1(i);
	            }
	            Object.keys(this.referenceTokens).forEach(function (varName) {
	                var /** @type {?} */ token = _this.referenceTokens[varName];
	                var /** @type {?} */ varValue;
	                if (token) {
	                    varValue = _this.instances.get(tokenReference(token));
	                }
	                else {
	                    varValue = _this.renderNode;
	                }
	                _this.view.locals.set(varName, varValue);
	            });
	        };
	        /**
	         * @param {?} childNodeCount
	         * @return {?}
	         */
	        CompileElement.prototype.afterChildren = function (childNodeCount) {
	            var _this = this;
	            Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	                // Note: afterChildren is called after recursing into children.
	                // This is good so that an injector match in an element that is closer to a requesting element
	                // matches first.
	                var /** @type {?} */ providerExpr = _this.instances.get(tokenReference(resolvedProvider.token));
	                // Note: view providers are only visible on the injector of that element.
	                // This is not fully correct as the rules during codegen don't allow a directive
	                // to get hold of a view provdier on the same element. We still do this semantic
	                // as it simplifies our model to having only one runtime injector per element.
	                var /** @type {?} */ providerChildNodeCount = resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;
	                _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	            });
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.finish = function () {
	            var _this = this;
	            Array.from(this._queries.values())
	                .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.view.createMethod, _this.view.updateContentQueriesMethod); }); });
	        };
	        /**
	         * @param {?} ngContentIndex
	         * @param {?} nodeExpr
	         * @return {?}
	         */
	        CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	            this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.getComponent = function () {
	            return isPresent(this.component) ?
	                this.instances.get(tokenReference(identifierToken(this.component.type))) :
	                null;
	        };
	        /**
	         * @return {?}
	         */
	        CompileElement.prototype.getProviderTokens = function () {
	            return Array.from(this._resolvedProviders.values()).map(function (provider) { return provider.token; });
	        };
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        CompileElement.prototype.getQueriesFor = function (token) {
	            var /** @type {?} */ result = [];
	            var /** @type {?} */ currentEl = this;
	            var /** @type {?} */ distance = 0;
	            var /** @type {?} */ queries;
	            while (!currentEl.isNull()) {
	                queries = currentEl._queries.get(tokenReference(token));
	                if (isPresent(queries)) {
	                    result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	                }
	                if (currentEl._directives.length > 0) {
	                    distance++;
	                }
	                currentEl = currentEl.parent;
	            }
	            queries = this.view.componentView.viewQueries.get(tokenReference(token));
	            if (isPresent(queries)) {
	                result.push.apply(result, queries);
	            }
	            return result;
	        };
	        /**
	         * @param {?} queryMeta
	         * @param {?} directiveInstance
	         * @return {?}
	         */
	        CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	            var /** @type {?} */ propName = "_query_" + tokenName(queryMeta.selectors[0]) + "_" + this.nodeIndex + "_" + this._queryCount++;
	            var /** @type {?} */ queryList = createQueryList(propName, this.view);
	            var /** @type {?} */ query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	            addQueryToTokenMap(this._queries, query);
	            return query;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @return {?}
	         */
	        CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	            var /** @type {?} */ result = null;
	            if (isPresent(dep.token)) {
	                // access builtins with special visibility
	                if (!result) {
	                    if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                        if (requestingProviderType === ProviderAstType.Component) {
	                            return this.compViewExpr.prop('ref');
	                        }
	                        else {
	                            return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                        }
	                    }
	                }
	                // access regular providers on the element
	                if (!result) {
	                    var /** @type {?} */ resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));
	                    // don't allow directives / public services to access private services.
	                    // only components and private services can access private services.
	                    if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||
	                        requestingProviderType === ProviderAstType.PublicService) &&
	                        resolvedProvider.providerType === ProviderAstType.PrivateService) {
	                        return null;
	                    }
	                    result = this.instances.get(tokenReference(dep.token));
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} requestingProviderType
	         * @param {?} dep
	         * @return {?}
	         */
	        CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	            var /** @type {?} */ currElement = this;
	            var /** @type {?} */ result = null;
	            if (dep.isValue) {
	                result = literal(dep.value);
	            }
	            if (!result && !dep.isSkipSelf) {
	                result = this._getLocalDependency(requestingProviderType, dep);
	            }
	            // check parent elements
	            while (!result && !currElement.parent.isNull()) {
	                currElement = currElement.parent;
	                result = currElement._getLocalDependency(ProviderAstType.PublicService, { token: dep.token });
	            }
	            if (!result) {
	                result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
	            }
	            if (!result) {
	                result = NULL_EXPR;
	            }
	            return getPropertyInView(result, this.view, currElement.view);
	        };
	        return CompileElement;
	    }(CompileNode));
	    /**
	     * @param {?} nodeIndex
	     * @param {?} childNodeCount
	     * @param {?} provider
	     * @param {?} providerExpr
	     * @return {?}
	     */
	    function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	        var /** @type {?} */ indexCondition;
	        if (childNodeCount > 0) {
	            indexCondition = literal(nodeIndex)
	                .lowerEquals(InjectMethodVars$1.requestNodeIndex)
	                .and(InjectMethodVars$1.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
	        }
	        else {
	            indexCondition = literal(nodeIndex).identical(InjectMethodVars$1.requestNodeIndex);
	        }
	        return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
	    }
	    /**
	     * @param {?} propName
	     * @param {?} providerValueExpressions
	     * @param {?} isMulti
	     * @param {?} isEager
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function createProviderProperty(propName, providerValueExpressions, isMulti, isEager, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ resolvedProviderValueExpr;
	        var /** @type {?} */ type;
	        if (isMulti) {
	            resolvedProviderValueExpr = literalArr(providerValueExpressions);
	            type = new ArrayType(DYNAMIC_TYPE);
	        }
	        else {
	            resolvedProviderValueExpr = providerValueExpressions[0];
	            type = providerValueExpressions[0].type;
	        }
	        if (!type) {
	            type = DYNAMIC_TYPE;
	        }
	        if (isEager) {
	            view.fields.push(new ClassField(propName, type));
	            view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	        }
	        else {
	            var /** @type {?} */ internalField = "_" + propName;
	            view.fields.push(new ClassField(internalField, type));
	            var /** @type {?} */ getter = new CompileMethod(view);
	            getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	            // Note: Equals is important for JS so that it also checks the undefined case!
	            getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	            getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
	            view.getters.push(new ClassGetter(propName, getter.finish(), type));
	        }
	        return THIS_EXPR.prop(propName);
	    }

	    var CompilePipe = (function () {
	        /**
	         * @param {?} view
	         * @param {?} meta
	         */
	        function CompilePipe(view, meta) {
	            var _this = this;
	            this.view = view;
	            this.meta = meta;
	            this._purePipeProxyCount = 0;
	            this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	            var deps = this.meta.type.diDeps.map(function (diDep) {
	                if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {
	                    return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	                }
	                return injectFromViewParentInjector(view, diDep.token, false);
	            });
	            this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
	            this.view.createMethod.resetDebugInfo(null, null);
	            this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
	                .set(importExpr(this.meta.type).instantiate(deps))
	                .toStmt());
	        }
	        /**
	         * @param {?} view
	         * @param {?} name
	         * @param {?} args
	         * @return {?}
	         */
	        CompilePipe.call = function (view, name, args) {
	            var /** @type {?} */ compView = view.componentView;
	            var /** @type {?} */ meta = _findPipeMeta(compView, name);
	            var /** @type {?} */ pipe;
	            if (meta.pure) {
	                // pure pipes live on the component view
	                pipe = compView.purePipes.get(name);
	                if (!pipe) {
	                    pipe = new CompilePipe(compView, meta);
	                    compView.purePipes.set(name, pipe);
	                    compView.pipes.push(pipe);
	                }
	            }
	            else {
	                // Non pure pipes live on the view that called it
	                pipe = new CompilePipe(view, meta);
	                view.pipes.push(pipe);
	            }
	            return pipe._call(view, args);
	        };
	        Object.defineProperty(CompilePipe.prototype, "pure", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.meta.pure; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} callingView
	         * @param {?} args
	         * @return {?}
	         */
	        CompilePipe.prototype._call = function (callingView, args) {
	            if (this.meta.pure) {
	                // PurePipeProxies live on the view that called them.
	                var /** @type {?} */ purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
	                var /** @type {?} */ pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
	                createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                    .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });
	                return importExpr(createIdentifier(Identifiers.castByValue))
	                    .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
	                    .callFn(args);
	            }
	            else {
	                return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	            }
	        };
	        return CompilePipe;
	    }());
	    /**
	     * @param {?} view
	     * @param {?} name
	     * @return {?}
	     */
	    function _findPipeMeta(view, name) {
	        var /** @type {?} */ pipeMeta = null;
	        for (var /** @type {?} */ i = view.pipeMetas.length - 1; i >= 0; i--) {
	            var /** @type {?} */ localPipeMeta = view.pipeMetas[i];
	            if (localPipeMeta.name == name) {
	                pipeMeta = localPipeMeta;
	                break;
	            }
	        }
	        if (!pipeMeta) {
	            throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	        }
	        return pipeMeta;
	    }

	    var CompileViewRootNodeType = {};
	    CompileViewRootNodeType.Node = 0;
	    CompileViewRootNodeType.ViewContainer = 1;
	    CompileViewRootNodeType.NgContent = 2;
	    CompileViewRootNodeType[CompileViewRootNodeType.Node] = "Node";
	    CompileViewRootNodeType[CompileViewRootNodeType.ViewContainer] = "ViewContainer";
	    CompileViewRootNodeType[CompileViewRootNodeType.NgContent] = "NgContent";
	    var CompileViewRootNode = (function () {
	        /**
	         * @param {?} type
	         * @param {?} expr
	         * @param {?=} ngContentIndex
	         */
	        function CompileViewRootNode(type, expr, ngContentIndex) {
	            this.type = type;
	            this.expr = expr;
	            this.ngContentIndex = ngContentIndex;
	        }
	        return CompileViewRootNode;
	    }());
	    var CompileView = (function () {
	        /**
	         * @param {?} component
	         * @param {?} genConfig
	         * @param {?} pipeMetas
	         * @param {?} styles
	         * @param {?} animations
	         * @param {?} viewIndex
	         * @param {?} declarationElement
	         * @param {?} templateVariableBindings
	         * @param {?} targetDependencies
	         */
	        function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings, targetDependencies) {
	            var _this = this;
	            this.component = component;
	            this.genConfig = genConfig;
	            this.pipeMetas = pipeMetas;
	            this.styles = styles;
	            this.animations = animations;
	            this.viewIndex = viewIndex;
	            this.declarationElement = declarationElement;
	            this.templateVariableBindings = templateVariableBindings;
	            this.targetDependencies = targetDependencies;
	            this.viewChildren = [];
	            this.nodes = [];
	            this.rootNodes = [];
	            this.lastRenderNode = NULL_EXPR;
	            this.viewContainers = [];
	            this.methods = [];
	            this.ctorStmts = [];
	            this.fields = [];
	            this.getters = [];
	            this.disposables = [];
	            this.purePipes = new Map();
	            this.pipes = [];
	            this.locals = new Map();
	            this.literalArrayCount = 0;
	            this.literalMapCount = 0;
	            this.pipeCount = 0;
	            this.createMethod = new CompileMethod(this);
	            this.animationBindingsMethod = new CompileMethod(this);
	            this.injectorGetMethod = new CompileMethod(this);
	            this.updateContentQueriesMethod = new CompileMethod(this);
	            this.dirtyParentQueriesMethod = new CompileMethod(this);
	            this.updateViewQueriesMethod = new CompileMethod(this);
	            this.detectChangesInInputsMethod = new CompileMethod(this);
	            this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
	            this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
	            this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
	            this.destroyMethod = new CompileMethod(this);
	            this.detachMethod = new CompileMethod(this);
	            this.viewType = getViewType(component, viewIndex);
	            this.className = getViewClassName(component, viewIndex);
	            this.classType = expressionType(variable(this.className));
	            this.classExpr = variable(this.className);
	            if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
	                this.componentView = this;
	            }
	            else {
	                this.componentView = this.declarationElement.view.componentView;
	            }
	            this.componentContext =
	                getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
	            var viewQueries = new Map();
	            if (this.viewType === ViewType.COMPONENT) {
	                var directiveInstance_1 = THIS_EXPR.prop('context');
	                this.component.viewQueries.forEach(function (queryMeta, queryIndex) {
	                    var propName = "_viewQuery_" + tokenName(queryMeta.selectors[0]) + "_" + queryIndex;
	                    var queryList = createQueryList(propName, _this);
	                    var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
	                    addQueryToTokenMap(viewQueries, query);
	                });
	            }
	            this.viewQueries = viewQueries;
	            templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
	            if (!this.declarationElement.isNull()) {
	                this.declarationElement.setEmbeddedView(this);
	            }
	        }
	        /**
	         * @param {?} name
	         * @param {?} input
	         * @param {?} args
	         * @return {?}
	         */
	        CompileView.prototype.callPipe = function (name, input, args) {
	            return CompilePipe.call(this, name, [input].concat(args));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        CompileView.prototype.getLocal = function (name) {
	            if (name == EventHandlerVars.event.name) {
	                return EventHandlerVars.event;
	            }
	            var /** @type {?} */ currView = this;
	            var /** @type {?} */ result = currView.locals.get(name);
	            while (!result && isPresent(currView.declarationElement.view)) {
	                currView = currView.declarationElement.view;
	                result = currView.locals.get(name);
	            }
	            if (isPresent(result)) {
	                return getPropertyInView(result, this, currView);
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        CompileView.prototype.finish = function () {
	            var _this = this;
	            Array.from(this.viewQueries.values())
	                .forEach(function (queries) { return queries.forEach(function (q) { return q.generateStatements(_this.createMethod, _this.updateViewQueriesMethod); }); });
	        };
	        return CompileView;
	    }());
	    /**
	     * @param {?} component
	     * @param {?} embeddedTemplateIndex
	     * @return {?}
	     */
	    function getViewType(component, embeddedTemplateIndex) {
	        if (embeddedTemplateIndex > 0) {
	            return ViewType.EMBEDDED;
	        }
	        if (component.isHost) {
	            return ViewType.HOST;
	        }
	        return ViewType.COMPONENT;
	    }

	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @param {?} bindToRenderer
	     * @return {?}
	     */
	    function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
	        var /** @type {?} */ usedEvents = collectEvents(boundEvents, directives);
	        if (!usedEvents.size) {
	            return false;
	        }
	        if (bindToRenderer) {
	            subscribeToRenderEvents(usedEvents, compileElement);
	        }
	        subscribeToDirectiveEvents(usedEvents, directives, compileElement);
	        generateHandleEventMethod(boundEvents, directives, compileElement);
	        return true;
	    }
	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @return {?}
	     */
	    function collectEvents(boundEvents, directives) {
	        var /** @type {?} */ usedEvents = new Map();
	        boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	        directives.forEach(function (dirAst) {
	            dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	        });
	        return usedEvents;
	    }
	    /**
	     * @param {?} usedEvents
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function subscribeToRenderEvents(usedEvents, compileElement) {
	        var /** @type {?} */ eventAndTargetExprs = [];
	        usedEvents.forEach(function (event) {
	            if (!event.phase) {
	                eventAndTargetExprs.push(literal(event.name), literal(event.target));
	            }
	        });
	        if (eventAndTargetExprs.length) {
	            var /** @type {?} */ disposableVar = variable("disposable_" + compileElement.view.disposables.length);
	            compileElement.view.disposables.push(disposableVar);
	            compileElement.view.createMethod.addStmt(disposableVar
	                .set(importExpr(createIdentifier(Identifiers.subscribeToRenderElement)).callFn([
	                THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),
	                handleEventExpr(compileElement)
	            ]))
	                .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
	        }
	    }
	    /**
	     * @param {?} usedEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
	        var /** @type {?} */ usedEventNames = Array.from(usedEvents.keys());
	        directives.forEach(function (dirAst) {
	            var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	            compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
	        });
	    }
	    /**
	     * @param {?} boundEvents
	     * @param {?} directives
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function generateHandleEventMethod(boundEvents, directives, compileElement) {
	        var /** @type {?} */ hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent; }); });
	        var /** @type {?} */ markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
	        var /** @type {?} */ handleEventStmts = new CompileMethod(compileElement.view);
	        handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
	        var /** @type {?} */ eventNameVar = variable('eventName');
	        var /** @type {?} */ resultVar = variable('result');
	        handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
	        directives.forEach(function (dirAst, dirIdx) {
	            var /** @type {?} */ dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	            if (dirAst.hostEvents.length > 0) {
	                handleEventStmts.push(resultVar
	                    .set(DirectiveWrapperExpressions
	                    .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)
	                    .and(resultVar))
	                    .toStmt());
	            }
	        });
	        boundEvents.forEach(function (renderEvent, renderEventIdx) {
	            var /** @type {?} */ evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
	            var /** @type {?} */ trueStmts = evalResult.stmts;
	            if (evalResult.preventDefault) {
	                trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	            }
	            // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	            handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
	        });
	        handleEventStmts.push(new ReturnStatement(resultVar));
	        compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [
	            new FnParam(eventNameVar.name, STRING_TYPE),
	            new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	        ], handleEventStmts.finish(), BOOL_TYPE));
	    }
	    /**
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function handleEventExpr(compileElement) {
	        var /** @type {?} */ handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
	        return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
	    }

	    var /** @type {?} */ STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
	    var /** @type {?} */ NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
	    /**
	     * @param {?} directiveMeta
	     * @param {?} directiveInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	        var /** @type {?} */ afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	        afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
	            afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	        }
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
	            afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} directiveMeta
	     * @param {?} directiveInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ lifecycleHooks = directiveMeta.type.lifecycleHooks;
	        var /** @type {?} */ afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	        afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
	            afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	        }
	        if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
	            afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} dir
	     * @param {?} directiveWrapperIntance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
	        compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
	        compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
	    }
	    /**
	     * @param {?} provider
	     * @param {?} providerInstance
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
	        var /** @type {?} */ onDestroyMethod = compileElement.view.destroyMethod;
	        onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        if (provider.providerType !== ProviderAstType.Directive &&
	            provider.providerType !== ProviderAstType.Component &&
	            provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	            onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
	        }
	    }
	    /**
	     * @param {?} pipeMeta
	     * @param {?} pipeInstance
	     * @param {?} view
	     * @return {?}
	     */
	    function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	        var /** @type {?} */ onDestroyMethod = view.destroyMethod;
	        if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	            onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	        }
	    }

	    /**
	     * @param {?} boundText
	     * @param {?} compileNode
	     * @param {?} view
	     * @return {?}
	     */
	    function bindRenderText(boundText, compileNode, view) {
	        var /** @type {?} */ valueField = createCheckBindingField(view);
	        var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
	        if (!evalResult) {
	            return null;
	        }
	        view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	        view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer')
	                .callMethod('setText', [compileNode.renderNode, evalResult.currValExpr])
	                .toStmt()]));
	    }
	    /**
	     * @param {?} boundProps
	     * @param {?} boundOutputs
	     * @param {?} hasEvents
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindRenderInputs(boundProps, boundOutputs, hasEvents, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ renderNode = compileElement.renderNode;
	        boundProps.forEach(function (boundProp) {
	            var /** @type {?} */ bindingField = createCheckBindingField(view);
	            view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	            var /** @type {?} */ evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
	            if (!evalResult) {
	                return;
	            }
	            var /** @type {?} */ checkBindingStmts = [];
	            var /** @type {?} */ compileMethod = view.detectChangesRenderPropertiesMethod;
	            switch (boundProp.type) {
	                case PropertyBindingType.Property:
	                case PropertyBindingType.Attribute:
	                case PropertyBindingType.Class:
	                case PropertyBindingType.Style:
	                    checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
	                    break;
	                case PropertyBindingType.Animation:
	                    compileMethod = view.animationBindingsMethod;
	                    var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, boundOutputs, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :
	                        importExpr(createIdentifier(Identifiers.noop)))
	                        .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                    checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
	                    view.detachMethod.addStmts(detachStmts);
	                    break;
	            }
	            compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
	        });
	    }
	    /**
	     * @param {?} directiveAst
	     * @param {?} directiveWrapperInstance
	     * @param {?} compileElement
	     * @param {?} elementName
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
	        // We need to provide the SecurityContext for properties that could need sanitization.
	        var /** @type {?} */ runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext; })
	            .map(function (boundProp) {
	            var /** @type {?} */ ctx;
	            switch (boundProp.type) {
	                case PropertyBindingType.Property:
	                    ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
	                    break;
	                case PropertyBindingType.Attribute:
	                    ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
	                    break;
	                default:
	                    throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
	            }
	            return createEnumExpression(Identifiers.SecurityContext, ctx);
	        });
	        compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
	    }
	    /**
	     * @param {?} directiveAst
	     * @param {?} directiveWrapperInstance
	     * @param {?} dirIndex
	     * @param {?} compileElement
	     * @return {?}
	     */
	    function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
	        var /** @type {?} */ view = compileElement.view;
	        var /** @type {?} */ detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	        detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	        directiveAst.inputs.forEach(function (input, inputIdx) {
	            // Note: We can't use `fields.length` here, as we are not adding a field!
	            var /** @type {?} */ bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
	            detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	            var /** @type {?} */ evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
	            if (!evalResult) {
	                return;
	            }
	            detectChangesInInputsMethod.addStmts(evalResult.stmts);
	            detectChangesInInputsMethod.addStmt(directiveWrapperInstance
	                .callMethod("check_" + input.directiveName, [
	                evalResult.currValExpr, DetectChangesVars.throwOnChange,
	                evalResult.forceUpdate || literal(false)
	            ])
	                .toStmt());
	        });
	        var /** @type {?} */ isOnPushComp = directiveAst.directive.isComponent &&
	            !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	        var /** @type {?} */ directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
	        var /** @type {?} */ directiveDetectChangesStmt = isOnPushComp ?
	            new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :
	            directiveDetectChangesExpr.toStmt();
	        detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
	    }

	    /**
	     * @param {?} ce
	     * @return {?}
	     */
	    function bindQueryValues(ce) {
	        var /** @type {?} */ queriesWithReads = [];
	        ce.getProviderTokens().forEach(function (token) {
	            var /** @type {?} */ queriesForProvider = ce.getQueriesFor(token);
	            queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, token); }));
	        });
	        Object.keys(ce.referenceTokens).forEach(function (varName) {
	            var /** @type {?} */ varToken = { value: varName };
	            queriesWithReads.push.apply(queriesWithReads, ce.getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	        });
	        queriesWithReads.forEach(function (queryWithRead) {
	            var /** @type {?} */ value;
	            if (queryWithRead.read.identifier) {
	                // query for an identifier
	                value = ce.instances.get(tokenReference(queryWithRead.read));
	            }
	            else {
	                // query for a reference
	                var /** @type {?} */ token = ce.referenceTokens[queryWithRead.read.value];
	                if (token) {
	                    value = ce.instances.get(tokenReference(token));
	                }
	                else {
	                    value = ce.elementRef;
	                }
	            }
	            if (value) {
	                queryWithRead.query.addValue(value, ce.view);
	            }
	        });
	    }
	    var _QueryWithRead = (function () {
	        /**
	         * @param {?} query
	         * @param {?} match
	         */
	        function _QueryWithRead(query, match) {
	            this.query = query;
	            this.read = query.meta.read || match;
	        }
	        return _QueryWithRead;
	    }());

	    /**
	     * @param {?} view
	     * @param {?} parsedTemplate
	     * @param {?} schemaRegistry
	     * @return {?}
	     */
	    function bindView(view, parsedTemplate, schemaRegistry) {
	        var /** @type {?} */ visitor = new ViewBinderVisitor(view, schemaRegistry);
	        templateVisitAll(visitor, parsedTemplate);
	        view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	    }
	    var ViewBinderVisitor = (function () {
	        /**
	         * @param {?} view
	         * @param {?} _schemaRegistry
	         */
	        function ViewBinderVisitor(view, _schemaRegistry) {
	            this.view = view;
	            this._schemaRegistry = _schemaRegistry;
	            this._nodeIndex = 0;
	        }
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	            var /** @type {?} */ node = this.view.nodes[this._nodeIndex++];
	            bindRenderText(ast, node, this.view);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	            this._nodeIndex++;
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	            var _this = this;
	            var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	            bindQueryValues(compileElement);
	            var /** @type {?} */ hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
	            bindRenderInputs(ast.inputs, ast.outputs, hasEvents, compileElement);
	            ast.directives.forEach(function (directiveAst, dirIndex) {
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	                bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
	            });
	            templateVisitAll(this, ast.children, compileElement);
	            // afterContent and afterView lifecycles need to be called bottom up
	            // so that children are notified before parents
	            ast.directives.forEach(function (directiveAst) {
	                var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	            });
	            ast.providers.forEach(function (providerAst) {
	                var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	                bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	            });
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	            var /** @type {?} */ compileElement = (this.view.nodes[this._nodeIndex++]);
	            bindQueryValues(compileElement);
	            bindOutputs(ast.outputs, ast.directives, compileElement, false);
	            ast.directives.forEach(function (directiveAst, dirIndex) {
	                var /** @type {?} */ directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	                var /** @type {?} */ directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	                bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	                bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	                bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	            });
	            ast.providers.forEach(function (providerAst) {
	                var /** @type {?} */ providerInstance = compileElement.instances.get(tokenReference(providerAst.token));
	                bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	            });
	            bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} eventTargetAndNames
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	        return ViewBinderVisitor;
	    }());

	    var /** @type {?} */ IMPLICIT_TEMPLATE_VAR = '\$implicit';
	    var /** @type {?} */ CLASS_ATTR$1 = 'class';
	    var /** @type {?} */ STYLE_ATTR = 'style';
	    var /** @type {?} */ NG_CONTAINER_TAG = 'ng-container';
	    var /** @type {?} */ parentRenderNodeVar = variable('parentRenderNode');
	    var /** @type {?} */ rootSelectorVar = variable('rootSelector');
	    /**
	     * @param {?} view
	     * @param {?} template
	     * @param {?} targetDependencies
	     * @return {?}
	     */
	    function buildView(view, template, targetDependencies) {
	        var /** @type {?} */ builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	        var /** @type {?} */ parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
	        templateVisitAll(builderVisitor, template, parentEl);
	        if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
	            view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
	        }
	        return builderVisitor.nestedViewCount;
	    }
	    /**
	     * @param {?} view
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    function finishView(view, targetStatements) {
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement) {
	                node.finish();
	                if (node.hasEmbeddedView) {
	                    finishView(node.embeddedView, targetStatements);
	                }
	            }
	        });
	        view.finish();
	        createViewTopLevelStmts(view, targetStatements);
	    }
	    var ViewBuilderVisitor = (function () {
	        /**
	         * @param {?} view
	         * @param {?} targetDependencies
	         */
	        function ViewBuilderVisitor(view, targetDependencies) {
	            this.view = view;
	            this.targetDependencies = targetDependencies;
	            this.nestedViewCount = 0;
	        }
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	            var /** @type {?} */ projectedNode = _getOuterContainerOrSelf(node);
	            var /** @type {?} */ parent = projectedNode.parent;
	            var /** @type {?} */ ngContentIndex = ((projectedNode.sourceAst)).ngContentIndex;
	            var /** @type {?} */ viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
	            if (this._isRootNode(parent)) {
	                if (this.view.viewType !== ViewType.COMPONENT) {
	                    this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	                }
	            }
	            else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
	                parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	            }
	        };
	        /**
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	            parent = _getOuterContainerParentOrSelf(parent);
	            if (this._isRootNode(parent)) {
	                if (this.view.viewType === ViewType.COMPONENT) {
	                    return parentRenderNodeVar;
	                }
	                else {
	                    // root node of an embedded/host view
	                    return NULL_EXPR;
	                }
	            }
	            else {
	                return isPresent(parent.component) &&
	                    parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?
	                    NULL_EXPR :
	                    parent.renderNode;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {
	            var /** @type {?} */ view = this.view;
	            if (view.rootNodes.length === 0 ||
	                view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
	                var /** @type {?} */ fieldName = "_el_" + view.nodes.length;
	                view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
	                view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                    .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))
	                    .toStmt());
	                view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
	            }
	            return view.rootNodes[view.rootNodes.length - 1].expr;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	            return this._visitText(ast, '', parent);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	            return this._visitText(ast, ast.value, parent);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} value
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	            var /** @type {?} */ fieldName = "_text_" + this.view.nodes.length;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	            var /** @type {?} */ createRenderNode = THIS_EXPR.prop(fieldName)
	                .set(ViewProperties.renderer.callMethod('createText', [
	                this._getParentRenderNode(parent), literal(value),
	                this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	            ]))
	                .toStmt();
	            this.view.nodes.push(compileNode);
	            this.view.createMethod.addStmt(createRenderNode);
	            this._addRootNodeAndProject(compileNode);
	            return renderNode;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	            // the projected nodes originate from a different view, so we don't
	            // have debug information for them...
	            this.view.createMethod.resetDebugInfo(null, ast);
	            var /** @type {?} */ parentRenderNode = this._getParentRenderNode(parent);
	            if (parentRenderNode !== NULL_EXPR) {
	                this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])
	                    .toStmt());
	            }
	            else if (this._isRootNode(parent)) {
	                if (this.view.viewType !== ViewType.COMPONENT) {
	                    // store root nodes only for embedded/host views
	                    this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	                }
	            }
	            else {
	                if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
	                    parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	            var /** @type {?} */ nodeIndex = this.view.nodes.length;
	            var /** @type {?} */ createRenderNodeExpr;
	            var /** @type {?} */ debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	            var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	            var /** @type {?} */ component = directives.find(function (directive) { return directive.isComponent; });
	            if (ast.name === NG_CONTAINER_TAG) {
	                createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	            }
	            else {
	                var /** @type {?} */ htmlAttrs = _readHtmlAttrs(ast.attrs);
	                var /** @type {?} */ attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v); }));
	                if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
	                    createRenderNodeExpr =
	                        importExpr(createIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([
	                            ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,
	                            debugContextExpr
	                        ]);
	                }
	                else {
	                    createRenderNodeExpr =
	                        importExpr(createIdentifier(Identifiers.createRenderElement)).callFn([
	                            ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),
	                            attrNameAndValues, debugContextExpr
	                        ]);
	                }
	            }
	            var /** @type {?} */ fieldName = "_el_" + nodeIndex;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
	            this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references);
	            this.view.nodes.push(compileElement);
	            var /** @type {?} */ compViewExpr = null;
	            if (isPresent(component)) {
	                var /** @type {?} */ nestedComponentIdentifier = { reference: null };
	                this.targetDependencies.push(new ViewClassDependency(component.type, getViewClassName(component, 0), nestedComponentIdentifier));
	                compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex); // fix highlighting: `
	                this.view.fields.push(new ClassField(compViewExpr.name, importType(createIdentifier(Identifiers.AppView), [importType(component.type)])));
	                this.view.viewChildren.push(compViewExpr);
	                compileElement.setComponentView(compViewExpr);
	                this.view.createMethod.addStmt(compViewExpr
	                    .set(importExpr(nestedComponentIdentifier).instantiate([
	                    ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode
	                ]))
	                    .toStmt());
	            }
	            compileElement.beforeChildren();
	            this._addRootNodeAndProject(compileElement);
	            templateVisitAll(this, ast.children, compileElement);
	            compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	            if (isPresent(compViewExpr)) {
	                this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} parent
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	            var /** @type {?} */ nodeIndex = this.view.nodes.length;
	            var /** @type {?} */ fieldName = "_anchor_" + nodeIndex;
	            this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
	            this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
	                this._getParentRenderNode(parent),
	                this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	            ]))
	                .toStmt());
	            var /** @type {?} */ renderNode = THIS_EXPR.prop(fieldName);
	            var /** @type {?} */ templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	            var /** @type {?} */ directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	            var /** @type {?} */ compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references);
	            this.view.nodes.push(compileElement);
	            this.nestedViewCount++;
	            var /** @type {?} */ embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings, this.targetDependencies);
	            this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	            compileElement.beforeChildren();
	            this._addRootNodeAndProject(compileElement);
	            compileElement.afterChildren(0);
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} eventTargetAndNames
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	        return ViewBuilderVisitor;
	    }());
	    /**
	     * Walks up the nodes while the direct parent is a container.
	     *
	     * Returns the outer container or the node itself when it is not a direct child of a container.
	     *
	     * \@internal
	     * @param {?} node
	     * @return {?}
	     */
	    function _getOuterContainerOrSelf(node) {
	        var /** @type {?} */ view = node.view;
	        while (_isNgContainer(node.parent, view)) {
	            node = node.parent;
	        }
	        return node;
	    }
	    /**
	     * Walks up the nodes while they are container and returns the first parent which is not.
	     *
	     * Returns the parent of the outer container or the node itself when it is not a container.
	     *
	     * \@internal
	     * @param {?} el
	     * @return {?}
	     */
	    function _getOuterContainerParentOrSelf(el) {
	        var /** @type {?} */ view = el.view;
	        while (_isNgContainer(el, view)) {
	            el = el.parent;
	        }
	        return el;
	    }
	    /**
	     * @param {?} node
	     * @param {?} view
	     * @return {?}
	     */
	    function _isNgContainer(node, view) {
	        return !node.isNull() && ((node.sourceAst)).name === NG_CONTAINER_TAG &&
	            node.view === view;
	    }
	    /**
	     * @param {?} declaredHtmlAttrs
	     * @param {?} directives
	     * @return {?}
	     */
	    function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	        var /** @type {?} */ mapResult = {};
	        Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key]; });
	        directives.forEach(function (directiveMeta) {
	            Object.keys(directiveMeta.hostAttributes).forEach(function (name) {
	                var /** @type {?} */ value = directiveMeta.hostAttributes[name];
	                var /** @type {?} */ prevValue = mapResult[name];
	                mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	            });
	        });
	        var /** @type {?} */ arrResult = [];
	        // Note: We need to sort to get a defined output order
	        // for tests and for caching generated artifacts...
	        Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]); });
	        return arrResult;
	    }
	    /**
	     * @param {?} attrs
	     * @return {?}
	     */
	    function _readHtmlAttrs(attrs) {
	        var /** @type {?} */ htmlAttrs = {};
	        attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	        return htmlAttrs;
	    }
	    /**
	     * @param {?} attrName
	     * @param {?} attrValue1
	     * @param {?} attrValue2
	     * @return {?}
	     */
	    function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	        if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	            return attrValue1 + " " + attrValue2;
	        }
	        else {
	            return attrValue2;
	        }
	    }
	    /**
	     * @param {?} view
	     * @param {?} targetStatements
	     * @return {?}
	     */
	    function createViewTopLevelStmts(view, targetStatements) {
	        var /** @type {?} */ nodeDebugInfosVar = NULL_EXPR;
	        if (view.genConfig.genDebugInfo) {
	            nodeDebugInfosVar = variable("nodeDebugInfos_" + identifierName(view.component.type) + view.viewIndex); // fix
	            // highlighting:
	            // `
	            targetStatements.push(((nodeDebugInfosVar))
	                .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(importType(createIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]));
	        }
	        var /** @type {?} */ renderCompTypeVar = variable("renderType_" + identifierName(view.component.type)); // fix highlighting: `
	        if (view.viewIndex === 0) {
	            var /** @type {?} */ templateUrlInfo = void 0;
	            if (view.component.template.templateUrl == identifierModuleUrl(view.component.type)) {
	                templateUrlInfo =
	                    identifierModuleUrl(view.component.type) + " class " + identifierName(view.component.type) + " - inline template";
	            }
	            else {
	                templateUrlInfo = view.component.template.templateUrl;
	            }
	            targetStatements.push(renderCompTypeVar
	                .set(importExpr(createIdentifier(Identifiers.createRenderComponentType)).callFn([
	                view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),
	                literal(view.component.template.ngContentSelectors.length),
	                ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),
	                view.styles,
	                literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp]; }), null, true),
	            ]))
	                .toDeclStmt(importType(createIdentifier(Identifiers.RenderComponentType))));
	        }
	        var /** @type {?} */ viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	        targetStatements.push(viewClass);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function createStaticNodeDebugInfo(node) {
	        var /** @type {?} */ compileElement = node instanceof CompileElement ? node : null;
	        var /** @type {?} */ providerTokens = [];
	        var /** @type {?} */ componentToken = NULL_EXPR;
	        var /** @type {?} */ varTokenEntries = [];
	        if (isPresent(compileElement)) {
	            providerTokens =
	                compileElement.getProviderTokens().map(function (token) { return createDiTokenExpression(token); });
	            if (isPresent(compileElement.component)) {
	                componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
	            }
	            Object.keys(compileElement.referenceTokens).forEach(function (varName) {
	                var /** @type {?} */ token = compileElement.referenceTokens[varName];
	                varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
	            });
	        }
	        return importExpr(createIdentifier(Identifiers.StaticNodeDebugInfo))
	            .instantiate([
	            literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
	            componentToken,
	            literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
	        ], importType(createIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
	    }
	    /**
	     * @param {?} view
	     * @param {?} renderCompTypeVar
	     * @param {?} nodeDebugInfosVar
	     * @return {?}
	     */
	    function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	        var /** @type {?} */ viewConstructorArgs = [
	            new FnParam(ViewConstructorVars.viewUtils.name, importType(createIdentifier(Identifiers.ViewUtils))),
	            new FnParam(ViewConstructorVars.parentView.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	            new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),
	            new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)
	        ];
	        var /** @type {?} */ superConstructorArgs = [
	            variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
	            ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,
	            ViewConstructorVars.parentElement,
	            ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
	        ];
	        if (view.genConfig.genDebugInfo) {
	            superConstructorArgs.push(nodeDebugInfosVar);
	        }
	        if (view.viewType === ViewType.EMBEDDED) {
	            viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(createIdentifier(Identifiers.ViewContainer))));
	            superConstructorArgs.push(variable('declaredViewContainer'));
	        }
	        var /** @type {?} */ viewMethods = [
	            new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(createIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),
	            new ClassMethod('injectorGetInternal', [
	                new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
	                // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	                new FnParam(InjectMethodVars$1.requestNodeIndex.name, NUMBER_TYPE),
	                new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
	            ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars$1.notFoundResult), DYNAMIC_TYPE),
	            new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),
	            new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	            new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),
	            new ClassMethod('detachInternal', [], view.detachMethod.finish()),
	            generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),
	            generateCreateEmbeddedViewsMethod(view)
	        ].filter(function (method) { return method.body.length > 0; });
	        var /** @type {?} */ superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
	        var /** @type {?} */ viewClass = createClassStmt({
	            name: view.className,
	            parent: importExpr(createIdentifier(superClass), [getContextType(view)]),
	            parentArgs: superConstructorArgs,
	            ctorParams: viewConstructorArgs,
	            builders: [{ methods: viewMethods }, view]
	        });
	        return viewClass;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateDestroyMethod(view) {
	        var /** @type {?} */ stmts = [];
	        view.viewContainers.forEach(function (viewContainer) {
	            stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
	        });
	        view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });
	        stmts.push.apply(stmts, view.destroyMethod.finish());
	        return stmts;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateCreateMethod(view) {
	        var /** @type {?} */ parentRenderNodeExpr = NULL_EXPR;
	        var /** @type {?} */ parentRenderNodeStmts = [];
	        if (view.viewType === ViewType.COMPONENT) {
	            parentRenderNodeExpr =
	                ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
	            parentRenderNodeStmts =
	                [parentRenderNodeVar.set(parentRenderNodeExpr)
	                        .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
	        }
	        var /** @type {?} */ resultExpr;
	        if (view.viewType === ViewType.HOST) {
	            var /** @type {?} */ hostEl = (view.nodes[0]);
	            resultExpr =
	                importExpr(createIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([
	                    literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()
	                ]);
	        }
	        else {
	            resultExpr = NULL_EXPR;
	        }
	        var /** @type {?} */ allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)
	            .prop('directRenderer')
	            .conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode; })));
	        return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	            THIS_EXPR
	                .callMethod('init', [
	                view.lastRenderNode,
	                allNodesExpr,
	                view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,
	            ])
	                .toStmt(),
	            new ReturnStatement(resultExpr)
	        ]);
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateDetectChangesMethod(view) {
	        var /** @type {?} */ stmts = [];
	        if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
	            view.updateContentQueriesMethod.isEmpty() &&
	            view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	            view.detectChangesRenderPropertiesMethod.isEmpty() &&
	            view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&
	            view.viewContainers.length === 0 && view.viewChildren.length === 0) {
	            return stmts;
	        }
	        stmts.push.apply(stmts, view.animationBindingsMethod.finish());
	        stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
	        view.viewContainers.forEach(function (viewContainer) {
	            stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange])
	                .toStmt());
	        });
	        var /** @type {?} */ afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	        if (afterContentStmts.length > 0) {
	            stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
	        }
	        stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
	        view.viewChildren.forEach(function (viewChild) {
	            stmts.push(viewChild.callMethod('internalDetectChanges', [DetectChangesVars.throwOnChange]).toStmt());
	        });
	        var /** @type {?} */ afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	        if (afterViewStmts.length > 0) {
	            stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
	        }
	        var /** @type {?} */ varStmts = [];
	        var /** @type {?} */ readVars = findReadVarNames(stmts);
	        if (readVars.has(DetectChangesVars.changed.name)) {
	            varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
	        }
	        if (readVars.has(DetectChangesVars.changes.name)) {
	            varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)
	                .toDeclStmt(new MapType(importType(createIdentifier(Identifiers.SimpleChange)))));
	        }
	        varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
	        return varStmts.concat(stmts);
	    }
	    /**
	     * @param {?} statements
	     * @param {?} value
	     * @return {?}
	     */
	    function addReturnValuefNotEmpty(statements, value) {
	        if (statements.length > 0) {
	            return statements.concat([new ReturnStatement(value)]);
	        }
	        else {
	            return statements;
	        }
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function getContextType(view) {
	        if (view.viewType === ViewType.COMPONENT) {
	            return importType(view.component.type);
	        }
	        return DYNAMIC_TYPE;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function getChangeDetectionMode(view) {
	        var /** @type {?} */ mode;
	        if (view.viewType === ViewType.COMPONENT) {
	            mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	                ChangeDetectorStatus.CheckAlways :
	                ChangeDetectorStatus.CheckOnce;
	        }
	        else {
	            mode = ChangeDetectorStatus.CheckAlways;
	        }
	        return mode;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateVisitRootNodesMethod(view) {
	        var /** @type {?} */ cbVar = variable('cb');
	        var /** @type {?} */ ctxVar = variable('ctx');
	        var /** @type {?} */ stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
	        return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateVisitProjectableNodesMethod(view) {
	        var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	        var /** @type {?} */ ngContentIndexVar = variable('ngContentIndex');
	        var /** @type {?} */ cbVar = variable('cb');
	        var /** @type {?} */ ctxVar = variable('ctx');
	        var /** @type {?} */ stmts = [];
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement && node.component) {
	                node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {
	                    stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))
	                        .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
	                });
	            }
	        });
	        return new ClassMethod('visitProjectableNodesInternal', [
	            new FnParam(nodeIndexVar.name, NUMBER_TYPE),
	            new FnParam(ngContentIndexVar.name, NUMBER_TYPE),
	            new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)
	        ], stmts);
	    }
	    /**
	     * @param {?} nodes
	     * @param {?} cb
	     * @param {?} ctx
	     * @return {?}
	     */
	    function generateVisitNodesStmts(nodes, cb, ctx) {
	        var /** @type {?} */ stmts = [];
	        nodes.forEach(function (node) {
	            switch (node.type) {
	                case CompileViewRootNodeType.Node:
	                    stmts.push(cb.callFn([node.expr, ctx]).toStmt());
	                    break;
	                case CompileViewRootNodeType.ViewContainer:
	                    stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
	                    stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
	                    break;
	                case CompileViewRootNodeType.NgContent:
	                    stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])
	                        .toStmt());
	                    break;
	            }
	        });
	        return stmts;
	    }
	    /**
	     * @param {?} view
	     * @return {?}
	     */
	    function generateCreateEmbeddedViewsMethod(view) {
	        var /** @type {?} */ nodeIndexVar = variable('nodeIndex');
	        var /** @type {?} */ stmts = [];
	        view.nodes.forEach(function (node) {
	            if (node instanceof CompileElement) {
	                if (node.embeddedView) {
	                    stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([
	                            ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,
	                            node.viewContainer
	                        ]))]));
	                }
	            }
	        });
	        if (stmts.length > 0) {
	            stmts.push(new ReturnStatement(NULL_EXPR));
	        }
	        return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$16 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$16 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var ViewCompileResult = (function () {
	        /**
	         * @param {?} statements
	         * @param {?} viewClassVar
	         * @param {?} dependencies
	         */
	        function ViewCompileResult(statements, viewClassVar, dependencies) {
	            this.statements = statements;
	            this.viewClassVar = viewClassVar;
	            this.dependencies = dependencies;
	        }
	        return ViewCompileResult;
	    }());
	    var ViewCompiler = (function () {
	        /**
	         * @param {?} _genConfig
	         * @param {?} _schemaRegistry
	         */
	        function ViewCompiler(_genConfig, _schemaRegistry) {
	            this._genConfig = _genConfig;
	            this._schemaRegistry = _schemaRegistry;
	        }
	        /**
	         * @param {?} component
	         * @param {?} template
	         * @param {?} styles
	         * @param {?} pipes
	         * @param {?} compiledAnimations
	         * @return {?}
	         */
	        ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {
	            var /** @type {?} */ dependencies = [];
	            var /** @type {?} */ view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), [], dependencies);
	            var /** @type {?} */ statements = [];
	            buildView(view, template, dependencies);
	            // Need to separate binding from creation to be able to refer to
	            // variables that have been declared after usage.
	            bindView(view, template, this._schemaRegistry);
	            finishView(view, statements);
	            return new ViewCompileResult(statements, view.classExpr.name, dependencies);
	        };
	        ViewCompiler = __decorate$16([
	            CompilerInjectable(), 
	            __metadata$16('design:paramtypes', [CompilerConfig, ElementSchemaRegistry])
	        ], ViewCompiler);
	        return ViewCompiler;
	    }());

	    var AnimationEntryCompileResult = (function () {
	        /**
	         * @param {?} name
	         * @param {?} statements
	         * @param {?} fnExp
	         */
	        function AnimationEntryCompileResult(name, statements, fnExp) {
	            this.name = name;
	            this.statements = statements;
	            this.fnExp = fnExp;
	        }
	        return AnimationEntryCompileResult;
	    }());
	    var AnimationCompiler = (function () {
	        function AnimationCompiler() {
	        }
	        /**
	         * @param {?} factoryNamePrefix
	         * @param {?} parsedAnimations
	         * @return {?}
	         */
	        AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {
	            return parsedAnimations.map(function (entry) {
	                var /** @type {?} */ factoryName = factoryNamePrefix + "_" + entry.name;
	                var /** @type {?} */ visitor = new _AnimationBuilder(entry.name, factoryName);
	                return visitor.build(entry);
	            });
	        };
	        return AnimationCompiler;
	    }());
	    var /** @type {?} */ _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
	    var /** @type {?} */ _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
	    var /** @type {?} */ _ANIMATION_FACTORY_VIEW_VAR = variable('view');
	    var /** @type {?} */ _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
	    var /** @type {?} */ _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	    var /** @type {?} */ _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
	    var /** @type {?} */ _ANIMATION_NEXT_STATE_VAR = variable('nextState');
	    var /** @type {?} */ _ANIMATION_PLAYER_VAR = variable('player');
	    var /** @type {?} */ _ANIMATION_TIME_VAR = variable('totalTime');
	    var /** @type {?} */ _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
	    var /** @type {?} */ _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
	    var /** @type {?} */ _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
	    var /** @type {?} */ _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
	    var /** @type {?} */ _EMPTY_MAP = literalMap([]);
	    var /** @type {?} */ _EMPTY_ARRAY = literalArr([]);
	    var _AnimationBuilder = (function () {
	        /**
	         * @param {?} animationName
	         * @param {?} factoryName
	         */
	        function _AnimationBuilder(animationName, factoryName) {
	            this.animationName = animationName;
	            this._fnVarName = factoryName + '_factory';
	            this._statesMapVarName = factoryName + '_states';
	            this._statesMapVar = variable(this._statesMapVarName);
	        }
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	            var /** @type {?} */ stylesArr = [];
	            if (context.isExpectingFirstStyleStep) {
	                stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	                context.isExpectingFirstStyleStep = false;
	            }
	            ast.styles.forEach(function (entry) {
	                var /** @type {?} */ entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])]; });
	                stylesArr.push(literalMap(entries, null, true));
	            });
	            return importExpr(createIdentifier(Identifiers.AnimationStyles)).instantiate([
	                importExpr(createIdentifier(Identifiers.collectAndResolveStyles)).callFn([
	                    _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
	                ])
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	            return importExpr(createIdentifier(Identifiers.AnimationKeyframe)).instantiate([
	                literal(ast.offset), ast.styles.visit(this, context)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	            var _this = this;
	            if (context.endStateAnimateStep === ast) {
	                return this._visitEndStateAnimation(ast, context);
	            }
	            var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	            var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	            return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
	        };
	        /**
	         * \@internal
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ startingStylesExpr = ast.startingStyles.visit(this, context);
	            var /** @type {?} */ keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	            var /** @type {?} */ keyframesExpr = importExpr(createIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
	                _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	                literalArr(keyframeExpressions)
	            ]);
	            return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
	        };
	        /**
	         * \@internal
	         * @param {?} ast
	         * @param {?} startingStylesExpr
	         * @param {?} keyframesExpr
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
	            var /** @type {?} */ previousStylesValue = _EMPTY_ARRAY;
	            if (context.isExpectingFirstAnimateStep) {
	                previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
	                context.isExpectingFirstAnimateStep = false;
	            }
	            context.totalTransitionTime += ast.duration + ast.delay;
	            return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	                _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
	                literal(ast.delay), literal(ast.easing), previousStylesValue
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	            return importExpr(createIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
	                literalArr(playerExprs)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	            var _this = this;
	            var /** @type {?} */ playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	            return importExpr(createIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
	                literalArr(playerExprs)
	            ]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	            var /** @type {?} */ flatStyles = {};
	            _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key]; }); });
	            context.stateMap.registerState(ast.stateName, flatStyles);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	            var /** @type {?} */ steps = ast.animation.steps;
	            var /** @type {?} */ lastStep = steps[steps.length - 1];
	            if (_isEndStateAnimateStep(lastStep)) {
	                context.endStateAnimateStep = (lastStep);
	            }
	            context.totalTransitionTime = 0;
	            context.isExpectingFirstStyleStep = true;
	            context.isExpectingFirstAnimateStep = true;
	            var /** @type {?} */ stateChangePreconditions = [];
	            ast.stateChanges.forEach(function (stateChange) {
	                stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                    .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	                if (stateChange.fromState != ANY_STATE) {
	                    context.stateMap.registerState(stateChange.fromState);
	                }
	                if (stateChange.toState != ANY_STATE) {
	                    context.stateMap.registerState(stateChange.toState);
	                }
	            });
	            var /** @type {?} */ animationPlayerExpr = ast.animation.visit(this, context);
	            var /** @type {?} */ reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	            var /** @type {?} */ precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
	            var /** @type {?} */ animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
	            var /** @type {?} */ totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
	            return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} context
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	            var _this = this;
	            // visit each of the declarations first to build the context state map
	            ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	            // this should always be defined even if the user overrides it
	            context.stateMap.registerState(DEFAULT_STATE, {});
	            var /** @type {?} */ statements = [];
	            statements.push(_PREVIOUS_ANIMATION_PLAYERS
	                .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [
	                _ANIMATION_FACTORY_ELEMENT_VAR,
	                _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_STATE))
	                    .conditional(NULL_EXPR, literal(this.animationName))
	            ]))
	                .toDeclStmt());
	            statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
	            statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
	            statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
	            statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))
	                .toDeclStmt());
	            statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	                .toDeclStmt());
	            statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	            statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	                .toDeclStmt());
	            statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	            var /** @type {?} */ RENDER_STYLES_FN = importExpr(createIdentifier(Identifiers.renderStyles));
	            ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	            // this check ensures that the animation factory always returns a player
	            // so that the onDone callback can be used for tracking
	            statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
	                    .set(importExpr(createIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
	                    .toStmt()]));
	            // once complete we want to apply the styles on the element
	            // since the destination state's values should persist once
	            // the animation sequence has completed.
	            statements.push(_ANIMATION_PLAYER_VAR
	                .callMethod('onDone', [fn([], [
	                    _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),
	                    RENDER_STYLES_FN
	                        .callFn([
	                        _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                        importExpr(createIdentifier(Identifiers.prepareFinalAnimationStyles))
	                            .callFn([
	                            _ANIMATION_START_STATE_STYLES_VAR,
	                            _ANIMATION_END_STATE_STYLES_VAR
	                        ])
	                    ])
	                        .toStmt()
	                ])])
	                .toStmt());
	            statements.push(importExpr(createIdentifier(Identifiers.AnimationSequencePlayer))
	                .instantiate([_PREVIOUS_ANIMATION_PLAYERS])
	                .callMethod('destroy', [])
	                .toStmt());
	            // before we start any animation we want to clear out the starting
	            // styles from the element's style property (since they were placed
	            // there at the end of the last animation
	            statements.push(RENDER_STYLES_FN
	                .callFn([
	                _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                importExpr(createIdentifier(Identifiers.clearStyles))
	                    .callFn([_ANIMATION_START_STATE_STYLES_VAR])
	            ])
	                .toStmt());
	            statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT
	                .callMethod('queueAnimation', [
	                _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	                _ANIMATION_PLAYER_VAR
	            ])
	                .toStmt());
	            statements.push(new ReturnStatement(importExpr(createIdentifier(Identifiers.AnimationTransition)).instantiate([
	                _ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR,
	                _ANIMATION_TIME_VAR
	            ])));
	            return fn([
	                new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(createIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
	                new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
	                new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
	            ], statements, importType(createIdentifier(Identifiers.AnimationTransition)));
	        };
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        _AnimationBuilder.prototype.build = function (ast) {
	            var /** @type {?} */ context = new _AnimationBuilderContext();
	            var /** @type {?} */ fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	            var /** @type {?} */ fnVariable = variable(this._fnVarName);
	            var /** @type {?} */ lookupMap = [];
	            Object.keys(context.stateMap.states).forEach(function (stateName) {
	                var /** @type {?} */ value = context.stateMap.states[stateName];
	                var /** @type {?} */ variableValue = _EMPTY_MAP;
	                if (isPresent(value)) {
	                    var /** @type {?} */ styleMap_1 = [];
	                    Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]); });
	                    variableValue = literalMap(styleMap_1, null, true);
	                }
	                lookupMap.push([stateName, variableValue]);
	            });
	            var /** @type {?} */ compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap, null, true)).toDeclStmt();
	            var /** @type {?} */ statements = [compiledStatesMapStmt, fnStatement];
	            return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
	        };
	        return _AnimationBuilder;
	    }());
	    var _AnimationBuilderContext = (function () {
	        function _AnimationBuilderContext() {
	            this.stateMap = new _AnimationBuilderStateMap();
	            this.endStateAnimateStep = null;
	            this.isExpectingFirstStyleStep = false;
	            this.isExpectingFirstAnimateStep = false;
	            this.totalTransitionTime = 0;
	        }
	        return _AnimationBuilderContext;
	    }());
	    var _AnimationBuilderStateMap = (function () {
	        function _AnimationBuilderStateMap() {
	            this._states = {};
	        }
	        Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._states; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} name
	         * @param {?=} value
	         * @return {?}
	         */
	        _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	            if (value === void 0) { value = null; }
	            var /** @type {?} */ existingEntry = this._states[name];
	            if (!existingEntry) {
	                this._states[name] = value;
	            }
	        };
	        return _AnimationBuilderStateMap;
	    }());
	    /**
	     * @param {?} value
	     * @param {?} animationState
	     * @return {?}
	     */
	    function _compareToAnimationStateExpr(value, animationState) {
	        var /** @type {?} */ emptyStateLiteral = literal(EMPTY_STATE);
	        switch (animationState) {
	            case EMPTY_STATE:
	                return value.equals(emptyStateLiteral);
	            case ANY_STATE:
	                return literal(true);
	            default:
	                return value.equals(literal(animationState));
	        }
	    }
	    /**
	     * @param {?} step
	     * @return {?}
	     */
	    function _isEndStateAnimateStep(step) {
	        // the final animation step is characterized by having only TWO
	        // keyframe values and it must have zero styles for both keyframes
	        if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	            var /** @type {?} */ styles1 = _getStylesArray(step.keyframes[0])[0];
	            var /** @type {?} */ styles2 = _getStylesArray(step.keyframes[1])[0];
	            return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
	        }
	        return false;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function _getStylesArray(obj) {
	        return obj.styles.styles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var GeneratedFile = (function () {
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} genFileUrl
	         * @param {?} source
	         */
	        function GeneratedFile(srcFileUrl, genFileUrl, source) {
	            this.srcFileUrl = srcFileUrl;
	            this.genFileUrl = genFileUrl;
	            this.source = source;
	        }
	        return GeneratedFile;
	    }());

	    var __extends$26 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\.ts|\.d\.ts|\.js|\.jsx|\.tsx)$/;
	    /**
	     * @param {?} host
	     * @param {?} summaryResolver
	     * @param {?} symbolResolver
	     * @param {?} symbols
	     * @param {?} types
	     * @return {?}
	     */
	    function serializeSummaries(host, summaryResolver, symbolResolver, symbols, types) {
	        var /** @type {?} */ serializer = new Serializer$1(host);
	        // for symbols, we use everything except for the class metadata itself
	        // (we keep the statics though), as the class metadata is contained in the
	        // CompileTypeSummary.
	        symbols.forEach(function (resolvedSymbol) { return serializer.addOrMergeSummary({ symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata }); });
	        // Add summaries that are referenced by the given symbols (transitively)
	        // Note: the serializer.symbols array might be growing while
	        // we execute the loop!
	        for (var /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {
	            var /** @type {?} */ symbol = serializer.symbols[processedIndex];
	            if (!host.isSourceFile(symbol.filePath)) {
	                var /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);
	                if (!summary) {
	                    // some symbols might originate from a plain typescript library
	                    // that just exported .d.ts and .metadata.json files, i.e. where no summary
	                    // files were created.
	                    var /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);
	                    if (resolvedSymbol) {
	                        summary = { symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata };
	                    }
	                }
	                if (summary) {
	                    serializer.addOrMergeSummary(summary);
	                }
	            }
	        }
	        // Add type summaries.
	        // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,
	        // as the type summaries already contain the transitive data that they require
	        // (in a minimal way).
	        types.forEach(function (typeSummary) {
	            serializer.addOrMergeSummary({ symbol: typeSummary.type.reference, metadata: { __symbolic: 'class' }, type: typeSummary });
	            if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {
	                var /** @type {?} */ ngModuleSummary = (typeSummary);
	                ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach(function (id) {
	                    var /** @type {?} */ symbol = id.reference;
	                    if (!host.isSourceFile(symbol.filePath)) {
	                        serializer.addOrMergeSummary(summaryResolver.resolveSummary(symbol));
	                    }
	                });
	            }
	        });
	        return serializer.serialize();
	    }
	    /**
	     * @param {?} symbolCache
	     * @param {?} json
	     * @return {?}
	     */
	    function deserializeSummaries(symbolCache, json) {
	        var /** @type {?} */ deserializer = new Deserializer(symbolCache);
	        return deserializer.deserialize(json);
	    }
	    /**
	     * @param {?} fileName
	     * @return {?}
	     */
	    function summaryFileName(fileName) {
	        var /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');
	        return fileNameWithoutSuffix + ".ngsummary.json";
	    }
	    var Serializer$1 = (function (_super) {
	        __extends$26(Serializer, _super);
	        /**
	         * @param {?} host
	         */
	        function Serializer(host) {
	            _super.call(this);
	            this.host = host;
	            this.symbols = [];
	            this.indexBySymbol = new Map();
	            this.processedSummaryBySymbol = new Map();
	            this.processedSummaries = [];
	        }
	        /**
	         * @param {?} summary
	         * @return {?}
	         */
	        Serializer.prototype.addOrMergeSummary = function (summary) {
	            var /** @type {?} */ symbolMeta = summary.metadata;
	            if (symbolMeta && symbolMeta.__symbolic === 'class') {
	                // For classes, we only keep their statics, but not the metadata
	                // of the class itself as that has been captured already via other summaries
	                // (e.g. DirectiveSummary, ...).
	                symbolMeta = { __symbolic: 'class', statics: symbolMeta.statics };
	            }
	            var /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);
	            if (!processedSummary) {
	                processedSummary = this.processValue({ symbol: summary.symbol });
	                this.processedSummaries.push(processedSummary);
	                this.processedSummaryBySymbol.set(summary.symbol, processedSummary);
	            }
	            // Note: == by purpose to compare with undefined!
	            if (processedSummary.metadata == null && symbolMeta != null) {
	                processedSummary.metadata = this.processValue(symbolMeta);
	            }
	            // Note: == by purpose to compare with undefined!
	            if (processedSummary.type == null && summary.type != null) {
	                processedSummary.type = this.processValue(summary.type);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        Serializer.prototype.serialize = function () {
	            var _this = this;
	            return JSON.stringify({
	                summaries: this.processedSummaries,
	                symbols: this.symbols.map(function (symbol, index) {
	                    return {
	                        __symbol: index,
	                        name: symbol.name,
	                        // We convert the source filenames tinto output filenames,
	                        // as the generated summary file will be used when teh current
	                        // compilation unit is used as a library
	                        filePath: _this.host.getOutputFileName(symbol.filePath)
	                    };
	                })
	            });
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        Serializer.prototype.processValue = function (value) { return visitValue(value, this, null); };
	        /**
	         * @param {?} value
	         * @param {?} context
	         * @return {?}
	         */
	        Serializer.prototype.visitOther = function (value, context) {
	            if (value instanceof StaticSymbol) {
	                var /** @type {?} */ index = this.indexBySymbol.get(value);
	                // Note: == by purpose to compare with undefined!
	                if (index == null) {
	                    index = this.indexBySymbol.size;
	                    this.indexBySymbol.set(value, index);
	                    this.symbols.push(value);
	                }
	                return { __symbol: index };
	            }
	        };
	        return Serializer;
	    }(ValueTransformer));
	    var Deserializer = (function (_super) {
	        __extends$26(Deserializer, _super);
	        /**
	         * @param {?} symbolCache
	         */
	        function Deserializer(symbolCache) {
	            _super.call(this);
	            this.symbolCache = symbolCache;
	        }
	        /**
	         * @param {?} json
	         * @return {?}
	         */
	        Deserializer.prototype.deserialize = function (json) {
	            var _this = this;
	            var /** @type {?} */ data = JSON.parse(json);
	            this.symbols = data.symbols.map(function (serializedSymbol) { return _this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name); });
	            return visitValue(data.summaries, this, null);
	        };
	        /**
	         * @param {?} map
	         * @param {?} context
	         * @return {?}
	         */
	        Deserializer.prototype.visitStringMap = function (map, context) {
	            if ('__symbol' in map) {
	                return this.symbols[map['__symbol']];
	            }
	            else {
	                return _super.prototype.visitStringMap.call(this, map, context);
	            }
	        };
	        return Deserializer;
	    }(ValueTransformer));

	    var AotCompiler = (function () {
	        /**
	         * @param {?} _host
	         * @param {?} _metadataResolver
	         * @param {?} _templateParser
	         * @param {?} _styleCompiler
	         * @param {?} _viewCompiler
	         * @param {?} _dirWrapperCompiler
	         * @param {?} _ngModuleCompiler
	         * @param {?} _outputEmitter
	         * @param {?} _summaryResolver
	         * @param {?} _localeId
	         * @param {?} _translationFormat
	         * @param {?} _animationParser
	         * @param {?} _symbolResolver
	         */
	        function AotCompiler(_host, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _summaryResolver, _localeId, _translationFormat, _animationParser, _symbolResolver) {
	            this._host = _host;
	            this._metadataResolver = _metadataResolver;
	            this._templateParser = _templateParser;
	            this._styleCompiler = _styleCompiler;
	            this._viewCompiler = _viewCompiler;
	            this._dirWrapperCompiler = _dirWrapperCompiler;
	            this._ngModuleCompiler = _ngModuleCompiler;
	            this._outputEmitter = _outputEmitter;
	            this._summaryResolver = _summaryResolver;
	            this._localeId = _localeId;
	            this._translationFormat = _translationFormat;
	            this._animationParser = _animationParser;
	            this._symbolResolver = _symbolResolver;
	            this._animationCompiler = new AnimationCompiler();
	        }
	        /**
	         * @return {?}
	         */
	        AotCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	        /**
	         * @param {?} rootFiles
	         * @return {?}
	         */
	        AotCompiler.prototype.compileAll = function (rootFiles) {
	            var _this = this;
	            var /** @type {?} */ programSymbols = extractProgramSymbols(this._symbolResolver, rootFiles, this._host);
	            var _a = analyzeAndValidateNgModules(programSymbols, this._host, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	            return Promise
	                .all(ngModules.map(function (ngModule) { return _this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	                .then(function () {
	                var /** @type {?} */ sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.pipes, file.ngModules, file.injectables); });
	                return ListWrapper.flatten(sourceModules);
	            });
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} ngModuleByPipeOrDirective
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} ngModules
	         * @param {?} injectables
	         * @return {?}
	         */
	        AotCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, pipes, ngModules, injectables) {
	            var _this = this;
	            var /** @type {?} */ fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
	            var /** @type {?} */ statements = [];
	            var /** @type {?} */ exportedVars = [];
	            var /** @type {?} */ generatedFiles = [];
	            generatedFiles.push(this._createSummary(srcFileUrl, directives, pipes, ngModules, injectables));
	            // compile all ng modules
	            exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	            // compile directive wrappers
	            exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements); }));
	            // compile components
	            directives.forEach(function (dirType) {
	                var /** @type {?} */ compMeta = _this._metadataResolver.getDirectiveMetadata(/** @type {?} */ (dirType));
	                if (!compMeta.isComponent) {
	                    return Promise.resolve(null);
	                }
	                var /** @type {?} */ ngModule = ngModuleByPipeOrDirective.get(dirType);
	                if (!ngModule) {
	                    throw new Error("Internal Error: cannot determine the module for component " + identifierName(compMeta.type) + "!");
	                }
	                _assertComponent(compMeta);
	                // compile styles
	                var /** @type {?} */ stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	                stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                    generatedFiles.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	                });
	                // compile components
	                exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
	            });
	            if (statements.length > 0) {
	                var /** @type {?} */ srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
	                generatedFiles.unshift(srcModule);
	            }
	            return generatedFiles;
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} directives
	         * @param {?} pipes
	         * @param {?} ngModules
	         * @param {?} injectables
	         * @return {?}
	         */
	        AotCompiler.prototype._createSummary = function (srcFileUrl, directives, pipes, ngModules, injectables) {
	            var _this = this;
	            var /** @type {?} */ symbolSummaries = this._symbolResolver.getSymbolsOf(srcFileUrl)
	                .map(function (symbol) { return _this._symbolResolver.resolveSymbol(symbol); });
	            var /** @type {?} */ typeSummaries = ngModules.map(function (ref) { return _this._metadataResolver.getNgModuleSummary(ref); }).concat(directives.map(function (ref) { return _this._metadataResolver.getDirectiveSummary(ref); }), pipes.map(function (ref) { return _this._metadataResolver.getPipeSummary(ref); }), injectables.map(function (ref) { return _this._metadataResolver.getInjectableSummary(ref); }));
	            var /** @type {?} */ json = serializeSummaries(this._host, this._summaryResolver, this._symbolResolver, symbolSummaries, typeSummaries);
	            return new GeneratedFile(srcFileUrl, summaryFileName(srcFileUrl), json);
	        };
	        /**
	         * @param {?} ngModuleType
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	            var _this = this;
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	            var /** @type {?} */ providers = [];
	            if (this._localeId) {
	                providers.push({
	                    token: createIdentifierToken(Identifiers.LOCALE_ID),
	                    useValue: this._localeId,
	                });
	            }
	            if (this._translationFormat) {
	                providers.push({
	                    token: createIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                    useValue: this._translationFormat
	                });
	            }
	            var /** @type {?} */ appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	            appCompileResult.dependencies.forEach(function (dep) {
	                dep.placeholder.reference = _this._symbolResolver.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dep.comp)), _componentFactoryName(dep.comp));
	            });
	            targetStatements.push.apply(targetStatements, appCompileResult.statements);
	            return appCompileResult.ngModuleFactoryVar;
	        };
	        /**
	         * @param {?} directiveType
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {
	            var /** @type {?} */ dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
	            var /** @type {?} */ dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
	            targetStatements.push.apply(targetStatements, dirCompileResult.statements);
	            return dirCompileResult.dirWrapperClassVar;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} fileSuffix
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	            var /** @type {?} */ hostMeta = createHostComponentMeta(this._symbolResolver.getStaticSymbol(identifierModuleUrl(compMeta.type), identifierName(compMeta.type) + "_Host"), compMeta);
	            var /** @type {?} */ hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
	            var /** @type {?} */ compFactoryVar = _componentFactoryName(compMeta.type);
	            targetStatements.push(variable(compFactoryVar)
	                .set(importExpr(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
	                .instantiate([
	                literal(compMeta.selector),
	                variable(hostViewFactoryVar),
	                importExpr(compMeta.type),
	            ], importType(createIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
	                .toDeclStmt(null, [StmtModifier.Final]));
	            return compFactoryVar;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} directiveIdentifiers
	         * @param {?} componentStyles
	         * @param {?} fileSuffix
	         * @param {?} targetStatements
	         * @return {?}
	         */
	        AotCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	            var _this = this;
	            var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	            var /** @type {?} */ directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	            var /** @type {?} */ pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	            var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, identifierName(compMeta.type));
	            var /** @type {?} */ stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	            var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	            var /** @type {?} */ viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
	            if (componentStyles) {
	                targetStatements.push.apply(targetStatements, _resolveStyleStatements(this._symbolResolver, componentStyles, fileSuffix));
	            }
	            compiledAnimations.forEach(function (entry) { return targetStatements.push.apply(targetStatements, entry.statements); });
	            targetStatements.push.apply(targetStatements, _resolveViewStatements(this._symbolResolver, viewResult));
	            return viewResult.viewClassVar;
	        };
	        /**
	         * @param {?} fileUrl
	         * @param {?} stylesCompileResult
	         * @param {?} fileSuffix
	         * @return {?}
	         */
	        AotCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	            _resolveStyleStatements(this._symbolResolver, stylesCompileResult, fileSuffix);
	            return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	        };
	        /**
	         * @param {?} srcFileUrl
	         * @param {?} genFileUrl
	         * @param {?} statements
	         * @param {?} exportedVars
	         * @return {?}
	         */
	        AotCompiler.prototype._codegenSourceModule = function (srcFileUrl, genFileUrl, statements, exportedVars) {
	            return new GeneratedFile(srcFileUrl, genFileUrl, this._outputEmitter.emitStatements(genFileUrl, statements, exportedVars));
	        };
	        return AotCompiler;
	    }());
	    /**
	     * @param {?} reflector
	     * @param {?} compileResult
	     * @return {?}
	     */
	    function _resolveViewStatements(reflector, compileResult) {
	        compileResult.dependencies.forEach(function (dep) {
	            if (dep instanceof ViewClassDependency) {
	                var /** @type {?} */ vfd = (dep);
	                vfd.placeholder.reference =
	                    reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(vfd.comp)), dep.name);
	            }
	            else if (dep instanceof ComponentFactoryDependency$1) {
	                var /** @type {?} */ cfd = (dep);
	                cfd.placeholder.reference = reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(cfd.comp)), _componentFactoryName(cfd.comp));
	            }
	            else if (dep instanceof DirectiveWrapperDependency) {
	                var /** @type {?} */ dwd = (dep);
	                dwd.placeholder.reference =
	                    reflector.getStaticSymbol(_ngfactoryModuleUrl(identifierModuleUrl(dwd.dir)), dwd.name);
	            }
	        });
	        return compileResult.statements;
	    }
	    /**
	     * @param {?} reflector
	     * @param {?} compileResult
	     * @param {?} fileSuffix
	     * @return {?}
	     */
	    function _resolveStyleStatements(reflector, compileResult, fileSuffix) {
	        compileResult.dependencies.forEach(function (dep) {
	            dep.valuePlaceholder.reference = reflector.getStaticSymbol(_stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix), dep.name);
	        });
	        return compileResult.statements;
	    }
	    /**
	     * @param {?} dirUrl
	     * @return {?}
	     */
	    function _ngfactoryModuleUrl(dirUrl) {
	        var /** @type {?} */ urlWithSuffix = _splitTypescriptSuffix(dirUrl);
	        return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	    }
	    /**
	     * @param {?} comp
	     * @return {?}
	     */
	    function _componentFactoryName(comp) {
	        return identifierName(comp) + "NgFactory";
	    }
	    /**
	     * @param {?} stylesheetUrl
	     * @param {?} shim
	     * @param {?} suffix
	     * @return {?}
	     */
	    function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	        return "" + stylesheetUrl + (shim ? '.shim' : '') + ".ngstyle" + suffix;
	    }
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    function _assertComponent(meta) {
	        if (!meta.isComponent) {
	            throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	        }
	    }
	    /**
	     * @param {?} path
	     * @return {?}
	     */
	    function _splitTypescriptSuffix(path) {
	        if (path.endsWith('.d.ts')) {
	            return [path.slice(0, -5), '.ts'];
	        }
	        var /** @type {?} */ lastDot = path.lastIndexOf('.');
	        if (lastDot !== -1) {
	            return [path.substring(0, lastDot), path.substring(lastDot)];
	        }
	        return [path, ''];
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function analyzeNgModules(programStaticSymbols, host, metadataResolver) {
	        var _a = _createNgModules(programStaticSymbols, host, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	        return _analyzeNgModules(programStaticSymbols, ngModules, symbolsMissingModule, metadataResolver);
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function analyzeAndValidateNgModules(programStaticSymbols, host, metadataResolver) {
	        var /** @type {?} */ result = analyzeNgModules(programStaticSymbols, host, metadataResolver);
	        if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	            var /** @type {?} */ messages = result.symbolsMissingModule.map(function (s) { return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!"); });
	            throw new Error(messages.join('\n'));
	        }
	        return result;
	    }
	    /**
	     * @param {?} programSymbols
	     * @param {?} ngModuleMetas
	     * @param {?} symbolsMissingModule
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function _analyzeNgModules(programSymbols, ngModuleMetas, symbolsMissingModule, metadataResolver) {
	        var /** @type {?} */ moduleMetasByRef = new Map();
	        ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	        var /** @type {?} */ ngModuleByPipeOrDirective = new Map();
	        var /** @type {?} */ ngModulesByFile = new Map();
	        var /** @type {?} */ ngDirectivesByFile = new Map();
	        var /** @type {?} */ ngPipesByFile = new Map();
	        var /** @type {?} */ ngInjectablesByFile = new Map();
	        var /** @type {?} */ filePaths = new Set();
	        // Make sure we produce an analyzed file for each input file
	        programSymbols.forEach(function (symbol) {
	            var /** @type {?} */ filePath = symbol.filePath;
	            filePaths.add(filePath);
	            if (metadataResolver.isInjectable(symbol)) {
	                ngInjectablesByFile.set(filePath, (ngInjectablesByFile.get(filePath) || []).concat(symbol));
	            }
	        });
	        // Looping over all modules to construct:
	        // - a map from file to modules `ngModulesByFile`,
	        // - a map from file to directives `ngDirectivesByFile`,
	        // - a map from file to pipes `ngPipesByFile`,
	        // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	        ngModuleMetas.forEach(function (ngModuleMeta) {
	            var /** @type {?} */ srcFileUrl = ngModuleMeta.type.reference.filePath;
	            filePaths.add(srcFileUrl);
	            ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	            ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                var /** @type {?} */ fileUrl = dirIdentifier.reference.filePath;
	                filePaths.add(fileUrl);
	                ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	                ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	            });
	            ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	                var /** @type {?} */ fileUrl = pipeIdentifier.reference.filePath;
	                filePaths.add(fileUrl);
	                ngPipesByFile.set(fileUrl, (ngPipesByFile.get(fileUrl) || []).concat(pipeIdentifier.reference));
	                ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	            });
	        });
	        var /** @type {?} */ files = [];
	        filePaths.forEach(function (srcUrl) {
	            var /** @type {?} */ directives = ngDirectivesByFile.get(srcUrl) || [];
	            var /** @type {?} */ pipes = ngPipesByFile.get(srcUrl) || [];
	            var /** @type {?} */ ngModules = ngModulesByFile.get(srcUrl) || [];
	            var /** @type {?} */ injectables = ngInjectablesByFile.get(srcUrl) || [];
	            files.push({ srcUrl: srcUrl, directives: directives, pipes: pipes, ngModules: ngModules, injectables: injectables });
	        });
	        return {
	            // map directive/pipe to module
	            ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	            // list modules and directives for every source file
	            files: files,
	            ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	        };
	    }
	    /**
	     * @param {?} staticSymbolResolver
	     * @param {?} files
	     * @param {?} host
	     * @return {?}
	     */
	    function extractProgramSymbols(staticSymbolResolver, files, host) {
	        var /** @type {?} */ staticSymbols = [];
	        files.filter(function (fileName) { return host.isSourceFile(fileName); }).forEach(function (sourceFile) {
	            staticSymbolResolver.getSymbolsOf(sourceFile).forEach(function (symbol) {
	                var /** @type {?} */ resolvedSymbol = staticSymbolResolver.resolveSymbol(symbol);
	                var /** @type {?} */ symbolMeta = resolvedSymbol.metadata;
	                if (symbolMeta) {
	                    if (symbolMeta.__symbolic != 'error') {
	                        // Ignore symbols that are only included to record error information.
	                        staticSymbols.push(resolvedSymbol.symbol);
	                    }
	                }
	            });
	        });
	        return staticSymbols;
	    }
	    /**
	     * @param {?} programStaticSymbols
	     * @param {?} host
	     * @param {?} metadataResolver
	     * @return {?}
	     */
	    function _createNgModules(programStaticSymbols, host, metadataResolver) {
	        var /** @type {?} */ ngModules = new Map();
	        var /** @type {?} */ programPipesAndDirectives = [];
	        var /** @type {?} */ ngModulePipesAndDirective = new Set();
	        var /** @type {?} */ addNgModule = function (staticSymbol) {
	            if (ngModules.has(staticSymbol) || !host.isSourceFile(staticSymbol.filePath)) {
	                return false;
	            }
	            var /** @type {?} */ ngModule = metadataResolver.getNgModuleMetadata(staticSymbol, false);
	            if (ngModule) {
	                ngModules.set(ngModule.type.reference, ngModule);
	                ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	                ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	                // For every input module add the list of transitively included modules
	                ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.reference); });
	            }
	            return !!ngModule;
	        };
	        programStaticSymbols.forEach(function (staticSymbol) {
	            if (!addNgModule(staticSymbol) &&
	                (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	                programPipesAndDirectives.push(staticSymbol);
	            }
	        });
	        // Throw an error if any of the program pipe or directives is not declared by a module
	        var /** @type {?} */ symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	        return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	    }

	    var StaticAndDynamicReflectionCapabilities = (function () {
	        /**
	         * @param {?} staticDelegate
	         */
	        function StaticAndDynamicReflectionCapabilities(staticDelegate) {
	            this.staticDelegate = staticDelegate;
	            this.dynamicDelegate = new ReflectionCapabilities();
	        }
	        /**
	         * @param {?} staticDelegate
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.install = function (staticDelegate) {
	            reflector.updateCapabilities(new StaticAndDynamicReflectionCapabilities(staticDelegate));
	        };
	        /**
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.factory = function (type) { return this.dynamicDelegate.factory(type); };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return isStaticType(type) ? this.staticDelegate.hasLifecycleHook(type, lcProperty) :
	                this.dynamicDelegate.hasLifecycleHook(type, lcProperty);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.parameters = function (type) {
	            return isStaticType(type) ? this.staticDelegate.parameters(type) :
	                this.dynamicDelegate.parameters(type);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.annotations = function (type) {
	            return isStaticType(type) ? this.staticDelegate.annotations(type) :
	                this.dynamicDelegate.annotations(type);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            return isStaticType(typeOrFunc) ? this.staticDelegate.propMetadata(typeOrFunc) :
	                this.dynamicDelegate.propMetadata(typeOrFunc);
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.getter = function (name) { return this.dynamicDelegate.getter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.setter = function (name) { return this.dynamicDelegate.setter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.method = function (name) { return this.dynamicDelegate.method(name); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.importUri = function (type) { return this.staticDelegate.importUri(type); };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.staticDelegate.resolveIdentifier(name, moduleUrl);
	        };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        StaticAndDynamicReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) {
	            if (isStaticType(enumIdentifier)) {
	                return this.staticDelegate.resolveEnum(enumIdentifier, name);
	            }
	            else {
	                return null;
	            }
	        };
	        return StaticAndDynamicReflectionCapabilities;
	    }());
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function isStaticType(type) {
	        return typeof type === 'object' && type.name && type.filePath;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$27 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ ANGULAR_IMPORT_LOCATIONS = {
	        coreDecorators: '@angular/core/src/metadata',
	        diDecorators: '@angular/core/src/di/metadata',
	        diMetadata: '@angular/core/src/di/metadata',
	        diOpaqueToken: '@angular/core/src/di/opaque_token',
	        animationMetadata: '@angular/core/src/animation/metadata',
	        provider: '@angular/core/src/di/provider'
	    };
	    var /** @type {?} */ HIDDEN_KEY = /^\$.*\$$/;
	    /**
	     * A static reflector implements enough of the Reflector API that is necessary to compile
	     * templates statically.
	     */
	    var StaticReflector = (function () {
	        /**
	         * @param {?} symbolResolver
	         * @param {?=} knownMetadataClasses
	         * @param {?=} knownMetadataFunctions
	         * @param {?=} errorRecorder
	         */
	        function StaticReflector(symbolResolver, knownMetadataClasses, knownMetadataFunctions, errorRecorder) {
	            var _this = this;
	            if (knownMetadataClasses === void 0) { knownMetadataClasses = []; }
	            if (knownMetadataFunctions === void 0) { knownMetadataFunctions = []; }
	            this.symbolResolver = symbolResolver;
	            this.errorRecorder = errorRecorder;
	            this.annotationCache = new Map();
	            this.propertyCache = new Map();
	            this.parameterCache = new Map();
	            this.methodCache = new Map();
	            this.conversionMap = new Map();
	            this.initializeConversionMap();
	            knownMetadataClasses.forEach(function (kc) { return _this._registerDecoratorOrConstructor(_this.getStaticSymbol(kc.filePath, kc.name), kc.ctor); });
	            knownMetadataFunctions.forEach(function (kf) { return _this._registerFunction(_this.getStaticSymbol(kf.filePath, kf.name), kf.fn); });
	        }
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        StaticReflector.prototype.importUri = function (typeOrFunc) {
	            var /** @type {?} */ staticSymbol = this.findSymbolDeclaration(typeOrFunc);
	            return staticSymbol ? staticSymbol.filePath : null;
	        };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @return {?}
	         */
	        StaticReflector.prototype.resolveIdentifier = function (name, moduleUrl) {
	            return this.findDeclaration(moduleUrl, name);
	        };
	        /**
	         * @param {?} moduleUrl
	         * @param {?} name
	         * @param {?=} containingFile
	         * @return {?}
	         */
	        StaticReflector.prototype.findDeclaration = function (moduleUrl, name, containingFile) {
	            return this.findSymbolDeclaration(this.symbolResolver.getSymbolByModule(moduleUrl, name, containingFile));
	        };
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        StaticReflector.prototype.findSymbolDeclaration = function (symbol) {
	            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(symbol);
	            if (resolvedSymbol && resolvedSymbol.metadata instanceof StaticSymbol) {
	                return this.findSymbolDeclaration(resolvedSymbol.metadata);
	            }
	            else {
	                return symbol;
	            }
	        };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        StaticReflector.prototype.resolveEnum = function (enumIdentifier, name) {
	            var /** @type {?} */ staticSymbol = enumIdentifier;
	            return this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name, [name]);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.annotations = function (type) {
	            var /** @type {?} */ annotations = this.annotationCache.get(type);
	            if (!annotations) {
	                annotations = [];
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentAnnotations = this.annotations(this.simplify(type, classMetadata['extends']));
	                    annotations.push.apply(annotations, parentAnnotations);
	                }
	                if (classMetadata['decorators']) {
	                    var /** @type {?} */ ownAnnotations = this.simplify(type, classMetadata['decorators']);
	                    annotations.push.apply(annotations, ownAnnotations);
	                }
	                this.annotationCache.set(type, annotations.filter(function (ann) { return !!ann; }));
	            }
	            return annotations;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.propMetadata = function (type) {
	            var _this = this;
	            var /** @type {?} */ propMetadata = this.propertyCache.get(type);
	            if (!propMetadata) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                propMetadata = {};
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(this.simplify(type, classMetadata['extends']));
	                    Object.keys(parentPropMetadata_1).forEach(function (parentProp) {
	                        propMetadata[parentProp] = parentPropMetadata_1[parentProp];
	                    });
	                }
	                var /** @type {?} */ members_1 = classMetadata['members'] || {};
	                Object.keys(members_1).forEach(function (propName) {
	                    var /** @type {?} */ propData = members_1[propName];
	                    var /** @type {?} */ prop = ((propData))
	                        .find(function (a) { return a['__symbolic'] == 'property' || a['__symbolic'] == 'method'; });
	                    var /** @type {?} */ decorators = [];
	                    if (propMetadata[propName]) {
	                        decorators.push.apply(decorators, propMetadata[propName]);
	                    }
	                    propMetadata[propName] = decorators;
	                    if (prop && prop['decorators']) {
	                        decorators.push.apply(decorators, _this.simplify(type, prop['decorators']));
	                    }
	                });
	                this.propertyCache.set(type, propMetadata);
	            }
	            return propMetadata;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.parameters = function (type) {
	            if (!(type instanceof StaticSymbol)) {
	                this.reportError(new Error("parameters received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	                return [];
	            }
	            try {
	                var /** @type {?} */ parameters_1 = this.parameterCache.get(type);
	                if (!parameters_1) {
	                    var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                    var /** @type {?} */ members = classMetadata ? classMetadata['members'] : null;
	                    var /** @type {?} */ ctorData = members ? members['__ctor__'] : null;
	                    if (ctorData) {
	                        var /** @type {?} */ ctor = ((ctorData)).find(function (a) { return a['__symbolic'] == 'constructor'; });
	                        var /** @type {?} */ parameterTypes = (this.simplify(type, ctor['parameters'] || []));
	                        var /** @type {?} */ parameterDecorators_1 = (this.simplify(type, ctor['parameterDecorators'] || []));
	                        parameters_1 = [];
	                        parameterTypes.forEach(function (paramType, index) {
	                            var /** @type {?} */ nestedResult = [];
	                            if (paramType) {
	                                nestedResult.push(paramType);
	                            }
	                            var /** @type {?} */ decorators = parameterDecorators_1 ? parameterDecorators_1[index] : null;
	                            if (decorators) {
	                                nestedResult.push.apply(nestedResult, decorators);
	                            }
	                            parameters_1.push(nestedResult);
	                        });
	                    }
	                    else if (classMetadata['extends']) {
	                        parameters_1 = this.parameters(this.simplify(type, classMetadata['extends']));
	                    }
	                    if (!parameters_1) {
	                        parameters_1 = [];
	                    }
	                    this.parameterCache.set(type, parameters_1);
	                }
	                return parameters_1;
	            }
	            catch (e) {
	                console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype._methodNames = function (type) {
	            var /** @type {?} */ methodNames = this.methodCache.get(type);
	            if (!methodNames) {
	                var /** @type {?} */ classMetadata = this.getTypeMetadata(type);
	                methodNames = {};
	                if (classMetadata['extends']) {
	                    var /** @type {?} */ parentMethodNames_1 = this._methodNames(this.simplify(type, classMetadata['extends']));
	                    Object.keys(parentMethodNames_1).forEach(function (parentProp) {
	                        methodNames[parentProp] = parentMethodNames_1[parentProp];
	                    });
	                }
	                var /** @type {?} */ members_2 = classMetadata['members'] || {};
	                Object.keys(members_2).forEach(function (propName) {
	                    var /** @type {?} */ propData = members_2[propName];
	                    var /** @type {?} */ isMethod = ((propData)).some(function (a) { return a['__symbolic'] == 'method'; });
	                    methodNames[propName] = methodNames[propName] || isMethod;
	                });
	                this.methodCache.set(type, methodNames);
	            }
	            return methodNames;
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        StaticReflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            if (!(type instanceof StaticSymbol)) {
	                this.reportError(new Error("hasLifecycleHook received " + JSON.stringify(type) + " which is not a StaticSymbol"), type);
	            }
	            try {
	                return !!this._methodNames(type)[lcProperty];
	            }
	            catch (e) {
	                console.error("Failed on type " + JSON.stringify(type) + " with error " + e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} type
	         * @param {?} ctor
	         * @return {?}
	         */
	        StaticReflector.prototype._registerDecoratorOrConstructor = function (type, ctor) {
	            this.conversionMap.set(type, function (context, args) { return new (ctor.bind.apply(ctor, [void 0].concat(args)))(); });
	        };
	        /**
	         * @param {?} type
	         * @param {?} fn
	         * @return {?}
	         */
	        StaticReflector.prototype._registerFunction = function (type, fn) {
	            this.conversionMap.set(type, function (context, args) { return fn.apply(undefined, args); });
	        };
	        /**
	         * @return {?}
	         */
	        StaticReflector.prototype.initializeConversionMap = function () {
	            var coreDecorators = ANGULAR_IMPORT_LOCATIONS.coreDecorators, diDecorators = ANGULAR_IMPORT_LOCATIONS.diDecorators, diMetadata = ANGULAR_IMPORT_LOCATIONS.diMetadata, diOpaqueToken = ANGULAR_IMPORT_LOCATIONS.diOpaqueToken, animationMetadata = ANGULAR_IMPORT_LOCATIONS.animationMetadata, provider = ANGULAR_IMPORT_LOCATIONS.provider;
	            this.opaqueToken = this.findDeclaration(diOpaqueToken, 'OpaqueToken');
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Host'), _angular_core.Host);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Injectable'), _angular_core.Injectable);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Self'), _angular_core.Self);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'SkipSelf'), _angular_core.SkipSelf);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Inject'), _angular_core.Inject);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diDecorators, 'Optional'), _angular_core.Optional);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Attribute'), _angular_core.Attribute);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChild'), _angular_core.ContentChild);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ContentChildren'), _angular_core.ContentChildren);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChild'), _angular_core.ViewChild);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'ViewChildren'), _angular_core.ViewChildren);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Input'), _angular_core.Input);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Output'), _angular_core.Output);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Pipe'), _angular_core.Pipe);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostBinding'), _angular_core.HostBinding);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'HostListener'), _angular_core.HostListener);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Directive'), _angular_core.Directive);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'Component'), _angular_core.Component);
	            this._registerDecoratorOrConstructor(this.findDeclaration(coreDecorators, 'NgModule'), _angular_core.NgModule);
	            // Note: Some metadata classes can be used directly with Provider.deps.
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Host'), _angular_core.Host);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Self'), _angular_core.Self);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'SkipSelf'), _angular_core.SkipSelf);
	            this._registerDecoratorOrConstructor(this.findDeclaration(diMetadata, 'Optional'), _angular_core.Optional);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'trigger'), _angular_core.trigger);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'state'), _angular_core.state);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'transition'), _angular_core.transition);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'style'), _angular_core.style);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'animate'), _angular_core.animate);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'keyframes'), _angular_core.keyframes);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'sequence'), _angular_core.sequence);
	            this._registerFunction(this.findDeclaration(animationMetadata, 'group'), _angular_core.group);
	        };
	        /**
	         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	         * All types passed to the StaticResolver should be pseudo-types returned by this method.
	         *
	         * @param {?} declarationFile the absolute path of the file where the symbol is declared
	         * @param {?} name the name of the type.
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticReflector.prototype.getStaticSymbol = function (declarationFile, name, members) {
	            return this.symbolResolver.getStaticSymbol(declarationFile, name, members);
	        };
	        /**
	         * @param {?} error
	         * @param {?} context
	         * @param {?=} path
	         * @return {?}
	         */
	        StaticReflector.prototype.reportError = function (error, context, path) {
	            if (this.errorRecorder) {
	                this.errorRecorder(error, (context && context.filePath) || path);
	            }
	            else {
	                throw error;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        StaticReflector.prototype.simplify = function (context, value) {
	            var _this = this;
	            var /** @type {?} */ self = this;
	            var /** @type {?} */ scope = BindingScope.empty;
	            var /** @type {?} */ calling = new Map();
	            /**
	             * @param {?} context
	             * @param {?} value
	             * @param {?} depth
	             * @return {?}
	             */
	            function simplifyInContext(context, value, depth) {
	                /**
	                 * @param {?} staticSymbol
	                 * @return {?}
	                 */
	                function resolveReferenceValue(staticSymbol) {
	                    var /** @type {?} */ resolvedSymbol = self.symbolResolver.resolveSymbol(staticSymbol);
	                    return resolvedSymbol ? resolvedSymbol.metadata : null;
	                }
	                /**
	                 * @param {?} functionSymbol
	                 * @param {?} targetFunction
	                 * @param {?} args
	                 * @return {?}
	                 */
	                function simplifyCall(functionSymbol, targetFunction, args) {
	                    if (targetFunction && targetFunction['__symbolic'] == 'function') {
	                        if (calling.get(functionSymbol)) {
	                            throw new Error('Recursion not supported');
	                        }
	                        calling.set(functionSymbol, true);
	                        try {
	                            var /** @type {?} */ value_1 = targetFunction['value'];
	                            if (value_1 && (depth != 0 || value_1.__symbolic != 'error')) {
	                                var /** @type {?} */ parameters = targetFunction['parameters'];
	                                var /** @type {?} */ defaults = targetFunction.defaults;
	                                args = args.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });
	                                if (defaults && defaults.length > args.length) {
	                                    args.push.apply(args, defaults.slice(args.length).map(function (value) { return simplify(value); }));
	                                }
	                                var /** @type {?} */ functionScope = BindingScope.build();
	                                for (var /** @type {?} */ i = 0; i < parameters.length; i++) {
	                                    functionScope.define(parameters[i], args[i]);
	                                }
	                                var /** @type {?} */ oldScope = scope;
	                                var /** @type {?} */ result_1;
	                                try {
	                                    scope = functionScope.done();
	                                    result_1 = simplifyInContext(functionSymbol, value_1, depth + 1);
	                                }
	                                finally {
	                                    scope = oldScope;
	                                }
	                                return result_1;
	                            }
	                        }
	                        finally {
	                            calling.delete(functionSymbol);
	                        }
	                    }
	                    if (depth === 0) {
	                        // If depth is 0 we are evaluating the top level expression that is describing element
	                        // decorator. In this case, it is a decorator we don't understand, such as a custom
	                        // non-angular decorator, and we should just ignore it.
	                        return { __symbolic: 'ignore' };
	                    }
	                    return simplify({ __symbolic: 'error', message: 'Function call not supported', context: functionSymbol });
	                }
	                /**
	                 * @param {?} expression
	                 * @return {?}
	                 */
	                function simplify(expression) {
	                    if (isPrimitive$1(expression)) {
	                        return expression;
	                    }
	                    if (expression instanceof Array) {
	                        var /** @type {?} */ result_2 = [];
	                        for (var _i = 0, _a = ((expression)); _i < _a.length; _i++) {
	                            var item = _a[_i];
	                            // Check for a spread expression
	                            if (item && item.__symbolic === 'spread') {
	                                var /** @type {?} */ spreadArray = simplify(item.expression);
	                                if (Array.isArray(spreadArray)) {
	                                    for (var _b = 0, spreadArray_1 = spreadArray; _b < spreadArray_1.length; _b++) {
	                                        var spreadItem = spreadArray_1[_b];
	                                        result_2.push(spreadItem);
	                                    }
	                                    continue;
	                                }
	                            }
	                            var /** @type {?} */ value_2 = simplify(item);
	                            if (shouldIgnore(value_2)) {
	                                continue;
	                            }
	                            result_2.push(value_2);
	                        }
	                        return result_2;
	                    }
	                    if (expression instanceof StaticSymbol) {
	                        // Stop simplification at builtin symbols
	                        if (expression === self.opaqueToken || self.conversionMap.has(expression)) {
	                            return expression;
	                        }
	                        else {
	                            var /** @type {?} */ staticSymbol = expression;
	                            var /** @type {?} */ declarationValue = resolveReferenceValue(staticSymbol);
	                            if (declarationValue) {
	                                return simplifyInContext(staticSymbol, declarationValue, depth + 1);
	                            }
	                            else {
	                                return staticSymbol;
	                            }
	                        }
	                    }
	                    if (expression) {
	                        if (expression['__symbolic']) {
	                            var /** @type {?} */ staticSymbol = void 0;
	                            switch (expression['__symbolic']) {
	                                case 'binop':
	                                    var /** @type {?} */ left = simplify(expression['left']);
	                                    if (shouldIgnore(left))
	                                        return left;
	                                    var /** @type {?} */ right = simplify(expression['right']);
	                                    if (shouldIgnore(right))
	                                        return right;
	                                    switch (expression['operator']) {
	                                        case '&&':
	                                            return left && right;
	                                        case '||':
	                                            return left || right;
	                                        case '|':
	                                            return left | right;
	                                        case '^':
	                                            return left ^ right;
	                                        case '&':
	                                            return left & right;
	                                        case '==':
	                                            return left == right;
	                                        case '!=':
	                                            return left != right;
	                                        case '===':
	                                            return left === right;
	                                        case '!==':
	                                            return left !== right;
	                                        case '<':
	                                            return left < right;
	                                        case '>':
	                                            return left > right;
	                                        case '<=':
	                                            return left <= right;
	                                        case '>=':
	                                            return left >= right;
	                                        case '<<':
	                                            return left << right;
	                                        case '>>':
	                                            return left >> right;
	                                        case '+':
	                                            return left + right;
	                                        case '-':
	                                            return left - right;
	                                        case '*':
	                                            return left * right;
	                                        case '/':
	                                            return left / right;
	                                        case '%':
	                                            return left % right;
	                                    }
	                                    return null;
	                                case 'if':
	                                    var /** @type {?} */ condition = simplify(expression['condition']);
	                                    return condition ? simplify(expression['thenExpression']) :
	                                        simplify(expression['elseExpression']);
	                                case 'pre':
	                                    var /** @type {?} */ operand = simplify(expression['operand']);
	                                    if (shouldIgnore(operand))
	                                        return operand;
	                                    switch (expression['operator']) {
	                                        case '+':
	                                            return operand;
	                                        case '-':
	                                            return -operand;
	                                        case '!':
	                                            return !operand;
	                                        case '~':
	                                            return ~operand;
	                                    }
	                                    return null;
	                                case 'index':
	                                    var /** @type {?} */ indexTarget = simplify(expression['expression']);
	                                    var /** @type {?} */ index = simplify(expression['index']);
	                                    if (indexTarget && isPrimitive$1(index))
	                                        return indexTarget[index];
	                                    return null;
	                                case 'select':
	                                    var /** @type {?} */ member = expression['member'];
	                                    var /** @type {?} */ selectContext = context;
	                                    var /** @type {?} */ selectTarget = simplify(expression['expression']);
	                                    if (selectTarget instanceof StaticSymbol) {
	                                        var /** @type {?} */ members = selectTarget.members.concat(member);
	                                        selectContext =
	                                            self.getStaticSymbol(selectTarget.filePath, selectTarget.name, members);
	                                        var /** @type {?} */ declarationValue = resolveReferenceValue(selectContext);
	                                        if (declarationValue) {
	                                            return simplifyInContext(selectContext, declarationValue, depth + 1);
	                                        }
	                                        else {
	                                            return selectContext;
	                                        }
	                                    }
	                                    if (selectTarget && isPrimitive$1(member))
	                                        return simplifyInContext(selectContext, selectTarget[member], depth + 1);
	                                    return null;
	                                case 'reference':
	                                    // Note: This only has to deal with variable references,
	                                    // as symbol references have been converted into StaticSymbols already
	                                    // in the StaticSymbolResolver!
	                                    var /** @type {?} */ name_1 = expression['name'];
	                                    var /** @type {?} */ localValue = scope.resolve(name_1);
	                                    if (localValue != BindingScope.missing) {
	                                        return localValue;
	                                    }
	                                    break;
	                                case 'class':
	                                    return context;
	                                case 'function':
	                                    return context;
	                                case 'new':
	                                case 'call':
	                                    // Determine if the function is a built-in conversion
	                                    staticSymbol = simplifyInContext(context, expression['expression'], depth + 1);
	                                    if (staticSymbol instanceof StaticSymbol) {
	                                        if (staticSymbol === self.opaqueToken) {
	                                            // if somebody calls new OpaqueToken, don't create an OpaqueToken,
	                                            // but rather return the symbol to which the OpaqueToken is assigned to.
	                                            return context;
	                                        }
	                                        var /** @type {?} */ argExpressions = expression['arguments'] || [];
	                                        var /** @type {?} */ converter = self.conversionMap.get(staticSymbol);
	                                        if (converter) {
	                                            var /** @type {?} */ args = argExpressions.map(function (arg) { return simplifyInContext(context, arg, depth + 1); });
	                                            return converter(context, args);
	                                        }
	                                        else {
	                                            // Determine if the function is one we can simplify.
	                                            var /** @type {?} */ targetFunction = resolveReferenceValue(staticSymbol);
	                                            return simplifyCall(staticSymbol, targetFunction, argExpressions);
	                                        }
	                                    }
	                                    break;
	                                case 'error':
	                                    var /** @type {?} */ message = produceErrorMessage(expression);
	                                    if (expression['line']) {
	                                        message =
	                                            message + " (position " + (expression['line'] + 1) + ":" + (expression['character'] + 1) + " in the original .ts file)";
	                                        throw positionalError(message, context.filePath, expression['line'], expression['character']);
	                                    }
	                                    throw new Error(message);
	                            }
	                            return null;
	                        }
	                        return mapStringMap(expression, function (value, name) { return simplify(value); });
	                    }
	                    return null;
	                }
	                try {
	                    return simplify(value);
	                }
	                catch (e) {
	                    var /** @type {?} */ members = context.members.length ? "." + context.members.join('.') : '';
	                    var /** @type {?} */ message = e.message + ", resolving symbol " + context.name + members + " in " + context.filePath;
	                    if (e.fileName) {
	                        throw positionalError(message, e.fileName, e.line, e.column);
	                    }
	                    throw new Error(message);
	                }
	            }
	            var /** @type {?} */ recordedSimplifyInContext = function (context, value, depth) {
	                try {
	                    return simplifyInContext(context, value, depth);
	                }
	                catch (e) {
	                    _this.reportError(e, context);
	                }
	            };
	            var /** @type {?} */ result = this.errorRecorder ? recordedSimplifyInContext(context, value, 0) :
	                simplifyInContext(context, value, 0);
	            if (shouldIgnore(result)) {
	                return undefined;
	            }
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        StaticReflector.prototype.getTypeMetadata = function (type) {
	            var /** @type {?} */ resolvedSymbol = this.symbolResolver.resolveSymbol(type);
	            return resolvedSymbol && resolvedSymbol.metadata ? resolvedSymbol.metadata :
	                { __symbolic: 'class' };
	        };
	        return StaticReflector;
	    }());
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    function expandedMessage(error) {
	        switch (error.message) {
	            case 'Reference to non-exported class':
	                if (error.context && error.context.className) {
	                    return "Reference to a non-exported class " + error.context.className + ". Consider exporting the class";
	                }
	                break;
	            case 'Variable not initialized':
	                return 'Only initialized variables and constants can be referenced because the value of this variable is needed by the template compiler';
	            case 'Destructuring not supported':
	                return 'Referencing an exported destructured variable or constant is not supported by the template compiler. Consider simplifying this to avoid destructuring';
	            case 'Could not resolve type':
	                if (error.context && error.context.typeName) {
	                    return "Could not resolve type " + error.context.typeName;
	                }
	                break;
	            case 'Function call not supported':
	                var /** @type {?} */ prefix = error.context && error.context.name ? "Calling function '" + error.context.name + "', f" : 'F';
	                return prefix +
	                    'unction calls are not supported. Consider replacing the function or lambda with a reference to an exported function';
	            case 'Reference to a local symbol':
	                if (error.context && error.context.name) {
	                    return "Reference to a local (non-exported) symbol '" + error.context.name + "'. Consider exporting the symbol";
	                }
	                break;
	        }
	        return error.message;
	    }
	    /**
	     * @param {?} error
	     * @return {?}
	     */
	    function produceErrorMessage(error) {
	        return "Error encountered resolving symbol values statically. " + expandedMessage(error);
	    }
	    /**
	     * @param {?} input
	     * @param {?} transform
	     * @return {?}
	     */
	    function mapStringMap(input, transform) {
	        if (!input)
	            return {};
	        var /** @type {?} */ result = {};
	        Object.keys(input).forEach(function (key) {
	            var /** @type {?} */ value = transform(input[key], key);
	            if (!shouldIgnore(value)) {
	                if (HIDDEN_KEY.test(key)) {
	                    Object.defineProperty(result, key, { enumerable: false, configurable: true, value: value });
	                }
	                else {
	                    result[key] = value;
	                }
	            }
	        });
	        return result;
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isPrimitive$1(o) {
	        return o === null || (typeof o !== 'function' && typeof o !== 'object');
	    }
	    /**
	     * @abstract
	     */
	    var BindingScope = (function () {
	        function BindingScope() {
	        }
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        BindingScope.prototype.resolve = function (name) { };
	        /**
	         * @return {?}
	         */
	        BindingScope.build = function () {
	            var /** @type {?} */ current = new Map();
	            return {
	                define: function (name, value) {
	                    current.set(name, value);
	                    return this;
	                },
	                done: function () {
	                    return current.size > 0 ? new PopulatedScope(current) : BindingScope.empty;
	                }
	            };
	        };
	        BindingScope.missing = {};
	        BindingScope.empty = { resolve: function (name) { return BindingScope.missing; } };
	        return BindingScope;
	    }());
	    var PopulatedScope = (function (_super) {
	        __extends$27(PopulatedScope, _super);
	        /**
	         * @param {?} bindings
	         */
	        function PopulatedScope(bindings) {
	            _super.call(this);
	            this.bindings = bindings;
	        }
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        PopulatedScope.prototype.resolve = function (name) {
	            return this.bindings.has(name) ? this.bindings.get(name) : BindingScope.missing;
	        };
	        return PopulatedScope;
	    }(BindingScope));
	    /**
	     * @param {?} value
	     * @return {?}
	     */
	    function shouldIgnore(value) {
	        return value && value.__symbolic == 'ignore';
	    }
	    /**
	     * @param {?} message
	     * @param {?} fileName
	     * @param {?} line
	     * @param {?} column
	     * @return {?}
	     */
	    function positionalError(message, fileName, line, column) {
	        var /** @type {?} */ result = new Error(message);
	        ((result)).fileName = fileName;
	        ((result)).line = line;
	        ((result)).column = column;
	        return result;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$28 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResolvedStaticSymbol = (function () {
	        /**
	         * @param {?} symbol
	         * @param {?} metadata
	         */
	        function ResolvedStaticSymbol(symbol, metadata) {
	            this.symbol = symbol;
	            this.metadata = metadata;
	        }
	        return ResolvedStaticSymbol;
	    }());
	    var /** @type {?} */ SUPPORTED_SCHEMA_VERSION = 3;
	    /**
	     * This class is responsible for loading metadata per symbol,
	     * and normalizing references between symbols.
	     */
	    var StaticSymbolResolver = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolCache
	         * @param {?} summaryResolver
	         * @param {?=} errorRecorder
	         */
	        function StaticSymbolResolver(host, staticSymbolCache, summaryResolver, errorRecorder) {
	            this.host = host;
	            this.staticSymbolCache = staticSymbolCache;
	            this.summaryResolver = summaryResolver;
	            this.errorRecorder = errorRecorder;
	            this.metadataCache = new Map();
	            this.resolvedSymbols = new Map();
	            this.resolvedFilePaths = new Set();
	        }
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.resolveSymbol = function (staticSymbol) {
	            if (staticSymbol.members.length > 0) {
	                return this._resolveSymbolMembers(staticSymbol);
	            }
	            var /** @type {?} */ result = this._resolveSymbolFromSummary(staticSymbol);
	            if (!result) {
	                // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	                // have summaries, only .d.ts files. So we always need to check both, the summary
	                // and metadata.
	                this._createSymbolsOf(staticSymbol.filePath);
	                result = this.resolvedSymbols.get(staticSymbol);
	            }
	            return result;
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._resolveSymbolMembers = function (staticSymbol) {
	            var /** @type {?} */ members = staticSymbol.members;
	            var /** @type {?} */ baseResolvedSymbol = this.resolveSymbol(this.getStaticSymbol(staticSymbol.filePath, staticSymbol.name));
	            if (!baseResolvedSymbol) {
	                return null;
	            }
	            var /** @type {?} */ baseMetadata = baseResolvedSymbol.metadata;
	            if (baseMetadata instanceof StaticSymbol) {
	                return new ResolvedStaticSymbol(staticSymbol, this.getStaticSymbol(baseMetadata.filePath, baseMetadata.name, members));
	            }
	            else if (baseMetadata && baseMetadata.__symbolic === 'class') {
	                if (baseMetadata.statics && members.length === 1) {
	                    return new ResolvedStaticSymbol(staticSymbol, baseMetadata.statics[members[0]]);
	                }
	            }
	            else {
	                var /** @type {?} */ value = baseMetadata;
	                for (var /** @type {?} */ i = 0; i < members.length && value; i++) {
	                    value = value[members[i]];
	                }
	                return new ResolvedStaticSymbol(staticSymbol, value);
	            }
	            return null;
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._resolveSymbolFromSummary = function (staticSymbol) {
	            var /** @type {?} */ summary = this.summaryResolver.resolveSummary(staticSymbol);
	            return summary ? new ResolvedStaticSymbol(staticSymbol, summary.metadata) : null;
	        };
	        /**
	         * getStaticSymbol produces a Type whose metadata is known but whose implementation is not loaded.
	         * All types passed to the StaticResolver should be pseudo-types returned by this method.
	         *
	         * @param {?} declarationFile the absolute path of the file where the symbol is declared
	         * @param {?} name the name of the type.
	         * @param {?=} members
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getStaticSymbol = function (declarationFile, name, members) {
	            return this.staticSymbolCache.get(declarationFile, name, members);
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getSymbolsOf = function (filePath) {
	            // Note: Some users use libraries that were not compiled with ngc, i.e. they don't
	            // have summaries, only .d.ts files. So we always need to check both, the summary
	            // and metadata.
	            var /** @type {?} */ symbols = new Set(this.summaryResolver.getSymbolsOf(filePath));
	            this._createSymbolsOf(filePath);
	            this.resolvedSymbols.forEach(function (resolvedSymbol) {
	                if (resolvedSymbol.symbol.filePath === filePath) {
	                    symbols.add(resolvedSymbol.symbol);
	                }
	            });
	            return Array.from(symbols);
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype._createSymbolsOf = function (filePath) {
	            var _this = this;
	            if (this.resolvedFilePaths.has(filePath)) {
	                return;
	            }
	            this.resolvedFilePaths.add(filePath);
	            var /** @type {?} */ resolvedSymbols = [];
	            var /** @type {?} */ metadata = this.getModuleMetadata(filePath);
	            if (metadata['metadata']) {
	                // handle direct declarations of the symbol
	                Object.keys(metadata['metadata']).forEach(function (symbolName) {
	                    var /** @type {?} */ symbolMeta = metadata['metadata'][symbolName];
	                    resolvedSymbols.push(_this.createResolvedSymbol(_this.getStaticSymbol(filePath, symbolName), symbolMeta));
	                });
	            }
	            // handle the symbols in one of the re-export location
	            if (metadata['exports']) {
	                var _loop_1 = function(moduleExport) {
	                    // handle the symbols in the list of explicitly re-exported symbols.
	                    if (moduleExport.export) {
	                        moduleExport.export.forEach(function (exportSymbol) {
	                            var /** @type {?} */ symbolName;
	                            if (typeof exportSymbol === 'string') {
	                                symbolName = exportSymbol;
	                            }
	                            else {
	                                symbolName = exportSymbol.as;
	                            }
	                            var /** @type {?} */ symName = symbolName;
	                            if (typeof exportSymbol !== 'string') {
	                                symName = exportSymbol.name;
	                            }
	                            var /** @type {?} */ resolvedModule = _this.resolveModule(moduleExport.from, filePath);
	                            if (resolvedModule) {
	                                var /** @type {?} */ targetSymbol = _this.getStaticSymbol(resolvedModule, symName);
	                                var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, symbolName);
	                                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
	                            }
	                        });
	                    }
	                    else {
	                        // handle the symbols via export * directives.
	                        var /** @type {?} */ resolvedModule = this_1.resolveModule(moduleExport.from, filePath);
	                        if (resolvedModule) {
	                            var /** @type {?} */ nestedExports = this_1.getSymbolsOf(resolvedModule);
	                            nestedExports.forEach(function (targetSymbol) {
	                                var /** @type {?} */ sourceSymbol = _this.getStaticSymbol(filePath, targetSymbol.name);
	                                resolvedSymbols.push(new ResolvedStaticSymbol(sourceSymbol, targetSymbol));
	                            });
	                        }
	                    }
	                };
	                var this_1 = this;
	                for (var _i = 0, _a = metadata['exports']; _i < _a.length; _i++) {
	                    var moduleExport = _a[_i];
	                    _loop_1(moduleExport);
	                }
	            }
	            resolvedSymbols.forEach(function (resolvedSymbol) { return _this.resolvedSymbols.set(resolvedSymbol.symbol, resolvedSymbol); });
	        };
	        /**
	         * @param {?} sourceSymbol
	         * @param {?} metadata
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.createResolvedSymbol = function (sourceSymbol, metadata) {
	            var /** @type {?} */ self = this;
	            var ReferenceTransformer = (function (_super) {
	                __extends$28(ReferenceTransformer, _super);
	                function ReferenceTransformer() {
	                    _super.apply(this, arguments);
	                }
	                /**
	                 * @param {?} map
	                 * @param {?} functionParams
	                 * @return {?}
	                 */
	                ReferenceTransformer.prototype.visitStringMap = function (map, functionParams) {
	                    var /** @type {?} */ symbolic = map['__symbolic'];
	                    if (symbolic === 'function') {
	                        var /** @type {?} */ oldLen = functionParams.length;
	                        functionParams.push.apply(functionParams, (map['parameters'] || []));
	                        var /** @type {?} */ result = _super.prototype.visitStringMap.call(this, map, functionParams);
	                        functionParams.length = oldLen;
	                        return result;
	                    }
	                    else if (symbolic === 'reference') {
	                        var /** @type {?} */ module_1 = map['module'];
	                        var /** @type {?} */ name_1 = map['name'];
	                        if (!name_1) {
	                            return null;
	                        }
	                        var /** @type {?} */ filePath = void 0;
	                        if (module_1) {
	                            filePath = self.resolveModule(module_1, sourceSymbol.filePath);
	                            if (!filePath) {
	                                return {
	                                    __symbolic: 'error',
	                                    message: "Could not resolve " + module_1 + " relative to " + sourceSymbol.filePath + "."
	                                };
	                            }
	                        }
	                        else {
	                            var /** @type {?} */ isFunctionParam = functionParams.indexOf(name_1) >= 0;
	                            if (!isFunctionParam) {
	                                filePath = sourceSymbol.filePath;
	                            }
	                        }
	                        if (filePath) {
	                            return self.getStaticSymbol(filePath, name_1);
	                        }
	                        else {
	                            // reference to a function parameter
	                            return { __symbolic: 'reference', name: name_1 };
	                        }
	                    }
	                    else {
	                        return _super.prototype.visitStringMap.call(this, map, functionParams);
	                    }
	                };
	                return ReferenceTransformer;
	            }(ValueTransformer));
	            var /** @type {?} */ transformedMeta = visitValue(metadata, new ReferenceTransformer(), []);
	            return new ResolvedStaticSymbol(sourceSymbol, transformedMeta);
	        };
	        /**
	         * @param {?} error
	         * @param {?} context
	         * @param {?=} path
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.reportError = function (error, context, path) {
	            if (this.errorRecorder) {
	                this.errorRecorder(error, (context && context.filePath) || path);
	            }
	            else {
	                throw error;
	            }
	        };
	        /**
	         * @param {?} module an absolute path to a module file.
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getModuleMetadata = function (module) {
	            var /** @type {?} */ moduleMetadata = this.metadataCache.get(module);
	            if (!moduleMetadata) {
	                var /** @type {?} */ moduleMetadatas = this.host.getMetadataFor(module);
	                if (moduleMetadatas) {
	                    var /** @type {?} */ maxVersion_1 = -1;
	                    moduleMetadatas.forEach(function (md) {
	                        if (md['version'] > maxVersion_1) {
	                            maxVersion_1 = md['version'];
	                            moduleMetadata = md;
	                        }
	                    });
	                }
	                if (!moduleMetadata) {
	                    moduleMetadata =
	                        { __symbolic: 'module', version: SUPPORTED_SCHEMA_VERSION, module: module, metadata: {} };
	                }
	                if (moduleMetadata['version'] != SUPPORTED_SCHEMA_VERSION) {
	                    var /** @type {?} */ errorMessage = moduleMetadata['version'] == 2 ?
	                        "Unsupported metadata version " + moduleMetadata['version'] + " for module " + module + ". This module should be compiled with a newer version of ngc" :
	                        "Metadata version mismatch for module " + module + ", found version " + moduleMetadata['version'] + ", expected " + SUPPORTED_SCHEMA_VERSION;
	                    this.reportError(new Error(errorMessage), null);
	                }
	                this.metadataCache.set(module, moduleMetadata);
	            }
	            return moduleMetadata;
	        };
	        /**
	         * @param {?} module
	         * @param {?} symbolName
	         * @param {?=} containingFile
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.getSymbolByModule = function (module, symbolName, containingFile) {
	            var /** @type {?} */ filePath = this.resolveModule(module, containingFile);
	            if (!filePath) {
	                throw new Error("Could not resolve module " + module + " relative to " + containingFile);
	            }
	            return this.getStaticSymbol(filePath, symbolName);
	        };
	        /**
	         * @param {?} module
	         * @param {?} containingFile
	         * @return {?}
	         */
	        StaticSymbolResolver.prototype.resolveModule = function (module, containingFile) {
	            try {
	                return this.host.moduleNameToFileName(module, containingFile);
	            }
	            catch (e) {
	                console.error("Could not resolve module '" + module + "' relative to file " + containingFile);
	                this.reportError(new e, null, containingFile);
	            }
	        };
	        return StaticSymbolResolver;
	    }());

	    var AotSummaryResolver = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolCache
	         */
	        function AotSummaryResolver(host, staticSymbolCache) {
	            this.host = host;
	            this.staticSymbolCache = staticSymbolCache;
	            this.summaryCache = new Map();
	            this.loadedFilePaths = new Set();
	        }
	        /**
	         * @param {?} symbol
	         * @return {?}
	         */
	        AotSummaryResolver.prototype._assertNoMembers = function (symbol) {
	            if (symbol.members.length) {
	                throw new Error("Internal state: StaticSymbols in summaries can't have members! " + JSON.stringify(symbol));
	            }
	        };
	        /**
	         * @param {?} staticSymbol
	         * @return {?}
	         */
	        AotSummaryResolver.prototype.resolveSummary = function (staticSymbol) {
	            this._assertNoMembers(staticSymbol);
	            var /** @type {?} */ summary = this.summaryCache.get(staticSymbol);
	            if (!summary) {
	                this._loadSummaryFile(staticSymbol.filePath);
	                summary = this.summaryCache.get(staticSymbol);
	            }
	            return summary;
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        AotSummaryResolver.prototype.getSymbolsOf = function (filePath) {
	            this._loadSummaryFile(filePath);
	            return Array.from(this.summaryCache.keys()).filter(function (symbol) { return symbol.filePath === filePath; });
	        };
	        /**
	         * @param {?} filePath
	         * @return {?}
	         */
	        AotSummaryResolver.prototype._loadSummaryFile = function (filePath) {
	            var _this = this;
	            if (this.loadedFilePaths.has(filePath)) {
	                return;
	            }
	            this.loadedFilePaths.add(filePath);
	            if (!this.host.isSourceFile(filePath)) {
	                var /** @type {?} */ summaryFilePath = summaryFileName(filePath);
	                var /** @type {?} */ json = void 0;
	                try {
	                    json = this.host.loadSummary(summaryFilePath);
	                }
	                catch (e) {
	                    console.error("Error loading summary file " + summaryFilePath);
	                    throw e;
	                }
	                if (json) {
	                    var /** @type {?} */ readSummaries = deserializeSummaries(this.staticSymbolCache, json);
	                    readSummaries.forEach(function (summary) { _this.summaryCache.set(summary.symbol, summary); });
	                }
	            }
	        };
	        return AotSummaryResolver;
	    }());

	    /**
	     * Creates a new AotCompiler based on options and a host.
	     * @param {?} compilerHost
	     * @param {?} options
	     * @return {?}
	     */
	    function createAotCompiler(compilerHost, options) {
	        var /** @type {?} */ translations = options.translations || '';
	        var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	        var /** @type {?} */ symbolCache = new StaticSymbolCache();
	        var /** @type {?} */ summaryResolver = new AotSummaryResolver(compilerHost, symbolCache);
	        var /** @type {?} */ symbolResolver = new StaticSymbolResolver(compilerHost, symbolCache, summaryResolver);
	        var /** @type {?} */ staticReflector = new StaticReflector(symbolResolver);
	        StaticAndDynamicReflectionCapabilities.install(staticReflector);
	        var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser(), translations, options.i18nFormat);
	        var /** @type {?} */ config = new CompilerConfig({
	            genDebugInfo: options.debug === true,
	            defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	            logBindingUpdate: false,
	            useJit: false
	        });
	        var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return compilerHost.loadResource(url); } }, urlResolver, htmlParser, config);
	        var /** @type {?} */ expressionParser = new Parser(new Lexer());
	        var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	        var /** @type {?} */ console = new Console();
	        var /** @type {?} */ tmplParser = new TemplateParser(expressionParser, elementSchemaRegistry, htmlParser, console, []);
	        var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
	        // TODO(vicb): do not pass options.i18nFormat here
	        var /** @type {?} */ compiler = new AotCompiler(compilerHost, resolver, tmplParser, new StyleCompiler(urlResolver), new ViewCompiler(config, elementSchemaRegistry), new DirectiveWrapperCompiler(config, expressionParser, elementSchemaRegistry, console), new NgModuleCompiler(), new TypeScriptEmitter(compilerHost), summaryResolver, options.locale, options.i18nFormat, new AnimationParser(elementSchemaRegistry), symbolResolver);
	        return { compiler: compiler, reflector: staticReflector };
	    }

	    /**
	     * @param {?} statements
	     * @param {?} resultVar
	     * @return {?}
	     */
	    function interpretStatements(statements, resultVar) {
	        var /** @type {?} */ stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
	        var /** @type {?} */ ctx = new _ExecutionContext(null, null, null, new Map());
	        var /** @type {?} */ visitor = new StatementInterpreter();
	        var /** @type {?} */ result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	        return isPresent(result) ? result.value : null;
	    }
	    /**
	     * @param {?} varNames
	     * @param {?} varValues
	     * @param {?} statements
	     * @param {?} ctx
	     * @param {?} visitor
	     * @return {?}
	     */
	    function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	        var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	        for (var /** @type {?} */ i = 0; i < varNames.length; i++) {
	            childCtx.vars.set(varNames[i], varValues[i]);
	        }
	        var /** @type {?} */ result = visitor.visitAllStatements(statements, childCtx);
	        return isPresent(result) ? result.value : null;
	    }
	    var _ExecutionContext = (function () {
	        /**
	         * @param {?} parent
	         * @param {?} instance
	         * @param {?} className
	         * @param {?} vars
	         */
	        function _ExecutionContext(parent, instance, className, vars) {
	            this.parent = parent;
	            this.instance = instance;
	            this.className = className;
	            this.vars = vars;
	        }
	        /**
	         * @return {?}
	         */
	        _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	            return new _ExecutionContext(this, this.instance, this.className, new Map());
	        };
	        return _ExecutionContext;
	    }());
	    var ReturnValue = (function () {
	        /**
	         * @param {?} value
	         */
	        function ReturnValue(value) {
	            this.value = value;
	        }
	        return ReturnValue;
	    }());
	    /**
	     * @param {?} _classStmt
	     * @param {?} _ctx
	     * @param {?} _visitor
	     * @return {?}
	     */
	    function createDynamicClass(_classStmt, _ctx, _visitor) {
	        var /** @type {?} */ propertyDescriptors = {};
	        _classStmt.getters.forEach(function (getter) {
	            // Note: use `function` instead of arrow function to capture `this`
	            propertyDescriptors[getter.name] = {
	                configurable: false,
	                get: function () {
	                    var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                    return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	                }
	            };
	        });
	        _classStmt.methods.forEach(function (method) {
	            var /** @type {?} */ paramNames = method.params.map(function (param) { return param.name; });
	            // Note: use `function` instead of arrow function to capture `this`
	            propertyDescriptors[method.name] = {
	                writable: false,
	                configurable: false,
	                value: function () {
	                    var args = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        args[_i - 0] = arguments[_i];
	                    }
	                    var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                    return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	                }
	            };
	        });
	        var /** @type {?} */ ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	        // Note: use `function` instead of arrow function to capture `this`
	        var /** @type {?} */ ctor = function () {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            var /** @type {?} */ instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	            _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	            _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	        };
	        var /** @type {?} */ superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	        ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	        return ctor;
	    }
	    var StatementInterpreter = (function () {
	        function StatementInterpreter() {
	        }
	        /**
	         * @param {?} ast
	         * @return {?}
	         */
	        StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            var /** @type {?} */ currCtx = ctx;
	            while (currCtx != null) {
	                if (currCtx.vars.has(expr.name)) {
	                    currCtx.vars.set(expr.name, value);
	                    return value;
	                }
	                currCtx = currCtx.parent;
	            }
	            throw new Error("Not declared variable " + expr.name);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	            var /** @type {?} */ varName = ast.name;
	            if (isPresent(ast.builtin)) {
	                switch (ast.builtin) {
	                    case BuiltinVar.Super:
	                        return ctx.instance.__proto__;
	                    case BuiltinVar.This:
	                        return ctx.instance;
	                    case BuiltinVar.CatchError:
	                        varName = CATCH_ERROR_VAR$2;
	                        break;
	                    case BuiltinVar.CatchStack:
	                        varName = CATCH_STACK_VAR$2;
	                        break;
	                    default:
	                        throw new Error("Unknown builtin variable " + ast.builtin);
	                }
	            }
	            var /** @type {?} */ currCtx = ctx;
	            while (currCtx != null) {
	                if (currCtx.vars.has(varName)) {
	                    return currCtx.vars.get(varName);
	                }
	                currCtx = currCtx.parent;
	            }
	            throw new Error("Not declared variable " + varName);
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ index = expr.index.visitExpression(this, ctx);
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            receiver[index] = value;
	            return value;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ value = expr.value.visitExpression(this, ctx);
	            receiver[expr.name] = value;
	            return value;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	            var /** @type {?} */ receiver = expr.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ args = this.visitAllExpressions(expr.args, ctx);
	            var /** @type {?} */ result;
	            if (isPresent(expr.builtin)) {
	                switch (expr.builtin) {
	                    case BuiltinMethod.ConcatArray:
	                        result = receiver.concat.apply(receiver, args);
	                        break;
	                    case BuiltinMethod.SubscribeObservable:
	                        result = receiver.subscribe({ next: args[0] });
	                        break;
	                    case BuiltinMethod.Bind:
	                        result = receiver.bind.apply(receiver, args);
	                        break;
	                    default:
	                        throw new Error("Unknown builtin method " + expr.builtin);
	                }
	            }
	            else {
	                result = receiver[expr.name].apply(receiver, args);
	            }
	            return result;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	            var /** @type {?} */ args = this.visitAllExpressions(stmt.args, ctx);
	            var /** @type {?} */ fnExpr = stmt.fn;
	            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	                ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	                return null;
	            }
	            else {
	                var /** @type {?} */ fn = stmt.fn.visitExpression(this, ctx);
	                return fn.apply(null, args);
	            }
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	            return new ReturnValue(stmt.value.visitExpression(this, ctx));
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var /** @type {?} */ clazz = createDynamicClass(stmt, ctx, this);
	            ctx.vars.set(stmt.name, clazz);
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	            return stmt.expr.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	            var /** @type {?} */ condition = stmt.condition.visitExpression(this, ctx);
	            if (condition) {
	                return this.visitAllStatements(stmt.trueCase, ctx);
	            }
	            else if (isPresent(stmt.falseCase)) {
	                return this.visitAllStatements(stmt.falseCase, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            try {
	                return this.visitAllStatements(stmt.bodyStmts, ctx);
	            }
	            catch (e) {
	                var /** @type {?} */ childCtx = ctx.createChildWihtLocalVars();
	                childCtx.vars.set(CATCH_ERROR_VAR$2, e);
	                childCtx.vars.set(CATCH_STACK_VAR$2, e.stack);
	                return this.visitAllStatements(stmt.catchStmts, childCtx);
	            }
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	            throw stmt.error.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?=} context
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	            var /** @type {?} */ args = this.visitAllExpressions(ast.args, ctx);
	            var /** @type {?} */ clazz = ast.classExpr.visitExpression(this, ctx);
	            return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	            return ast.value.reference;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	            if (ast.condition.visitExpression(this, ctx)) {
	                return ast.trueCase.visitExpression(this, ctx);
	            }
	            else if (isPresent(ast.falseCase)) {
	                return ast.falseCase.visitExpression(this, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	            return !ast.condition.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	            return ast.value.visitExpression(this, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	            var /** @type {?} */ paramNames = ast.params.map(function (param) { return param.name; });
	            return _declareFn(paramNames, ast.statements, ctx, this);
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            var /** @type {?} */ paramNames = stmt.params.map(function (param) { return param.name; });
	            ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	            var /** @type {?} */ rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	            switch (ast.operator) {
	                case BinaryOperator.Equals:
	                    return lhs() == rhs();
	                case BinaryOperator.Identical:
	                    return lhs() === rhs();
	                case BinaryOperator.NotEquals:
	                    return lhs() != rhs();
	                case BinaryOperator.NotIdentical:
	                    return lhs() !== rhs();
	                case BinaryOperator.And:
	                    return lhs() && rhs();
	                case BinaryOperator.Or:
	                    return lhs() || rhs();
	                case BinaryOperator.Plus:
	                    return lhs() + rhs();
	                case BinaryOperator.Minus:
	                    return lhs() - rhs();
	                case BinaryOperator.Divide:
	                    return lhs() / rhs();
	                case BinaryOperator.Multiply:
	                    return lhs() * rhs();
	                case BinaryOperator.Modulo:
	                    return lhs() % rhs();
	                case BinaryOperator.Lower:
	                    return lhs() < rhs();
	                case BinaryOperator.LowerEquals:
	                    return lhs() <= rhs();
	                case BinaryOperator.Bigger:
	                    return lhs() > rhs();
	                case BinaryOperator.BiggerEquals:
	                    return lhs() >= rhs();
	                default:
	                    throw new Error("Unknown operator " + ast.operator);
	            }
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	            var /** @type {?} */ result;
	            var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	            result = receiver[ast.name];
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	            var /** @type {?} */ receiver = ast.receiver.visitExpression(this, ctx);
	            var /** @type {?} */ prop = ast.index.visitExpression(this, ctx);
	            return receiver[prop];
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	            return this.visitAllExpressions(ast.entries, ctx);
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	            var _this = this;
	            var /** @type {?} */ result = {};
	            ast.entries.forEach(function (entry) { return ((result))[entry.key] = entry.value.visitExpression(_this, ctx); });
	            return result;
	        };
	        /**
	         * @param {?} expressions
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	            var _this = this;
	            return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	        };
	        /**
	         * @param {?} statements
	         * @param {?} ctx
	         * @return {?}
	         */
	        StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	            for (var /** @type {?} */ i = 0; i < statements.length; i++) {
	                var /** @type {?} */ stmt = statements[i];
	                var /** @type {?} */ val = stmt.visitStatement(this, ctx);
	                if (val instanceof ReturnValue) {
	                    return val;
	                }
	            }
	            return null;
	        };
	        return StatementInterpreter;
	    }());
	    /**
	     * @param {?} varNames
	     * @param {?} statements
	     * @param {?} ctx
	     * @param {?} visitor
	     * @return {?}
	     */
	    function _declareFn(varNames, statements, ctx, visitor) {
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	        };
	    }
	    var /** @type {?} */ CATCH_ERROR_VAR$2 = 'error';
	    var /** @type {?} */ CATCH_STACK_VAR$2 = 'stack';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$30 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @abstract
	     */
	    var AbstractJsEmitterVisitor = (function (_super) {
	        __extends$30(AbstractJsEmitterVisitor, _super);
	        function AbstractJsEmitterVisitor() {
	            _super.call(this, false);
	        }
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	            var _this = this;
	            ctx.pushClass(stmt);
	            this._visitClassConstructor(stmt, ctx);
	            if (isPresent(stmt.parent)) {
	                ctx.print(stmt.name + ".prototype = Object.create(");
	                stmt.parent.visitExpression(this, ctx);
	                ctx.println(".prototype);");
	            }
	            stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	            stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	            ctx.popClass();
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	            ctx.print("function " + stmt.name + "(");
	            if (isPresent(stmt.constructorMethod)) {
	                this._visitParams(stmt.constructorMethod.params, ctx);
	            }
	            ctx.println(") {");
	            ctx.incIndent();
	            if (isPresent(stmt.constructorMethod)) {
	                if (stmt.constructorMethod.body.length > 0) {
	                    ctx.println("var self = this;");
	                    this.visitAllStatements(stmt.constructorMethod.body, ctx);
	                }
	            }
	            ctx.decIndent();
	            ctx.println("}");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} getter
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	            ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	            ctx.incIndent();
	            if (getter.body.length > 0) {
	                ctx.println("var self = this;");
	                this.visitAllStatements(getter.body, ctx);
	            }
	            ctx.decIndent();
	            ctx.println("}});");
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} method
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	            ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	            this._visitParams(method.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            if (method.body.length > 0) {
	                ctx.println("var self = this;");
	                this.visitAllStatements(method.body, ctx);
	            }
	            ctx.decIndent();
	            ctx.println("};");
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	            if (ast.builtin === BuiltinVar.This) {
	                ctx.print('self');
	            }
	            else if (ast.builtin === BuiltinVar.Super) {
	                throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	            }
	            else {
	                _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	            ctx.print("var " + stmt.name + " = ");
	            stmt.value.visitExpression(this, ctx);
	            ctx.println(";");
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	            ast.value.visitExpression(this, ctx);
	            return null;
	        };
	        /**
	         * @param {?} expr
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	            var /** @type {?} */ fnExpr = expr.fn;
	            if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	                ctx.currentClass.parent.visitExpression(this, ctx);
	                ctx.print(".call(this");
	                if (expr.args.length > 0) {
	                    ctx.print(", ");
	                    this.visitAllExpressions(expr.args, ctx, ',');
	                }
	                ctx.print(")");
	            }
	            else {
	                _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	            }
	            return null;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	            ctx.print("function(");
	            this._visitParams(ast.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(ast.statements, ctx);
	            ctx.decIndent();
	            ctx.print("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	            ctx.print("function " + stmt.name + "(");
	            this._visitParams(stmt.params, ctx);
	            ctx.println(") {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.statements, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} stmt
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	            ctx.println("try {");
	            ctx.incIndent();
	            this.visitAllStatements(stmt.bodyStmts, ctx);
	            ctx.decIndent();
	            ctx.println("} catch (" + CATCH_ERROR_VAR$1.name + ") {");
	            ctx.incIndent();
	            var /** @type {?} */ catchStmts = [(CATCH_STACK_VAR$1.set(CATCH_ERROR_VAR$1.prop('stack')).toDeclStmt(null, [
	                    StmtModifier.Final
	                ]))].concat(stmt.catchStmts);
	            this.visitAllStatements(catchStmts, ctx);
	            ctx.decIndent();
	            ctx.println("}");
	            return null;
	        };
	        /**
	         * @param {?} params
	         * @param {?} ctx
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	            this.visitAllObjects(function (param) { return ctx.print(param.name); }, params, ctx, ',');
	        };
	        /**
	         * @param {?} method
	         * @return {?}
	         */
	        AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	            var /** @type {?} */ name;
	            switch (method) {
	                case BuiltinMethod.ConcatArray:
	                    name = 'concat';
	                    break;
	                case BuiltinMethod.SubscribeObservable:
	                    name = 'subscribe';
	                    break;
	                case BuiltinMethod.Bind:
	                    name = 'bind';
	                    break;
	                default:
	                    throw new Error("Unknown builtin method: " + method);
	            }
	            return name;
	        };
	        return AbstractJsEmitterVisitor;
	    }(AbstractEmitterVisitor));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$29 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} sourceUrl
	     * @param {?} expr
	     * @param {?} declarations
	     * @param {?} vars
	     * @return {?}
	     */
	    function evalExpression(sourceUrl, expr, declarations, vars) {
	        var /** @type {?} */ fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	        var /** @type {?} */ fnArgNames = [];
	        var /** @type {?} */ fnArgValues = [];
	        for (var argName in vars) {
	            fnArgNames.push(argName);
	            fnArgValues.push(vars[argName]);
	        }
	        return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	    }
	    /**
	     * @param {?} sourceUrl
	     * @param {?} statements
	     * @param {?} resultVar
	     * @return {?}
	     */
	    function jitStatements(sourceUrl, statements, resultVar) {
	        var /** @type {?} */ converter = new JitEmitterVisitor();
	        var /** @type {?} */ ctx = EmitterVisitorContext.createRoot([resultVar]);
	        converter.visitAllStatements(statements, ctx);
	        return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	    }
	    var JitEmitterVisitor = (function (_super) {
	        __extends$29(JitEmitterVisitor, _super);
	        function JitEmitterVisitor() {
	            _super.apply(this, arguments);
	            this._evalArgNames = [];
	            this._evalArgValues = [];
	        }
	        /**
	         * @return {?}
	         */
	        JitEmitterVisitor.prototype.getArgs = function () {
	            var /** @type {?} */ result = {};
	            for (var /** @type {?} */ i = 0; i < this._evalArgNames.length; i++) {
	                result[this._evalArgNames[i]] = this._evalArgValues[i];
	            }
	            return result;
	        };
	        /**
	         * @param {?} ast
	         * @param {?} ctx
	         * @return {?}
	         */
	        JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	            var /** @type {?} */ value = ast.value.reference;
	            var /** @type {?} */ id = this._evalArgValues.indexOf(value);
	            if (id === -1) {
	                id = this._evalArgValues.length;
	                this._evalArgValues.push(value);
	                var /** @type {?} */ name_1 = identifierName(ast.value) || 'val';
	                this._evalArgNames.push("jit_" + name_1 + id);
	            }
	            ctx.print(this._evalArgNames[id]);
	            return null;
	        };
	        return JitEmitterVisitor;
	    }(AbstractJsEmitterVisitor));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$17 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$17 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    /**
	     * An internal module of the Angular compiler that begins with component types,
	     * extracts templates, and eventually produces a compiled version of the component
	     * ready for linking into an application.
	     *
	     * \@security When compiling templates at runtime, you must ensure that the entire template comes
	     * from a trusted source. Attacker-controlled data introduced by a template could expose your
	     * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	     */
	    var JitCompiler = (function () {
	        /**
	         * @param {?} _injector
	         * @param {?} _metadataResolver
	         * @param {?} _templateParser
	         * @param {?} _styleCompiler
	         * @param {?} _viewCompiler
	         * @param {?} _ngModuleCompiler
	         * @param {?} _directiveWrapperCompiler
	         * @param {?} _compilerConfig
	         * @param {?} _animationParser
	         */
	        function JitCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
	            this._injector = _injector;
	            this._metadataResolver = _metadataResolver;
	            this._templateParser = _templateParser;
	            this._styleCompiler = _styleCompiler;
	            this._viewCompiler = _viewCompiler;
	            this._ngModuleCompiler = _ngModuleCompiler;
	            this._directiveWrapperCompiler = _directiveWrapperCompiler;
	            this._compilerConfig = _compilerConfig;
	            this._animationParser = _animationParser;
	            this._compiledTemplateCache = new Map();
	            this._compiledHostTemplateCache = new Map();
	            this._compiledDirectiveWrapperCache = new Map();
	            this._compiledNgModuleCache = new Map();
	            this._animationCompiler = new AnimationCompiler();
	        }
	        Object.defineProperty(JitCompiler.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleSync = function (moduleType) {
	            return this._compileModuleAndComponents(moduleType, true).syncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAsync = function (moduleType) {
	            return this._compileModuleAndComponents(moduleType, false).asyncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        JitCompiler.prototype.getNgContentSelectors = function (component) {
	            var /** @type {?} */ template = this._compiledTemplateCache.get(component);
	            if (!template) {
	                throw new Error("The component " + stringify(component) + " is not yet compiled!");
	            }
	            return template.compMeta.template.ngContentSelectors;
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	            var /** @type {?} */ createResult = function () {
	                _this._compileComponents(moduleType, null);
	                return _this._compileModule(moduleType);
	            };
	            if (isSync) {
	                return new SyncAsyncResult(createResult());
	            }
	            else {
	                return new SyncAsyncResult(null, loadingPromise.then(createResult));
	            }
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromise = this._loadModules(moduleType, isSync);
	            var /** @type {?} */ createResult = function () {
	                var /** @type {?} */ componentFactories = [];
	                _this._compileComponents(moduleType, componentFactories);
	                return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	            };
	            if (isSync) {
	                return new SyncAsyncResult(createResult());
	            }
	            else {
	                return new SyncAsyncResult(null, loadingPromise.then(createResult));
	            }
	        };
	        /**
	         * @param {?} mainModule
	         * @param {?} isSync
	         * @return {?}
	         */
	        JitCompiler.prototype._loadModules = function (mainModule, isSync) {
	            var _this = this;
	            var /** @type {?} */ loadingPromises = [];
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	            // Note: the loadingPromise for a module only includes the loading of the exported directives
	            // of imported modules.
	            // However, for runtime compilation, we want to transitively compile all modules,
	            // so we also need to call loadNgModuleMetadata for all nested modules.
	            ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	                loadingPromises.push(_this._metadataResolver.loadNgModuleDirectiveAndPipeMetadata(localModuleMeta.reference, isSync));
	            });
	            return Promise.all(loadingPromises);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        JitCompiler.prototype._compileModule = function (moduleType) {
	            var _this = this;
	            var /** @type {?} */ ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	            if (!ngModuleFactory) {
	                var /** @type {?} */ moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	                // Always provide a bound Compiler
	                var /** @type {?} */ extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	                var /** @type {?} */ compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	                compileResult.dependencies.forEach(function (dep) {
	                    dep.placeholder.reference =
	                        _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
	                });
	                if (!this._compilerConfig.useJit) {
	                    ngModuleFactory =
	                        interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
	                }
	                else {
	                    ngModuleFactory = jitStatements("/" + identifierName(moduleMeta_1.type) + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
	                }
	                this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	            }
	            return ngModuleFactory;
	        };
	        /**
	         * \@internal
	         * @param {?} mainModule
	         * @param {?} allComponentFactories
	         * @return {?}
	         */
	        JitCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	            var _this = this;
	            var /** @type {?} */ ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	            var /** @type {?} */ moduleByDirective = new Map();
	            var /** @type {?} */ templates = new Set();
	            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	                var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                    moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                    var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                    _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
	                    if (dirMeta.isComponent) {
	                        templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                        if (allComponentFactories) {
	                            var /** @type {?} */ template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                            templates.add(template);
	                            allComponentFactories.push(template.proxyComponentFactory);
	                        }
	                    }
	                });
	            });
	            ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	                var /** @type {?} */ localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.reference);
	                localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                    var /** @type {?} */ dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                    if (dirMeta.isComponent) {
	                        dirMeta.entryComponents.forEach(function (entryComponentType) {
	                            var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                            templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                        });
	                    }
	                });
	                localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                    var /** @type {?} */ moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                    templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                });
	            });
	            templates.forEach(function (template) { return _this._compileTemplate(template); });
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        JitCompiler.prototype.clearCacheFor = function (type) {
	            this._compiledNgModuleCache.delete(type);
	            this._metadataResolver.clearCacheFor(type);
	            this._compiledHostTemplateCache.delete(type);
	            var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(type);
	            if (compiledTemplate) {
	                this._compiledTemplateCache.delete(type);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        JitCompiler.prototype.clearCache = function () {
	            this._metadataResolver.clearCache();
	            this._compiledTemplateCache.clear();
	            this._compiledHostTemplateCache.clear();
	            this._compiledNgModuleCache.clear();
	        };
	        /**
	         * @param {?} compType
	         * @param {?} ngModule
	         * @return {?}
	         */
	        JitCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	            if (!ngModule) {
	                throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	            }
	            var /** @type {?} */ compiledTemplate = this._compiledHostTemplateCache.get(compType);
	            if (!compiledTemplate) {
	                var /** @type {?} */ compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	                assertComponent(compMeta);
	                var /** @type {?} */ HostClass = function HostClass() { };
	                ((HostClass)).overriddenName = identifierName(compMeta.type) + "_Host";
	                var /** @type {?} */ hostMeta = createHostComponentMeta(HostClass, compMeta);
	                compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	                this._compiledHostTemplateCache.set(compType, compiledTemplate);
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @return {?}
	         */
	        JitCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	            var /** @type {?} */ compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	            if (!compiledTemplate) {
	                assertComponent(compMeta);
	                compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	                this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} compType
	         * @param {?} isHost
	         * @return {?}
	         */
	        JitCompiler.prototype._assertComponentKnown = function (compType, isHost) {
	            var /** @type {?} */ compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :
	                this._compiledTemplateCache.get(compType);
	            if (!compiledTemplate) {
	                throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
	            }
	            return compiledTemplate;
	        };
	        /**
	         * @param {?} dirType
	         * @return {?}
	         */
	        JitCompiler.prototype._assertDirectiveWrapper = function (dirType) {
	            var /** @type {?} */ dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
	            if (!dirWrapper) {
	                throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
	            }
	            return dirWrapper;
	        };
	        /**
	         * @param {?} dirMeta
	         * @param {?} moduleMeta
	         * @return {?}
	         */
	        JitCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {
	            var /** @type {?} */ compileResult = this._directiveWrapperCompiler.compile(dirMeta);
	            var /** @type {?} */ statements = compileResult.statements;
	            var /** @type {?} */ directiveWrapperClass;
	            if (!this._compilerConfig.useJit) {
	                directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
	            }
	            else {
	                directiveWrapperClass = jitStatements("/" + identifierName(moduleMeta.type) + "/" + identifierName(dirMeta.type) + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
	            }
	            this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
	        };
	        /**
	         * @param {?} template
	         * @return {?}
	         */
	        JitCompiler.prototype._compileTemplate = function (template) {
	            var _this = this;
	            if (template.isCompiled) {
	                return;
	            }
	            var /** @type {?} */ compMeta = template.compMeta;
	            var /** @type {?} */ externalStylesheetsByModuleUrl = new Map();
	            var /** @type {?} */ stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	            stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	            this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	            var /** @type {?} */ parsedAnimations = this._animationParser.parseComponent(compMeta);
	            var /** @type {?} */ directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	            var /** @type {?} */ pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	            var /** @type {?} */ parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, identifierName(compMeta.type));
	            var /** @type {?} */ compiledAnimations = this._animationCompiler.compile(identifierName(compMeta.type), parsedAnimations);
	            var /** @type {?} */ compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
	            compileResult.dependencies.forEach(function (dep) {
	                var /** @type {?} */ depTemplate;
	                if (dep instanceof ViewClassDependency) {
	                    var /** @type {?} */ vfd = (dep);
	                    depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
	                    vfd.placeholder.reference = depTemplate.proxyViewClass;
	                }
	                else if (dep instanceof ComponentFactoryDependency$1) {
	                    var /** @type {?} */ cfd = (dep);
	                    depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
	                    cfd.placeholder.reference = depTemplate.proxyComponentFactory;
	                }
	                else if (dep instanceof DirectiveWrapperDependency) {
	                    var /** @type {?} */ dwd = (dep);
	                    dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
	                }
	            });
	            var /** @type {?} */ statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) { return ca.statements; }))
	                .concat(compileResult.statements);
	            var /** @type {?} */ viewClass;
	            if (!this._compilerConfig.useJit) {
	                viewClass = interpretStatements(statements, compileResult.viewClassVar);
	            }
	            else {
	                viewClass = jitStatements("/" + identifierName(template.ngModule.type) + "/" + identifierName(template.compType) + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
	            }
	            template.compiled(viewClass);
	            var _a;
	        };
	        /**
	         * @param {?} result
	         * @param {?} externalStylesheetsByModuleUrl
	         * @return {?}
	         */
	        JitCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	            var _this = this;
	            result.dependencies.forEach(function (dep, i) {
	                var /** @type {?} */ nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	                var /** @type {?} */ nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	                dep.valuePlaceholder.reference = nestedStylesArr;
	            });
	        };
	        /**
	         * @param {?} result
	         * @param {?} externalStylesheetsByModuleUrl
	         * @return {?}
	         */
	        JitCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	            this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	            if (!this._compilerConfig.useJit) {
	                return interpretStatements(result.statements, result.stylesVar);
	            }
	            else {
	                return jitStatements("/" + result.meta.moduleUrl + ".ngstyle.js", result.statements, result.stylesVar);
	            }
	        };
	        JitCompiler = __decorate$17([
	            CompilerInjectable(), 
	            __metadata$17('design:paramtypes', [_angular_core.Injector, CompileMetadataResolver, TemplateParser, StyleCompiler, ViewCompiler, NgModuleCompiler, DirectiveWrapperCompiler, CompilerConfig, AnimationParser])
	        ], JitCompiler);
	        return JitCompiler;
	    }());
	    var CompiledTemplate = (function () {
	        /**
	         * @param {?} isHost
	         * @param {?} selector
	         * @param {?} compType
	         * @param {?} compMeta
	         * @param {?} ngModule
	         * @param {?} directives
	         */
	        function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
	            this.isHost = isHost;
	            this.compType = compType;
	            this.compMeta = compMeta;
	            this.ngModule = ngModule;
	            this.directives = directives;
	            this._viewClass = null;
	            this.isCompiled = false;
	            var self = this;
	            this.proxyViewClass = function () {
	                if (!self._viewClass) {
	                    throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
	                }
	                return self._viewClass.apply(this, arguments);
	            };
	            this.proxyComponentFactory = isHost ?
	                new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) :
	                null;
	        }
	        /**
	         * @param {?} viewClass
	         * @return {?}
	         */
	        CompiledTemplate.prototype.compiled = function (viewClass) {
	            this._viewClass = viewClass;
	            this.proxyViewClass.prototype = viewClass.prototype;
	            this.isCompiled = true;
	        };
	        return CompiledTemplate;
	    }());
	    /**
	     * @param {?} meta
	     * @return {?}
	     */
	    function assertComponent(meta) {
	        if (!meta.isComponent) {
	            throw new Error("Could not compile '" + identifierName(meta.type) + "' because it is not a component.");
	        }
	    }
	    /**
	     * Implements `Compiler` by delegating to the JitCompiler using a known module.
	     */
	    var ModuleBoundCompiler = (function () {
	        /**
	         * @param {?} _delegate
	         * @param {?} _ngModule
	         */
	        function ModuleBoundCompiler(_delegate, _ngModule) {
	            this._delegate = _delegate;
	            this._ngModule = _ngModule;
	        }
	        Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._delegate.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	            return this._delegate.compileModuleSync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	            return this._delegate.compileModuleAsync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	        };
	        /**
	         * @param {?} moduleType
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	        };
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.getNgContentSelectors = function (component) {
	            return this._delegate.getNgContentSelectors(component);
	        };
	        /**
	         * Clears all caches
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	        /**
	         * Clears the cache for the given component/ngModule.
	         * @param {?} type
	         * @return {?}
	         */
	        ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	        return ModuleBoundCompiler;
	    }());

	    /**
	     * A container for message extracted from the templates.
	     */
	    var MessageBundle = (function () {
	        /**
	         * @param {?} _htmlParser
	         * @param {?} _implicitTags
	         * @param {?} _implicitAttrs
	         */
	        function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
	            this._htmlParser = _htmlParser;
	            this._implicitTags = _implicitTags;
	            this._implicitAttrs = _implicitAttrs;
	            this._messages = [];
	        }
	        /**
	         * @param {?} html
	         * @param {?} url
	         * @param {?} interpolationConfig
	         * @return {?}
	         */
	        MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	            var /** @type {?} */ htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	            if (htmlParserResult.errors.length) {
	                return htmlParserResult.errors;
	            }
	            var /** @type {?} */ i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	            if (i18nParserResult.errors.length) {
	                return i18nParserResult.errors;
	            }
	            (_a = this._messages).push.apply(_a, i18nParserResult.messages);
	            var _a;
	        };
	        /**
	         * @return {?}
	         */
	        MessageBundle.prototype.getMessages = function () { return this._messages; };
	        /**
	         * @param {?} serializer
	         * @return {?}
	         */
	        MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messages); };
	        return MessageBundle;
	    }());

	    var Extractor = (function () {
	        /**
	         * @param {?} host
	         * @param {?} staticSymbolResolver
	         * @param {?} messageBundle
	         * @param {?} metadataResolver
	         */
	        function Extractor(host, staticSymbolResolver, messageBundle, metadataResolver) {
	            this.host = host;
	            this.staticSymbolResolver = staticSymbolResolver;
	            this.messageBundle = messageBundle;
	            this.metadataResolver = metadataResolver;
	        }
	        /**
	         * @param {?} rootFiles
	         * @return {?}
	         */
	        Extractor.prototype.extract = function (rootFiles) {
	            var _this = this;
	            var /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);
	            var _a = analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver), files = _a.files, ngModules = _a.ngModules;
	            return Promise
	                .all(ngModules.map(function (ngModule) { return _this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false); }))
	                .then(function () {
	                var /** @type {?} */ errors = [];
	                files.forEach(function (file) {
	                    var /** @type {?} */ compMetas = [];
	                    file.directives.forEach(function (directiveType) {
	                        var /** @type {?} */ dirMeta = _this.metadataResolver.getDirectiveMetadata(directiveType);
	                        if (dirMeta && dirMeta.isComponent) {
	                            compMetas.push(dirMeta);
	                        }
	                    });
	                    compMetas.forEach(function (compMeta) {
	                        var /** @type {?} */ html = compMeta.template.template;
	                        var /** @type {?} */ interpolationConfig = InterpolationConfig.fromArray(compMeta.template.interpolation);
	                        errors.push.apply(errors, _this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));
	                    });
	                });
	                if (errors.length) {
	                    throw new Error(errors.map(function (e) { return e.toString(); }).join('\n'));
	                }
	                return _this.messageBundle;
	            });
	        };
	        /**
	         * @param {?} host
	         * @return {?}
	         */
	        Extractor.create = function (host) {
	            var /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());
	            var /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();
	            var /** @type {?} */ symbolCache = new StaticSymbolCache();
	            var /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);
	            var /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);
	            var /** @type {?} */ staticReflector = new StaticReflector(staticSymbolResolver);
	            StaticAndDynamicReflectionCapabilities.install(staticReflector);
	            var /** @type {?} */ config = new CompilerConfig({
	                genDebugInfo: false,
	                defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated,
	                logBindingUpdate: false,
	                useJit: false
	            });
	            var /** @type {?} */ normalizer = new DirectiveNormalizer({ get: function (url) { return host.loadResource(url); } }, urlResolver, htmlParser, config);
	            var /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();
	            var /** @type {?} */ resolver = new CompileMetadataResolver(new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector), new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer, staticReflector);
	            // TODO(vicb): implicit tags & attributes
	            var /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {});
	            var /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);
	            return { extractor: extractor, staticReflector: staticReflector };
	        };
	        return Extractor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __decorate$18 = (this && this.__decorate) || function (decorators, target, key, desc) {
	        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	        return c > 3 && r && Object.defineProperty(target, key, r), r;
	    };
	    var __metadata$18 = (this && this.__metadata) || function (k, v) {
	        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	    };
	    var /** @type {?} */ _NO_RESOURCE_LOADER = {
	        /**
	         * @param {?} url
	         * @return {?}
	         */
	        get: function (url) {
	            throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	        }
	    };
	    /**
	     * A set of providers that provide `JitCompiler` and its dependencies to use for
	     * template compilation.
	     */
	    var /** @type {?} */ COMPILER_PROVIDERS = [
	        { provide: Reflector, useValue: reflector },
	        { provide: ReflectorReader, useExisting: Reflector },
	        { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	        SummaryResolver,
	        Console,
	        Lexer,
	        Parser,
	        HtmlParser,
	        {
	            provide: I18NHtmlParser,
	            useFactory: function (parser, translations, format) {
	                return new I18NHtmlParser(parser, translations, format);
	            },
	            deps: [
	                HtmlParser,
	                [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	                [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	            ]
	        },
	        TemplateParser,
	        DirectiveNormalizer,
	        CompileMetadataResolver,
	        DEFAULT_PACKAGE_URL_PROVIDER,
	        StyleCompiler,
	        ViewCompiler,
	        NgModuleCompiler,
	        DirectiveWrapperCompiler,
	        { provide: CompilerConfig, useValue: new CompilerConfig() },
	        JitCompiler,
	        { provide: _angular_core.Compiler, useExisting: JitCompiler },
	        DomElementSchemaRegistry,
	        { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	        UrlResolver,
	        DirectiveResolver,
	        PipeResolver,
	        NgModuleResolver,
	        AnimationParser
	    ];
	    var JitCompilerFactory = (function () {
	        /**
	         * @param {?} defaultOptions
	         */
	        function JitCompilerFactory(defaultOptions) {
	            this._defaultOptions = [{
	                    useDebug: _angular_core.isDevMode(),
	                    useJit: true,
	                    defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
	                }].concat(defaultOptions);
	        }
	        /**
	         * @param {?=} options
	         * @return {?}
	         */
	        JitCompilerFactory.prototype.createCompiler = function (options) {
	            if (options === void 0) { options = []; }
	            var /** @type {?} */ mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
	            var /** @type {?} */ injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	                COMPILER_PROVIDERS, {
	                    provide: CompilerConfig,
	                    useFactory: function () {
	                        return new CompilerConfig({
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers. E.g. important for the testing platform.
	                            genDebugInfo: mergedOptions.useDebug,
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers
	                            useJit: mergedOptions.useJit,
	                            // let explicit values from the compiler options overwrite options
	                            // from the app providers
	                            defaultEncapsulation: mergedOptions.defaultEncapsulation,
	                            logBindingUpdate: mergedOptions.useDebug
	                        });
	                    },
	                    deps: []
	                },
	                mergedOptions.providers
	            ]);
	            return injector.get(_angular_core.Compiler);
	        };
	        /** @nocollapse */
	        JitCompilerFactory.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	        ]; };
	        JitCompilerFactory = __decorate$18([
	            CompilerInjectable(), 
	            __metadata$18('design:paramtypes', [Array])
	        ], JitCompilerFactory);
	        return JitCompilerFactory;
	    }());
	    /**
	     * @return {?}
	     */
	    function _initReflector() {
	        reflector.reflectionCapabilities = new ReflectionCapabilities();
	    }
	    /**
	     * A platform that included corePlatform and the compiler.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	        { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	        { provide: _angular_core.CompilerFactory, useClass: JitCompilerFactory },
	        { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	    ]);
	    /**
	     * @param {?} optionsArr
	     * @return {?}
	     */
	    function _mergeOptions(optionsArr) {
	        return {
	            useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
	            useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	            defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	            providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
	        };
	    }
	    /**
	     * @param {?} args
	     * @return {?}
	     */
	    function _lastDefined(args) {
	        for (var /** @type {?} */ i = args.length - 1; i >= 0; i--) {
	            if (args[i] !== undefined) {
	                return args[i];
	            }
	        }
	        return undefined;
	    }
	    /**
	     * @param {?} parts
	     * @return {?}
	     */
	    function _mergeArrays(parts) {
	        var /** @type {?} */ result = [];
	        parts.forEach(function (part) { return part && result.push.apply(result, part); });
	        return result;
	    }

	    /**
	     * Interface that defines how import statements should be generated.
	     * @abstract
	     */
	    var ImportResolver = (function () {
	        function ImportResolver() {
	        }
	        /**
	         * Converts a file path to a module name that can be used as an `import.
	         * I.e. `path/to/importedFile.ts` should be imported by `path/to/containingFile.ts`.
	         * @abstract
	         * @param {?} importedFilePath
	         * @param {?} containingFilePath
	         * @return {?}
	         */
	        ImportResolver.prototype.fileNameToModuleName = function (importedFilePath, containingFilePath) { };
	        return ImportResolver;
	    }());

	    exports.VERSION = VERSION;
	    exports.TextAst = TextAst;
	    exports.BoundTextAst = BoundTextAst;
	    exports.AttrAst = AttrAst;
	    exports.BoundElementPropertyAst = BoundElementPropertyAst;
	    exports.BoundEventAst = BoundEventAst;
	    exports.ReferenceAst = ReferenceAst;
	    exports.VariableAst = VariableAst;
	    exports.ElementAst = ElementAst;
	    exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	    exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	    exports.DirectiveAst = DirectiveAst;
	    exports.ProviderAst = ProviderAst;
	    exports.ProviderAstType = ProviderAstType;
	    exports.NgContentAst = NgContentAst;
	    exports.PropertyBindingType = PropertyBindingType;
	    exports.templateVisitAll = templateVisitAll;
	    exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	    exports.CompilerConfig = CompilerConfig;
	    exports.RenderTypes = RenderTypes;
	    exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	    exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	    exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	    exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	    exports.CompileAnimationMetadata = CompileAnimationMetadata;
	    exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	    exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	    exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	    exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	    exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	    exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	    exports.identifierName = identifierName;
	    exports.identifierModuleUrl = identifierModuleUrl;
	    exports.CompileSummaryKind = CompileSummaryKind;
	    exports.tokenName = tokenName;
	    exports.tokenReference = tokenReference;
	    exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	    exports.CompileTemplateMetadata = CompileTemplateMetadata;
	    exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	    exports.createHostComponentMeta = createHostComponentMeta;
	    exports.CompilePipeMetadata = CompilePipeMetadata;
	    exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	    exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	    exports.ProviderMeta = ProviderMeta;
	    exports.createAotCompiler = createAotCompiler;
	    exports.AotCompiler = AotCompiler;
	    exports.analyzeNgModules = analyzeNgModules;
	    exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	    exports.extractProgramSymbols = extractProgramSymbols;
	    exports.StaticReflector = StaticReflector;
	    exports.StaticAndDynamicReflectionCapabilities = StaticAndDynamicReflectionCapabilities;
	    exports.StaticSymbol = StaticSymbol;
	    exports.StaticSymbolCache = StaticSymbolCache;
	    exports.ResolvedStaticSymbol = ResolvedStaticSymbol;
	    exports.StaticSymbolResolver = StaticSymbolResolver;
	    exports.AotSummaryResolver = AotSummaryResolver;
	    exports.SummaryResolver = SummaryResolver;
	    exports.JitCompiler = JitCompiler;
	    exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	    exports.JitCompilerFactory = JitCompilerFactory;
	    exports.platformCoreDynamic = platformCoreDynamic;
	    exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	    exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	    exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	    exports.UrlResolver = UrlResolver;
	    exports.getUrlScheme = getUrlScheme;
	    exports.ResourceLoader = ResourceLoader;
	    exports.DirectiveResolver = DirectiveResolver;
	    exports.PipeResolver = PipeResolver;
	    exports.NgModuleResolver = NgModuleResolver;
	    exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	    exports.InterpolationConfig = InterpolationConfig;
	    exports.ElementSchemaRegistry = ElementSchemaRegistry;
	    exports.Extractor = Extractor;
	    exports.I18NHtmlParser = I18NHtmlParser;
	    exports.MessageBundle = MessageBundle;
	    exports.Serializer = Serializer;
	    exports.Xliff = Xliff;
	    exports.Xmb = Xmb;
	    exports.Xtb = Xtb;
	    exports.DirectiveNormalizer = DirectiveNormalizer;
	    exports.TokenType = TokenType;
	    exports.Lexer = Lexer;
	    exports.Token = Token;
	    exports.EOF = EOF;
	    exports.isIdentifier = isIdentifier;
	    exports.isQuote = isQuote;
	    exports.SplitInterpolation = SplitInterpolation;
	    exports.TemplateBindingParseResult = TemplateBindingParseResult;
	    exports.Parser = Parser;
	    exports._ParseAST = _ParseAST;
	    exports.ERROR_COLLECTOR_TOKEN = ERROR_COLLECTOR_TOKEN;
	    exports.CompileMetadataResolver = CompileMetadataResolver;
	    exports.componentModuleUrl = componentModuleUrl;
	    exports.ParseTreeResult = ParseTreeResult;
	    exports.TreeError = TreeError;
	    exports.HtmlParser = HtmlParser;
	    exports.NgModuleCompiler = NgModuleCompiler;
	    exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
	    exports.ImportResolver = ImportResolver;
	    exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	    exports.TypeScriptEmitter = TypeScriptEmitter;
	    exports.ParseLocation = ParseLocation;
	    exports.ParseSourceFile = ParseSourceFile;
	    exports.ParseSourceSpan = ParseSourceSpan;
	    exports.ParseErrorLevel = ParseErrorLevel;
	    exports.ParseError = ParseError;
	    exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	    exports.CssSelector = CssSelector;
	    exports.SelectorMatcher = SelectorMatcher;
	    exports.SelectorListContext = SelectorListContext;
	    exports.SelectorContext = SelectorContext;
	    exports.StylesCompileDependency = StylesCompileDependency;
	    exports.StylesCompileResult = StylesCompileResult;
	    exports.CompiledStylesheet = CompiledStylesheet;
	    exports.StyleCompiler = StyleCompiler;
	    exports.TemplateParseError = TemplateParseError;
	    exports.TemplateParseResult = TemplateParseResult;
	    exports.TemplateParser = TemplateParser;
	    exports.splitClasses = splitClasses;
	    exports.createElementCssSelector = createElementCssSelector;
	    exports.removeSummaryDuplicates = removeSummaryDuplicates;
	    exports.ViewCompiler = ViewCompiler;
	    exports.AnimationParser = AnimationParser;
	    exports.SyntaxError = SyntaxError;

	}));

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.5
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(87), __webpack_require__(88)) :
	    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx));
	}(this, function (exports,rxjs_Subject,rxjs_Observable) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function scheduleMicroTask(fn) {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ global$1 = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function print(obj) {
	        // tslint:disable-next-line:no-console
	        console.log(obj);
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function warn(obj) {
	        console.warn(obj);
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }

	    var /** @type {?} */ _nextClassId = 0;
	    var /** @type {?} */ Reflect = global$1.Reflect;
	    /**
	     * @param {?} annotation
	     * @return {?}
	     */
	    function extractAnnotation(annotation) {
	        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	            // it is a decorator, extract annotation
	            annotation = annotation.annotation;
	        }
	        return annotation;
	    }
	    /**
	     * @param {?} fnOrArray
	     * @param {?} key
	     * @return {?}
	     */
	    function applyParams(fnOrArray, key) {
	        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	            fnOrArray === Number || fnOrArray === Array) {
	            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	        }
	        if (typeof fnOrArray === 'function') {
	            return fnOrArray;
	        }
	        if (Array.isArray(fnOrArray)) {
	            var /** @type {?} */ annotations = fnOrArray;
	            var /** @type {?} */ annoLength = annotations.length - 1;
	            var /** @type {?} */ fn = fnOrArray[annoLength];
	            if (typeof fn !== 'function') {
	                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	            }
	            if (annoLength != fn.length) {
	                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	            }
	            var /** @type {?} */ paramsAnnotations = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = annotations.length - 1; i < ii; i++) {
	                var /** @type {?} */ paramAnnotations = [];
	                paramsAnnotations.push(paramAnnotations);
	                var /** @type {?} */ annotation = annotations[i];
	                if (Array.isArray(annotation)) {
	                    for (var /** @type {?} */ j = 0; j < annotation.length; j++) {
	                        paramAnnotations.push(extractAnnotation(annotation[j]));
	                    }
	                }
	                else if (typeof annotation === 'function') {
	                    paramAnnotations.push(extractAnnotation(annotation));
	                }
	                else {
	                    paramAnnotations.push(annotation);
	                }
	            }
	            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	            return fn;
	        }
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	    }
	    /**
	     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	     *
	     * ## Basic Example
	     *
	     * ```
	     * var Greeter = ng.Class({
	     *   constructor: function(name) {
	     *     this.name = name;
	     *   },
	     *
	     *   greet: function() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class Greeter {
	     *   constructor(name) {
	     *     this.name = name;
	     *   }
	     *
	     *   greet() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * }
	     * ```
	     *
	     * or equivalent to ES5:
	     *
	     * ```
	     * var Greeter = function (name) {
	     *   this.name = name;
	     * }
	     *
	     * Greeter.prototype.greet = function () {
	     *   alert('Hello ' + this.name + '!');
	     * }
	     * ```
	     *
	     * ### Example with parameter annotations
	     *
	     * ```
	     * var MyService = ng.Class({
	     *   constructor: [String, [new Optional(), Service], function(name, myService) {
	     *     ...
	     *   }]
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class MyService {
	     *   constructor(name: string, \@Optional() myService: Service) {
	     *     ...
	     *   }
	     * }
	     * ```
	     *
	     * ### Example with inheritance
	     *
	     * ```
	     * var Shape = ng.Class({
	     *   constructor: (color) {
	     *     this.color = color;
	     *   }
	     * });
	     *
	     * var Square = ng.Class({
	     *   extends: Shape,
	     *   constructor: function(color, size) {
	     *     Shape.call(this, color);
	     *     this.size = size;
	     *   }
	     * });
	     * ```
	     * \@stable
	     * @param {?} clsDef
	     * @return {?}
	     */
	    function Class(clsDef) {
	        var /** @type {?} */ constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	        var /** @type {?} */ proto = constructor.prototype;
	        if (clsDef.hasOwnProperty('extends')) {
	            if (typeof clsDef.extends === 'function') {
	                ((constructor)).prototype = proto =
	                    Object.create(((clsDef.extends)).prototype);
	            }
	            else {
	                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	            }
	        }
	        for (var key in clsDef) {
	            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	                proto[key] = applyParams(clsDef[key], key);
	            }
	        }
	        if (this && this.annotations instanceof Array) {
	            Reflect.defineMetadata('annotations', this.annotations, constructor);
	        }
	        var /** @type {?} */ constructorName = constructor['name'];
	        if (!constructorName || constructorName === 'constructor') {
	            ((constructor))['overriddenName'] = "class" + _nextClassId++;
	        }
	        return (constructor);
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @param {?=} chainFn
	     * @return {?}
	     */
	    function makeDecorator(name, props, parentClass, chainFn) {
	        if (chainFn === void 0) { chainFn = null; }
	        var /** @type {?} */ metaCtor = makeMetadataCtor([props]);
	        /**
	         * @param {?} objOrType
	         * @return {?}
	         */
	        function DecoratorFactory(objOrType) {
	            if (!(Reflect && Reflect.getOwnMetadata)) {
	                throw 'reflect-metadata shim is required when using class decorators';
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call(this, objOrType);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((DecoratorFactory))(objOrType);
	            var /** @type {?} */ chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var /** @type {?} */ TypeDecorator = (function TypeDecorator(cls) {
	                var /** @type {?} */ annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            });
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((DecoratorFactory)).annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    }
	    /**
	     * @param {?} props
	     * @return {?}
	     */
	    function makeMetadataCtor(props) {
	        return function ctor() {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            props.forEach(function (prop, i) {
	                var /** @type {?} */ argVal = args[i];
	                if (Array.isArray(prop)) {
	                    // plain parameter
	                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	                }
	                else {
	                    for (var propName in prop) {
	                        _this[propName] =
	                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                    }
	                }
	            });
	        };
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makeParamDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function ParamDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ annotationInstance = new ((_a = ((ParamDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            ((ParamDecorator)).annotation = annotationInstance;
	            return ParamDecorator;
	            /**
	             * @param {?} cls
	             * @param {?} unusedKey
	             * @param {?} index
	             * @return {?}
	             */
	            function ParamDecorator(cls, unusedKey, index) {
	                var /** @type {?} */ parameters = Reflect.getOwnMetadata('parameters', cls) || [];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                parameters[index] = parameters[index] || [];
	                parameters[index].push(annotationInstance);
	                Reflect.defineMetadata('parameters', parameters, cls);
	                return cls;
	            }
	            var _a;
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    }
	    /**
	     * @param {?} name
	     * @param {?} props
	     * @param {?=} parentClass
	     * @return {?}
	     */
	    function makePropDecorator(name, props, parentClass) {
	        var /** @type {?} */ metaCtor = makeMetadataCtor(props);
	        /**
	         * @param {...?} args
	         * @return {?}
	         */
	        function PropDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var /** @type {?} */ decoratorInstance = new ((_a = ((PropDecoratorFactory))).bind.apply(_a, [void 0].concat(args)))();
	            return function PropDecorator(target, name) {
	                var /** @type {?} */ meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	            var _a;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    }

	    /**
	     * Inject decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Inject = makeParamDecorator('Inject', [['token', undefined]]);
	    /**
	     * Optional decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Optional = makeParamDecorator('Optional', []);
	    /**
	     * Injectable decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Injectable = (makeDecorator('Injectable', []));
	    /**
	     * Self decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Self = makeParamDecorator('Self', []);
	    /**
	     * SkipSelf decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ SkipSelf = makeParamDecorator('SkipSelf', []);
	    /**
	     * Host decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Host = makeParamDecorator('Host', []);

	    var OpaqueToken = (function () {
	        /**
	         * @param {?} _desc
	         */
	        function OpaqueToken(_desc) {
	            this._desc = _desc;
	        }
	        /**
	         * @return {?}
	         */
	        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	        OpaqueToken.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        OpaqueToken.ctorParameters = function () { return [
	            null,
	        ]; };
	        return OpaqueToken;
	    }());

	    /**
	     * This token can be used to create a virtual provider that will populate the
	     * `entryComponents` fields of components and ng modules based on its `useValue`.
	     * All components that are referenced in the `useValue` value (either directly
	     * or in a nested array or map) will be added to the `entryComponents` property.
	     *
	     * ### Example
	     * The following example shows how the router can populate the `entryComponents`
	     * field of an NgModule based on the router configuration which refers
	     * to components.
	     *
	     * ```typescript
	     * // helper function inside the router
	     * function provideRoutes(routes) {
	     *   return [
	     *     {provide: ROUTES, useValue: routes},
	     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	     *   ];
	     * }
	     *
	     * // user code
	     * let routes = [
	     *   {path: '/root', component: RootComp},
	     *   {path: '/teams', component: TeamsComp}
	     * ];
	     *
	     * @NgModule({
	     *   providers: [provideRoutes(routes)]
	     * })
	     * class ModuleWithRoutes {}
	     * ```
	     *
	     * @experimental
	     */
	    var /** @type {?} */ ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
	    /**
	     * Attribute decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	    /**
	     * Base class for query metadata.
	     *
	     * See {\@link ContentChildren}, {\@link ContentChild}, {\@link ViewChildren}, {\@link ViewChild} for
	     * more information.
	     *
	     * \@stable
	     * @abstract
	     */
	    var Query = (function () {
	        function Query() {
	        }
	        return Query;
	    }());
	    /**
	     * ContentChildren decorator and metadata.
	     *
	     *  @stable
	     *  @Annotation
	     */
	    var /** @type {?} */ ContentChildren = (makePropDecorator('ContentChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: false,
	            descendants: false,
	            read: undefined,
	        }
	    ], Query));
	    /**
	     * ContentChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ContentChild = makePropDecorator('ContentChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: false,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChildren decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChildren = makePropDecorator('ViewChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ ViewChild = makePropDecorator('ViewChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);

	    var ChangeDetectionStrategy = {};
	    ChangeDetectionStrategy.OnPush = 0;
	    ChangeDetectionStrategy.Default = 1;
	    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
	    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
	    var ChangeDetectorStatus = {};
	    ChangeDetectorStatus.CheckOnce = 0;
	    ChangeDetectorStatus.Checked = 1;
	    ChangeDetectorStatus.CheckAlways = 2;
	    ChangeDetectorStatus.Detached = 3;
	    ChangeDetectorStatus.Errored = 4;
	    ChangeDetectorStatus.Destroyed = 5;
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = "CheckOnce";
	    ChangeDetectorStatus[ChangeDetectorStatus.Checked] = "Checked";
	    ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = "CheckAlways";
	    ChangeDetectorStatus[ChangeDetectorStatus.Detached] = "Detached";
	    ChangeDetectorStatus[ChangeDetectorStatus.Errored] = "Errored";
	    ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = "Destroyed";
	    /**
	     * @param {?} changeDetectionStrategy
	     * @return {?}
	     */
	    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	        return isBlank(changeDetectionStrategy) ||
	            changeDetectionStrategy === ChangeDetectionStrategy.Default;
	    }

	    /**
	     * Directive decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Directive = (makeDecorator('Directive', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        providers: undefined,
	        exportAs: undefined,
	        queries: undefined
	    }));
	    /**
	     * Component decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Component = (makeDecorator('Component', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        exportAs: undefined,
	        moduleId: undefined,
	        providers: undefined,
	        viewProviders: undefined,
	        changeDetection: ChangeDetectionStrategy.Default,
	        queries: undefined,
	        templateUrl: undefined,
	        template: undefined,
	        styleUrls: undefined,
	        styles: undefined,
	        animations: undefined,
	        encapsulation: undefined,
	        interpolation: undefined,
	        entryComponents: undefined
	    }, Directive));
	    /**
	     * Pipe decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Pipe = (makeDecorator('Pipe', {
	        name: undefined,
	        pure: true,
	    }));
	    /**
	     * Input decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	    /**
	     * Output decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	    /**
	     * HostListener decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var LifecycleHooks = {};
	    LifecycleHooks.OnInit = 0;
	    LifecycleHooks.OnDestroy = 1;
	    LifecycleHooks.DoCheck = 2;
	    LifecycleHooks.OnChanges = 3;
	    LifecycleHooks.AfterContentInit = 4;
	    LifecycleHooks.AfterContentChecked = 5;
	    LifecycleHooks.AfterViewInit = 6;
	    LifecycleHooks.AfterViewChecked = 7;
	    LifecycleHooks[LifecycleHooks.OnInit] = "OnInit";
	    LifecycleHooks[LifecycleHooks.OnDestroy] = "OnDestroy";
	    LifecycleHooks[LifecycleHooks.DoCheck] = "DoCheck";
	    LifecycleHooks[LifecycleHooks.OnChanges] = "OnChanges";
	    LifecycleHooks[LifecycleHooks.AfterContentInit] = "AfterContentInit";
	    LifecycleHooks[LifecycleHooks.AfterContentChecked] = "AfterContentChecked";
	    LifecycleHooks[LifecycleHooks.AfterViewInit] = "AfterViewInit";
	    LifecycleHooks[LifecycleHooks.AfterViewChecked] = "AfterViewChecked";
	    var /** @type {?} */ LIFECYCLE_HOOKS_VALUES = [
	        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	        LifecycleHooks.AfterViewChecked
	    ];
	    /**
	     * \@whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
	     *
	     * \@description
	     * `ngOnChanges` is called right after the data-bound properties have been checked and before view
	     * and content children are checked if at least one of them has changed.
	     * The `changes` parameter contains the changed properties.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnChanges = (function () {
	        function OnChanges() {
	        }
	        /**
	         * @abstract
	         * @param {?} changes
	         * @return {?}
	         */
	        OnChanges.prototype.ngOnChanges = function (changes) { };
	        return OnChanges;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after data-bound properties of a directive are
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
	     *
	     * \@description
	     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
	     * first time, and before any of its children have been checked. It is invoked only once when the
	     * directive is instantiated.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnInit = (function () {
	        function OnInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnInit.prototype.ngOnInit = function () { };
	        return OnInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
	     *
	     * \@description
	     * `ngDoCheck` gets called to check the changes in the directives in addition to the default
	     * algorithm. The default change detection algorithm looks for differences by comparing
	     * bound-property values by reference across change detection runs.
	     *
	     * Note that a directive typically should not use both `DoCheck` and {\@link OnChanges} to respond to
	     * changes on the same input, as `ngOnChanges` will continue to be called when the default change
	     * detector detects changes.
	     *
	     * See {\@link KeyValueDiffers} and {\@link IterableDiffers} for implementing custom dirty checking
	     * for collections.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var DoCheck = (function () {
	        function DoCheck() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DoCheck.prototype.ngDoCheck = function () { };
	        return DoCheck;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called when a directive, pipe or service is destroyed.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
	     *
	     * \@description
	     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
	     * instance is destroyed.
	     *
	     * See {\@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var OnDestroy = (function () {
	        function OnDestroy() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        OnDestroy.prototype.ngOnDestroy = function () { };
	        return OnDestroy;
	    }());
	    /**
	     *
	     * \@whatItDoes Lifecycle hook that is called after a directive's content has been fully
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterContentInit = (function () {
	        function AfterContentInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentInit.prototype.ngAfterContentInit = function () { };
	        return AfterContentInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after every check of a directive's content.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterContentChecked = (function () {
	        function AfterContentChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterContentChecked.prototype.ngAfterContentChecked = function () { };
	        return AfterContentChecked;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after a component's view has been fully
	     * initialized.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterViewInit = (function () {
	        function AfterViewInit() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewInit.prototype.ngAfterViewInit = function () { };
	        return AfterViewInit;
	    }());
	    /**
	     * \@whatItDoes Lifecycle hook that is called after every check of a component's view.
	     * \@howToUse
	     * {\@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
	     *
	     * \@description
	     * See {\@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var AfterViewChecked = (function () {
	        function AfterViewChecked() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AfterViewChecked.prototype.ngAfterViewChecked = function () { };
	        return AfterViewChecked;
	    }());

	    /**
	     * Defines a schema that will allow:
	     * - any non-Angular elements with a `-` in their name,
	     * - any properties on elements with a `-` in their name which is the common rule for custom
	     * elements.
	     *
	     * @stable
	     */
	    var /** @type {?} */ CUSTOM_ELEMENTS_SCHEMA = {
	        name: 'custom-elements'
	    };
	    /**
	     * Defines a schema that will allow any property on any element.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ NO_ERRORS_SCHEMA = {
	        name: 'no-errors-schema'
	    };
	    /**
	     * NgModule decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var /** @type {?} */ NgModule = (makeDecorator('NgModule', {
	        providers: undefined,
	        declarations: undefined,
	        imports: undefined,
	        exports: undefined,
	        entryComponents: undefined,
	        bootstrap: undefined,
	        schemas: undefined,
	        id: undefined,
	    }));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewEncapsulation = {};
	    ViewEncapsulation.Emulated = 0;
	    ViewEncapsulation.Native = 1;
	    ViewEncapsulation.None = 2;
	    ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
	    ViewEncapsulation[ViewEncapsulation.Native] = "Native";
	    ViewEncapsulation[ViewEncapsulation.None] = "None";
	    /**
	     * Metadata properties available for configuring Views.
	     *
	     * For details on the `\@Component` annotation, see {\@link Component}.
	     *
	     * ### Example
	     *
	     * ```
	     * \@Component({
	     *   selector: 'greet',
	     *   template: 'Hello {{name}}!',
	     * })
	     * class Greet {
	     *   name: string;
	     *
	     *   constructor() {
	     *     this.name = 'World';
	     *   }
	     * }
	     * ```
	     *
	     * @deprecated Use Component instead.
	     *
	     * {\@link Component}
	     */
	    var ViewMetadata = (function () {
	        /**
	         * @param {?=} __0
	         */
	        function ViewMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	            this.templateUrl = templateUrl;
	            this.template = template;
	            this.styleUrls = styleUrls;
	            this.styles = styles;
	            this.encapsulation = encapsulation;
	            this.animations = animations;
	            this.interpolation = interpolation;
	        }
	        return ViewMetadata;
	    }());

	    /**
	     * \@whatItDoes Represents the version of Angular
	     *
	     * \@stable
	     */
	    var Version = (function () {
	        /**
	         * @param {?} full
	         */
	        function Version(full) {
	            this.full = full;
	        }
	        Object.defineProperty(Version.prototype, "major", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "minor", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.')[1]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Version.prototype, "patch", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.full.split('.').slice(2).join('.'); },
	            enumerable: true,
	            configurable: true
	        });
	        return Version;
	    }());
	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new Version('2.4.5');

	    /**
	     * Allows to refer to references which are not yet defined.
	     *
	     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	     * DI is declared,
	     * but not yet defined. It is also used when the `token` which we use when creating a query is not
	     * yet defined.
	     *
	     * ### Example
	     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	     * \@experimental
	     * @param {?} forwardRefFn
	     * @return {?}
	     */
	    function forwardRef(forwardRefFn) {
	        ((forwardRefFn)).__forward_ref__ = forwardRef;
	        ((forwardRefFn)).toString = function () { return stringify(this()); };
	        return (((forwardRefFn)));
	    }
	    /**
	     * Lazily retrieves the reference value from a forwardRef.
	     *
	     * Acts as the identity function when given a non-forward-ref value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	     *
	     * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	     *
	     * See: {\@link forwardRef}
	     * \@experimental
	     * @param {?} type
	     * @return {?}
	     */
	    function resolveForwardRef(type) {
	        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	            type.__forward_ref__ === forwardRef) {
	            return ((type))();
	        }
	        else {
	            return type;
	        }
	    }

	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Convenience to throw an Error with 'unimplemented' as the message.
	     * @return {?}
	     */
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    var /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();
	    var /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    var _NullInjector = (function () {
	        function _NullInjector() {
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        _NullInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	            if (notFoundValue === _THROW_IF_NOT_FOUND) {
	                throw new Error("No provider for " + stringify(token) + "!");
	            }
	            return notFoundValue;
	        };
	        return _NullInjector;
	    }());
	    /**
	     * \@whatItDoes Injector interface
	     * \@howToUse
	     * ```
	     * const injector: Injector = ...;
	     * injector.get(...);
	     * ```
	     *
	     * \@description
	     * For more details, see the {\@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	     *
	     * ### Example
	     *
	     * {\@example core/di/ts/injector_spec.ts region='Injector'}
	     *
	     * `Injector` returns itself when given `Injector` as a token:
	     * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
	     *
	     * \@stable
	     * @abstract
	     */
	    var Injector = (function () {
	        function Injector() {
	        }
	        /**
	         * Retrieves an instance from the injector based on the provided token.
	         * If not found:
	         * - Throws {\@link NoProviderError} if no `notFoundValue` that is not equal to
	         * Injector.THROW_IF_NOT_FOUND is given
	         * - Returns the `notFoundValue` otherwise
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };
	        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	        Injector.NULL = new _NullInjector();
	        return Injector;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function findFirstClosedCycle(keys) {
	        var /** @type {?} */ res = [];
	        for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	            if (res.indexOf(keys[i]) > -1) {
	                res.push(keys[i]);
	                return res;
	            }
	            res.push(keys[i]);
	        }
	        return res;
	    }
	    /**
	     * @param {?} keys
	     * @return {?}
	     */
	    function constructResolvingPath(keys) {
	        if (keys.length > 1) {
	            var /** @type {?} */ reversed = findFirstClosedCycle(keys.slice().reverse());
	            var /** @type {?} */ tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	            return ' (' + tokenStrs.join(' -> ') + ')';
	        }
	        return '';
	    }
	    /**
	     * Base class for all errors arising from misconfigured providers.
	     * \@stable
	     */
	    var AbstractProviderError = (function (_super) {
	        __extends$1(AbstractProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @param {?} constructResolvingMessage
	         */
	        function AbstractProviderError(injector, key, constructResolvingMessage) {
	            _super.call(this, 'DI Error');
	            this.keys = [key];
	            this.injectors = [injector];
	            this.constructResolvingMessage = constructResolvingMessage;
	            this.message = this.constructResolvingMessage(this.keys);
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        AbstractProviderError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	            this.message = this.constructResolvingMessage(this.keys);
	        };
	        return AbstractProviderError;
	    }(BaseError));
	    /**
	     * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
	     * {\@link Injector} does not have a {\@link Provider} for the given key.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b:B) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var NoProviderError = (function (_super) {
	        __extends$1(NoProviderError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function NoProviderError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                var first = stringify(keys[0].token);
	                return "No provider for " + first + "!" + constructResolvingPath(keys);
	            });
	        }
	        return NoProviderError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when dependencies form a cycle.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	     * ]);
	     *
	     * expect(() => injector.get("one")).toThrowError();
	     * ```
	     *
	     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	     * \@stable
	     */
	    var CyclicDependencyError = (function (_super) {
	        __extends$1(CyclicDependencyError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} key
	         */
	        function CyclicDependencyError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	            });
	        }
	        return CyclicDependencyError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when a constructing type returns with an Error.
	     *
	     * The `InstantiationError` class contains the original error plus the dependency graph which caused
	     * this object to be instantiated.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor() {
	     *     throw new Error('message');
	     *   }
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     * try {
	     *   injector.get(A);
	     * } catch (e) {
	     *   expect(e instanceof InstantiationError).toBe(true);
	     *   expect(e.originalException.message).toEqual("message");
	     *   expect(e.originalStack).toBeDefined();
	     * }
	     * ```
	     * \@stable
	     */
	    var InstantiationError = (function (_super) {
	        __extends$1(InstantiationError, _super);
	        /**
	         * @param {?} injector
	         * @param {?} originalException
	         * @param {?} originalStack
	         * @param {?} key
	         */
	        function InstantiationError(injector, originalException, originalStack, key) {
	            _super.call(this, 'DI Error', originalException);
	            this.keys = [key];
	            this.injectors = [injector];
	        }
	        /**
	         * @param {?} injector
	         * @param {?} key
	         * @return {?}
	         */
	        InstantiationError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	        };
	        Object.defineProperty(InstantiationError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ first = stringify(this.keys[0].token);
	                return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(InstantiationError.prototype, "causeKey", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.keys[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return InstantiationError;
	    }(WrappedError));
	    /**
	     * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
	     * creation.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var InvalidProviderError = (function (_super) {
	        __extends$1(InvalidProviderError, _super);
	        /**
	         * @param {?} provider
	         */
	        function InvalidProviderError(provider) {
	            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	        }
	        return InvalidProviderError;
	    }(BaseError));
	    /**
	     * Thrown when the class has no annotation information.
	     *
	     * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
	     * need to be injected into the constructor.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     *
	     * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
	     *
	     * ```typescript
	     * class B {}
	     *
	     * class A {
	     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	     * ```
	     * \@stable
	     */
	    var NoAnnotationError = (function (_super) {
	        __extends$1(NoAnnotationError, _super);
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         */
	        function NoAnnotationError(typeOrFunc, params) {
	            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	        }
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} params
	         * @return {?}
	         */
	        NoAnnotationError._genMessage = function (typeOrFunc, params) {
	            var /** @type {?} */ signature = [];
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ii = params.length; i < ii; i++) {
	                var /** @type {?} */ parameter = params[i];
	                if (!parameter || parameter.length == 0) {
	                    signature.push('?');
	                }
	                else {
	                    signature.push(parameter.map(stringify).join(' '));
	                }
	            }
	            return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	                signature.join(', ') + '). ' +
	                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	                stringify(typeOrFunc) + '\' is decorated with Injectable.';
	        };
	        return NoAnnotationError;
	    }(BaseError));
	    /**
	     * Thrown when getting an object by index.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	     *
	     * ```typescript
	     * class A {}
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     *
	     * expect(() => injector.getAt(100)).toThrowError();
	     * ```
	     * \@stable
	     */
	    var OutOfBoundsError = (function (_super) {
	        __extends$1(OutOfBoundsError, _super);
	        /**
	         * @param {?} index
	         */
	        function OutOfBoundsError(index) {
	            _super.call(this, "Index " + index + " is out-of-bounds.");
	        }
	        return OutOfBoundsError;
	    }(BaseError));
	    /**
	     * Thrown when a multi provider and a regular provider are bound to the same token.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate([
	     *   { provide: "Strings", useValue: "string1", multi: true},
	     *   { provide: "Strings", useValue: "string2", multi: false}
	     * ])).toThrowError();
	     * ```
	     */
	    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	        __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
	        /**
	         * @param {?} provider1
	         * @param {?} provider2
	         */
	        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
	                provider2.toString());
	        }
	        return MixingMultiProvidersWithRegularProvidersError;
	    }(BaseError));

	    /**
	     * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
	     *
	     * Keys have:
	     * - a system-wide unique `id`.
	     * - a `token`.
	     *
	     * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
	     * the
	     * injector to store created objects in a more efficient way.
	     *
	     * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
	     * resolving
	     * providers.
	     * \@experimental
	     */
	    var ReflectiveKey = (function () {
	        /**
	         * Private
	         * @param {?} token
	         * @param {?} id
	         */
	        function ReflectiveKey(token, id) {
	            this.token = token;
	            this.id = id;
	            if (!token) {
	                throw new Error('Token must be defined!');
	            }
	        }
	        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	            /**
	             * Returns a stringified token.
	             * @return {?}
	             */
	            get: function () { return stringify(this.token); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Retrieves a `Key` for a token.
	         * @param {?} token
	         * @return {?}
	         */
	        ReflectiveKey.get = function (token) {
	            return _globalKeyRegistry.get(resolveForwardRef(token));
	        };
	        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	            /**
	             * @return {?} the number of keys registered in the system.
	             */
	            get: function () { return _globalKeyRegistry.numberOfKeys; },
	            enumerable: true,
	            configurable: true
	        });
	        return ReflectiveKey;
	    }());
	    /**
	     * \@internal
	     */
	    var KeyRegistry = (function () {
	        function KeyRegistry() {
	            this._allKeys = new Map();
	        }
	        /**
	         * @param {?} token
	         * @return {?}
	         */
	        KeyRegistry.prototype.get = function (token) {
	            if (token instanceof ReflectiveKey)
	                return token;
	            if (this._allKeys.has(token)) {
	                return this._allKeys.get(token);
	            }
	            var /** @type {?} */ newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	            this._allKeys.set(token, newKey);
	            return newKey;
	        };
	        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._allKeys.size; },
	            enumerable: true,
	            configurable: true
	        });
	        return KeyRegistry;
	    }());
	    var /** @type {?} */ _globalKeyRegistry = new KeyRegistry();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Represents a type that a Component or other object is instances of.
	     *
	     * @description
	     *
	     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	     * the `MyCustomComponent` constructor function.
	     *
	     * @stable
	     */
	    var /** @type {?} */ Type = Function;
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function isType(v) {
	        return typeof v === 'function';
	    }

	    /**
	     * Attention: This regex has to hold even if the code is minified!
	     */
	    var /** @type {?} */ DELEGATE_CTOR = /^function\s+\S+\(\)\s*{\s*("use strict";)?\s*(return\s+)?\S+\.apply\(this,\s*arguments\)/;
	    var ReflectionCapabilities = (function () {
	        /**
	         * @param {?=} reflect
	         */
	        function ReflectionCapabilities(reflect) {
	            this._reflect = reflect || global$1.Reflect;
	        }
	        /**
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        /**
	         * @param {?} t
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.factory = function (t) { return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new (t.bind.apply(t, [void 0].concat(args)))();
	        }; };
	        /**
	         * \@internal
	         * @param {?} paramTypes
	         * @param {?} paramAnnotations
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	            var /** @type {?} */ result;
	            if (typeof paramTypes === 'undefined') {
	                result = new Array(paramAnnotations.length);
	            }
	            else {
	                result = new Array(paramTypes.length);
	            }
	            for (var /** @type {?} */ i = 0; i < result.length; i++) {
	                // TS outputs Object for parameters without types, while Traceur omits
	                // the annotations. For now we preserve the Traceur behavior to aid
	                // migration, but this can be revisited.
	                if (typeof paramTypes === 'undefined') {
	                    result[i] = [];
	                }
	                else if (paramTypes[i] != Object) {
	                    result[i] = [paramTypes[i]];
	                }
	                else {
	                    result[i] = [];
	                }
	                if (paramAnnotations && isPresent(paramAnnotations[i])) {
	                    result[i] = result[i].concat(paramAnnotations[i]);
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} type
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
	            // If we have no decorators, we only have function.length as metadata.
	            // In that case, to detect whether a child class declared an own constructor or not,
	            // we need to look inside of that constructor to check whether it is
	            // just calling the parent.
	            // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
	            // that sets 'design:paramtypes' to []
	            // if a class inherits from another class but has no ctor declared itself.
	            if (DELEGATE_CTOR.exec(type.toString())) {
	                return null;
	            }
	            // Prefer the direct API.
	            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
	                return ((type)).parameters;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            var /** @type {?} */ tsickleCtorParams = ((type)).ctorParameters;
	            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
	                // Newer tsickle uses a function closure
	                // Retain the non-function case for compatibility with older tsickle
	                var /** @type {?} */ ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	                var /** @type {?} */ paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	                var /** @type {?} */ paramAnnotations = ctorParameters.map(function (ctorParam) {
	                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	                });
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getOwnMetadata)) {
	                var /** @type {?} */ paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
	                var /** @type {?} */ paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
	                if (paramTypes || paramAnnotations) {
	                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	                }
	            }
	            // If a class has no decorators, at least create metadata
	            // based on function.length.
	            // Note: We know that this is a real constructor as we checked
	            // the content of the constructor above.
	            return new Array(((type.length))).fill(undefined);
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.parameters = function (type) {
	            // Note: only report metadata if we have at least one class decorator
	            // to stay in sync with the static reflector.
	            if (!isType(type)) {
	                return [];
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(type);
	            var /** @type {?} */ parameters = this._ownParameters(type, parentCtor);
	            if (!parameters && parentCtor !== Object) {
	                parameters = this.parameters(parentCtor);
	            }
	            return parameters || [];
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
	                var /** @type {?} */ annotations = ((typeOrFunc)).annotations;
	                if (typeof annotations === 'function' && annotations.annotations) {
	                    annotations = annotations.annotations;
	                }
	                return annotations;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
	                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	            if (!isType(typeOrFunc)) {
	                return [];
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	            var /** @type {?} */ ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
	            var /** @type {?} */ parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
	            return parentAnnotations.concat(ownAnnotations);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @param {?} parentCtor
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
	            // Prefer the direct API.
	            if (((typeOrFunc)).propMetadata &&
	                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
	                var /** @type {?} */ propMetadata = ((typeOrFunc)).propMetadata;
	                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                    propMetadata = propMetadata.propMetadata;
	                }
	                return propMetadata;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (((typeOrFunc)).propDecorators &&
	                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
	                var /** @type {?} */ propDecorators_1 = ((typeOrFunc)).propDecorators;
	                var /** @type {?} */ propMetadata_1 = ({});
	                Object.keys(propDecorators_1).forEach(function (prop) {
	                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	                });
	                return propMetadata_1;
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getOwnMetadata) {
	                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
	            }
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            if (!isType(typeOrFunc)) {
	                return {};
	            }
	            var /** @type {?} */ parentCtor = getParentCtor(typeOrFunc);
	            var /** @type {?} */ propMetadata = {};
	            if (parentCtor !== Object) {
	                var /** @type {?} */ parentPropMetadata_1 = this.propMetadata(parentCtor);
	                Object.keys(parentPropMetadata_1).forEach(function (propName) {
	                    propMetadata[propName] = parentPropMetadata_1[propName];
	                });
	            }
	            var /** @type {?} */ ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
	            if (ownPropMetadata) {
	                Object.keys(ownPropMetadata).forEach(function (propName) {
	                    var /** @type {?} */ decorators = [];
	                    if (propMetadata.hasOwnProperty(propName)) {
	                        decorators.push.apply(decorators, propMetadata[propName]);
	                    }
	                    decorators.push.apply(decorators, ownPropMetadata[propName]);
	                    propMetadata[propName] = decorators;
	                });
	            }
	            return propMetadata;
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return type instanceof Type && lcProperty in type.prototype;
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.getter = function (name) { return ((new Function('o', 'return o.' + name + ';'))); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.setter = function (name) {
	            return ((new Function('o', 'v', 'return o.' + name + ' = v;')));
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.method = function (name) {
	            var /** @type {?} */ functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	            return ((new Function('o', 'args', functionBody)));
	        };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.importUri = function (type) {
	            // StaticSymbol
	            if (typeof type === 'object' && type['filePath']) {
	                return type['filePath'];
	            }
	            // Runtime type
	            return "./" + stringify(type);
	        };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
	        /**
	         * @param {?} enumIdentifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	        return ReflectionCapabilities;
	    }());
	    /**
	     * @param {?} decoratorInvocations
	     * @return {?}
	     */
	    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	        if (!decoratorInvocations) {
	            return [];
	        }
	        return decoratorInvocations.map(function (decoratorInvocation) {
	            var /** @type {?} */ decoratorType = decoratorInvocation.type;
	            var /** @type {?} */ annotationCls = decoratorType.annotationCls;
	            var /** @type {?} */ annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	        });
	    }
	    /**
	     * @param {?} ctor
	     * @return {?}
	     */
	    function getParentCtor(ctor) {
	        var /** @type {?} */ parentProto = Object.getPrototypeOf(ctor.prototype);
	        var /** @type {?} */ parentCtor = parentProto ? parentProto.constructor : null;
	        // Note: We always use `Object` as the null value
	        // to simplify checking later on.
	        return parentCtor || Object;
	    }

	    /**
	     * Provides read-only access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     * @abstract
	     */
	    var ReflectorReader = (function () {
	        function ReflectorReader() {
	        }
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.parameters = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.annotations = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        ReflectorReader.prototype.importUri = function (typeOrFunc) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { };
	        /**
	         * @abstract
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
	        return ReflectorReader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var Reflector = (function (_super) {
	        __extends$2(Reflector, _super);
	        /**
	         * @param {?} reflectionCapabilities
	         */
	        function Reflector(reflectionCapabilities) {
	            _super.call(this);
	            this.reflectionCapabilities = reflectionCapabilities;
	        }
	        /**
	         * @param {?} caps
	         * @return {?}
	         */
	        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.parameters = function (typeOrFunc) {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.annotations = function (typeOrFunc) {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        };
	        /**
	         * @param {?} typeOrFunc
	         * @return {?}
	         */
	        Reflector.prototype.propMetadata = function (typeOrFunc) {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        };
	        /**
	         * @param {?} type
	         * @param {?} lcProperty
	         * @return {?}
	         */
	        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	        };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	        /**
	         * @param {?} type
	         * @return {?}
	         */
	        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	        /**
	         * @param {?} name
	         * @param {?} moduleUrl
	         * @param {?} runtime
	         * @return {?}
	         */
	        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
	        };
	        /**
	         * @param {?} identifier
	         * @param {?} name
	         * @return {?}
	         */
	        Reflector.prototype.resolveEnum = function (identifier, name) {
	            return this.reflectionCapabilities.resolveEnum(identifier, name);
	        };
	        return Reflector;
	    }(ReflectorReader));

	    /**
	     * The {@link Reflector} used internally in Angular to access metadata
	     * about symbols.
	     */
	    var /** @type {?} */ reflector = new Reflector(new ReflectionCapabilities());

	    /**
	     * `Dependency` is used by the framework to extend DI.
	     * This is internal to Angular and should not be used directly.
	     */
	    var ReflectiveDependency = (function () {
	        /**
	         * @param {?} key
	         * @param {?} optional
	         * @param {?} lowerBoundVisibility
	         * @param {?} upperBoundVisibility
	         * @param {?} properties
	         */
	        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	            this.key = key;
	            this.optional = optional;
	            this.lowerBoundVisibility = lowerBoundVisibility;
	            this.upperBoundVisibility = upperBoundVisibility;
	            this.properties = properties;
	        }
	        /**
	         * @param {?} key
	         * @return {?}
	         */
	        ReflectiveDependency.fromKey = function (key) {
	            return new ReflectiveDependency(key, false, null, null, []);
	        };
	        return ReflectiveDependency;
	    }());
	    var /** @type {?} */ _EMPTY_LIST = [];
	    var ResolvedReflectiveProvider_ = (function () {
	        /**
	         * @param {?} key
	         * @param {?} resolvedFactories
	         * @param {?} multiProvider
	         */
	        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	            this.key = key;
	            this.resolvedFactories = resolvedFactories;
	            this.multiProvider = multiProvider;
	        }
	        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.resolvedFactories[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return ResolvedReflectiveProvider_;
	    }());
	    /**
	     * An internal resolved representation of a factory function created by resolving {\@link
	     * Provider}.
	     * \@experimental
	     */
	    var ResolvedReflectiveFactory = (function () {
	        /**
	         * @param {?} factory
	         * @param {?} dependencies
	         */
	        function ResolvedReflectiveFactory(factory, dependencies) {
	            this.factory = factory;
	            this.dependencies = dependencies;
	        }
	        return ResolvedReflectiveFactory;
	    }());
	    /**
	     * Resolve a single provider.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveFactory(provider) {
	        var /** @type {?} */ factoryFn;
	        var /** @type {?} */ resolvedDeps;
	        if (provider.useClass) {
	            var /** @type {?} */ useClass = resolveForwardRef(provider.useClass);
	            factoryFn = reflector.factory(useClass);
	            resolvedDeps = _dependenciesFor(useClass);
	        }
	        else if (provider.useExisting) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	        }
	        else if (provider.useFactory) {
	            factoryFn = provider.useFactory;
	            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	        }
	        else {
	            factoryFn = function () { return provider.useValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	    }
	    /**
	     * Converts the {\@link Provider} into {\@link ResolvedProvider}.
	     *
	     * {\@link Injector} internally only uses {\@link ResolvedProvider}, {\@link Provider} contains
	     * convenience provider syntax.
	     * @param {?} provider
	     * @return {?}
	     */
	    function resolveReflectiveProvider(provider) {
	        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	    }
	    /**
	     * Resolve a list of Providers.
	     * @param {?} providers
	     * @return {?}
	     */
	    function resolveReflectiveProviders(providers) {
	        var /** @type {?} */ normalized = _normalizeProviders(providers, []);
	        var /** @type {?} */ resolved = normalized.map(resolveReflectiveProvider);
	        var /** @type {?} */ resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	        return Array.from(resolvedProviderMap.values());
	    }
	    /**
	     * Merges a list of ResolvedProviders into a list where
	     * each key is contained exactly once and multi providers
	     * have been merged.
	     * @param {?} providers
	     * @param {?} normalizedProvidersMap
	     * @return {?}
	     */
	    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	        for (var /** @type {?} */ i = 0; i < providers.length; i++) {
	            var /** @type {?} */ provider = providers[i];
	            var /** @type {?} */ existing = normalizedProvidersMap.get(provider.key.id);
	            if (existing) {
	                if (provider.multiProvider !== existing.multiProvider) {
	                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
	                }
	                if (provider.multiProvider) {
	                    for (var /** @type {?} */ j = 0; j < provider.resolvedFactories.length; j++) {
	                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                    }
	                }
	                else {
	                    normalizedProvidersMap.set(provider.key.id, provider);
	                }
	            }
	            else {
	                var /** @type {?} */ resolvedProvider = void 0;
	                if (provider.multiProvider) {
	                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	                }
	                else {
	                    resolvedProvider = provider;
	                }
	                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	            }
	        }
	        return normalizedProvidersMap;
	    }
	    /**
	     * @param {?} providers
	     * @param {?} res
	     * @return {?}
	     */
	    function _normalizeProviders(providers, res) {
	        providers.forEach(function (b) {
	            if (b instanceof Type) {
	                res.push({ provide: b, useClass: b });
	            }
	            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
	                res.push(/** @type {?} */ (b));
	            }
	            else if (b instanceof Array) {
	                _normalizeProviders(b, res);
	            }
	            else {
	                throw new InvalidProviderError(b);
	            }
	        });
	        return res;
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} dependencies
	     * @return {?}
	     */
	    function constructDependencies(typeOrFunc, dependencies) {
	        if (!dependencies) {
	            return _dependenciesFor(typeOrFunc);
	        }
	        else {
	            var /** @type {?} */ params_1 = dependencies.map(function (t) { return [t]; });
	            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	        }
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @return {?}
	     */
	    function _dependenciesFor(typeOrFunc) {
	        var /** @type {?} */ params = reflector.parameters(typeOrFunc);
	        if (!params)
	            return [];
	        if (params.some(function (p) { return p == null; })) {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	    }
	    /**
	     * @param {?} typeOrFunc
	     * @param {?} metadata
	     * @param {?} params
	     * @return {?}
	     */
	    function _extractToken(typeOrFunc, metadata, params) {
	        var /** @type {?} */ depProps = [];
	        var /** @type {?} */ token = null;
	        var /** @type {?} */ optional = false;
	        if (!Array.isArray(metadata)) {
	            if (metadata instanceof Inject) {
	                return _createDependency(metadata.token, optional, null, null, depProps);
	            }
	            else {
	                return _createDependency(metadata, optional, null, null, depProps);
	            }
	        }
	        var /** @type {?} */ lowerBoundVisibility = null;
	        var /** @type {?} */ upperBoundVisibility = null;
	        for (var /** @type {?} */ i = 0; i < metadata.length; ++i) {
	            var /** @type {?} */ paramMetadata = metadata[i];
	            if (paramMetadata instanceof Type) {
	                token = paramMetadata;
	            }
	            else if (paramMetadata instanceof Inject) {
	                token = paramMetadata.token;
	            }
	            else if (paramMetadata instanceof Optional) {
	                optional = true;
	            }
	            else if (paramMetadata instanceof Self) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof Host) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof SkipSelf) {
	                lowerBoundVisibility = paramMetadata;
	            }
	        }
	        token = resolveForwardRef(token);
	        if (token != null) {
	            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	        }
	        else {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	    }
	    /**
	     * @param {?} token
	     * @param {?} optional
	     * @param {?} lowerBoundVisibility
	     * @param {?} upperBoundVisibility
	     * @param {?} depProps
	     * @return {?}
	     */
	    function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
	        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }

	    // Threshold for the dynamic version
	    var /** @type {?} */ _MAX_CONSTRUCTION_COUNTER = 10;
	    var /** @type {?} */ UNDEFINED = new Object();
	    var ReflectiveProtoInjectorInlineStrategy = (function () {
	        /**
	         * @param {?} protoEI
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
	            this.provider0 = null;
	            this.provider1 = null;
	            this.provider2 = null;
	            this.provider3 = null;
	            this.provider4 = null;
	            this.provider5 = null;
	            this.provider6 = null;
	            this.provider7 = null;
	            this.provider8 = null;
	            this.provider9 = null;
	            this.keyId0 = null;
	            this.keyId1 = null;
	            this.keyId2 = null;
	            this.keyId3 = null;
	            this.keyId4 = null;
	            this.keyId5 = null;
	            this.keyId6 = null;
	            this.keyId7 = null;
	            this.keyId8 = null;
	            this.keyId9 = null;
	            var length = providers.length;
	            if (length > 0) {
	                this.provider0 = providers[0];
	                this.keyId0 = providers[0].key.id;
	            }
	            if (length > 1) {
	                this.provider1 = providers[1];
	                this.keyId1 = providers[1].key.id;
	            }
	            if (length > 2) {
	                this.provider2 = providers[2];
	                this.keyId2 = providers[2].key.id;
	            }
	            if (length > 3) {
	                this.provider3 = providers[3];
	                this.keyId3 = providers[3].key.id;
	            }
	            if (length > 4) {
	                this.provider4 = providers[4];
	                this.keyId4 = providers[4].key.id;
	            }
	            if (length > 5) {
	                this.provider5 = providers[5];
	                this.keyId5 = providers[5].key.id;
	            }
	            if (length > 6) {
	                this.provider6 = providers[6];
	                this.keyId6 = providers[6].key.id;
	            }
	            if (length > 7) {
	                this.provider7 = providers[7];
	                this.keyId7 = providers[7].key.id;
	            }
	            if (length > 8) {
	                this.provider8 = providers[8];
	                this.keyId8 = providers[8].key.id;
	            }
	            if (length > 9) {
	                this.provider9 = providers[9];
	                this.keyId9 = providers[9].key.id;
	            }
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index == 0)
	                return this.provider0;
	            if (index == 1)
	                return this.provider1;
	            if (index == 2)
	                return this.provider2;
	            if (index == 3)
	                return this.provider3;
	            if (index == 4)
	                return this.provider4;
	            if (index == 5)
	                return this.provider5;
	            if (index == 6)
	                return this.provider6;
	            if (index == 7)
	                return this.provider7;
	            if (index == 8)
	                return this.provider8;
	            if (index == 9)
	                return this.provider9;
	            throw new OutOfBoundsError(index);
	        };
	        /**
	         * @param {?} injector
	         * @return {?}
	         */
	        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	            return new ReflectiveInjectorInlineStrategy(injector, this);
	        };
	        return ReflectiveProtoInjectorInlineStrategy;
	    }());
	    var ReflectiveProtoInjectorDynamicStrategy = (function () {
	        /**
	         * @param {?} protoInj
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
	            this.providers = providers;
	            var len = providers.length;
	            this.keyIds = new Array(len);
	            for (var i = 0; i < len; i++) {
	                this.keyIds[i] = providers[i].key.id;
	            }
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index < 0 || index >= this.providers.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.providers[index];
	        };
	        /**
	         * @param {?} ei
	         * @return {?}
	         */
	        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	            return new ReflectiveInjectorDynamicStrategy(this, ei);
	        };
	        return ReflectiveProtoInjectorDynamicStrategy;
	    }());
	    var ReflectiveProtoInjector = (function () {
	        /**
	         * @param {?} providers
	         */
	        function ReflectiveProtoInjector(providers) {
	            this.numberOfProviders = providers.length;
	            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?
	                new ReflectiveProtoInjectorDynamicStrategy(this, providers) :
	                new ReflectiveProtoInjectorInlineStrategy(this, providers);
	        }
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
	            return new ReflectiveProtoInjector(providers);
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
	            return this._strategy.getProviderAtIndex(index);
	        };
	        return ReflectiveProtoInjector;
	    }());
	    var ReflectiveInjectorInlineStrategy = (function () {
	        /**
	         * @param {?} injector
	         * @param {?} protoStrategy
	         */
	        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
	            this.injector = injector;
	            this.protoStrategy = protoStrategy;
	            this.obj0 = UNDEFINED;
	            this.obj1 = UNDEFINED;
	            this.obj2 = UNDEFINED;
	            this.obj3 = UNDEFINED;
	            this.obj4 = UNDEFINED;
	            this.obj5 = UNDEFINED;
	            this.obj6 = UNDEFINED;
	            this.obj7 = UNDEFINED;
	            this.obj8 = UNDEFINED;
	            this.obj9 = UNDEFINED;
	        }
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        /**
	         * @param {?} keyId
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
	            var /** @type {?} */ p = this.protoStrategy;
	            var /** @type {?} */ inj = this.injector;
	            if (p.keyId0 === keyId) {
	                if (this.obj0 === UNDEFINED) {
	                    this.obj0 = inj._new(p.provider0);
	                }
	                return this.obj0;
	            }
	            if (p.keyId1 === keyId) {
	                if (this.obj1 === UNDEFINED) {
	                    this.obj1 = inj._new(p.provider1);
	                }
	                return this.obj1;
	            }
	            if (p.keyId2 === keyId) {
	                if (this.obj2 === UNDEFINED) {
	                    this.obj2 = inj._new(p.provider2);
	                }
	                return this.obj2;
	            }
	            if (p.keyId3 === keyId) {
	                if (this.obj3 === UNDEFINED) {
	                    this.obj3 = inj._new(p.provider3);
	                }
	                return this.obj3;
	            }
	            if (p.keyId4 === keyId) {
	                if (this.obj4 === UNDEFINED) {
	                    this.obj4 = inj._new(p.provider4);
	                }
	                return this.obj4;
	            }
	            if (p.keyId5 === keyId) {
	                if (this.obj5 === UNDEFINED) {
	                    this.obj5 = inj._new(p.provider5);
	                }
	                return this.obj5;
	            }
	            if (p.keyId6 === keyId) {
	                if (this.obj6 === UNDEFINED) {
	                    this.obj6 = inj._new(p.provider6);
	                }
	                return this.obj6;
	            }
	            if (p.keyId7 === keyId) {
	                if (this.obj7 === UNDEFINED) {
	                    this.obj7 = inj._new(p.provider7);
	                }
	                return this.obj7;
	            }
	            if (p.keyId8 === keyId) {
	                if (this.obj8 === UNDEFINED) {
	                    this.obj8 = inj._new(p.provider8);
	                }
	                return this.obj8;
	            }
	            if (p.keyId9 === keyId) {
	                if (this.obj9 === UNDEFINED) {
	                    this.obj9 = inj._new(p.provider9);
	                }
	                return this.obj9;
	            }
	            return UNDEFINED;
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	            if (index == 0)
	                return this.obj0;
	            if (index == 1)
	                return this.obj1;
	            if (index == 2)
	                return this.obj2;
	            if (index == 3)
	                return this.obj3;
	            if (index == 4)
	                return this.obj4;
	            if (index == 5)
	                return this.obj5;
	            if (index == 6)
	                return this.obj6;
	            if (index == 7)
	                return this.obj7;
	            if (index == 8)
	                return this.obj8;
	            if (index == 9)
	                return this.obj9;
	            throw new OutOfBoundsError(index);
	        };
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	        return ReflectiveInjectorInlineStrategy;
	    }());
	    var ReflectiveInjectorDynamicStrategy = (function () {
	        /**
	         * @param {?} protoStrategy
	         * @param {?} injector
	         */
	        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
	            this.protoStrategy = protoStrategy;
	            this.injector = injector;
	            this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
	        }
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        /**
	         * @param {?} keyId
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
	            var /** @type {?} */ p = this.protoStrategy;
	            for (var /** @type {?} */ i = 0; i < p.keyIds.length; i++) {
	                if (p.keyIds[i] === keyId) {
	                    if (this.objs[i] === UNDEFINED) {
	                        this.objs[i] = this.injector._new(p.providers[i]);
	                    }
	                    return this.objs[i];
	                }
	            }
	            return UNDEFINED;
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	            if (index < 0 || index >= this.objs.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.objs[index];
	        };
	        /**
	         * @return {?}
	         */
	        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	        return ReflectiveInjectorDynamicStrategy;
	    }());
	    /**
	     * A ReflectiveDependency injection container used for instantiating objects and resolving
	     * dependencies.
	     *
	     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	     * constructor dependencies.
	     *
	     * In typical use, application code asks for the dependencies in the constructor and they are
	     * resolved by the `Injector`.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	     *
	     * The following example creates an `Injector` configured to create `Engine` and `Car`.
	     *
	     * ```typescript
	     * \@Injectable()
	     * class Engine {
	     * }
	     *
	     * \@Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * var car = injector.get(Car);
	     * expect(car instanceof Car).toBe(true);
	     * expect(car.engine instanceof Engine).toBe(true);
	     * ```
	     *
	     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	     * resolve all of the object's dependencies automatically.
	     *
	     * \@stable
	     * @abstract
	     */
	    var ReflectiveInjector = (function () {
	        function ReflectiveInjector() {
	        }
	        /**
	         * Turns an array of provider definitions into an array of resolved providers.
	         *
	         * A resolution is a process of flattening multiple nested arrays and converting individual
	         * providers into an array of {\@link ResolvedReflectiveProvider}s.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	         *
	         * expect(providers.length).toEqual(2);
	         *
	         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	         * expect(providers[0].key.displayName).toBe("Car");
	         * expect(providers[0].dependencies.length).toEqual(1);
	         * expect(providers[0].factory).toBeDefined();
	         *
	         * expect(providers[1].key.displayName).toBe("Engine");
	         * });
	         * ```
	         *
	         * See {\@link ReflectiveInjector#fromResolvedProviders} for more info.
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.resolve = function (providers) {
	            return resolveReflectiveProviders(providers);
	        };
	        /**
	         * Resolves an array of providers and creates an injector from those providers.
	         *
	         * The passed-in providers can be an array of `Type`, {\@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         *
	         * This function is slower than the corresponding `fromResolvedProviders`
	         * because it needs to resolve the passed-in providers first.
	         * See {\@link Injector#resolve} and {\@link Injector#fromResolvedProviders}.
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	        };
	        /**
	         * Creates an injector from previously resolved providers.
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, Engine]);
	         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         * \@experimental
	         * @param {?} providers
	         * @param {?=} parent
	         * @return {?}
	         */
	        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
	        };
	        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
	            /**
	             * Parent of this injector.
	             *
	             * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	             * -->
	             *
	             * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	             *
	             * ```typescript
	             * var parent = ReflectiveInjector.resolveAndCreate([]);
	             * var child = parent.resolveAndCreateChild([]);
	             * expect(child.parent).toBe(parent);
	             * ```
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Resolves an array of providers and creates a child injector from those providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * The passed-in providers can be an array of `Type`, {\@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	         * var child = parent.resolveAndCreateChild([ChildProvider]);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         *
	         * This function is slower than the corresponding `createChildFromResolved`
	         * because it needs to resolve the passed-in providers first.
	         * See {\@link Injector#resolve} and {\@link Injector#createChildFromResolved}.
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };
	        /**
	         * Creates a child injector from previously resolved providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	         *
	         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	         * var child = parent.createChildFromResolved(childProviders);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
	            return unimplemented();
	        };
	        /**
	         * Resolves a provider and instantiates an object in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         *
	         * var car = injector.resolveAndInstantiate(Car);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	         * ```
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };
	        /**
	         * Instantiates an object using a resolved provider in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	         *
	         * ```typescript
	         * \@Injectable()
	         * class Engine {
	         * }
	         *
	         * \@Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         * var carProvider = ReflectiveInjector.resolve([Car])[0];
	         * var car = injector.instantiateResolved(carProvider);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	         * ```
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
	        return ReflectiveInjector;
	    }());
	    var ReflectiveInjector_ = (function () {
	        /**
	         * Private
	         * @param {?} _proto
	         * @param {?=} _parent
	         */
	        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {
	            if (_parent === void 0) { _parent = null; }
	            /** @internal */
	            this._constructionCounter = 0;
	            this._proto = _proto;
	            this._parent = _parent;
	            this._strategy = _proto._strategy.createInjectorStrategy(this);
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
	        };
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
	            /**
	             * \@internal
	             * Internal. Do not use.
	             * We return `any` not to export the InjectorStrategy type.
	             * @return {?}
	             */
	            get: function () { return this._strategy; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	            var /** @type {?} */ ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return this.createChildFromResolved(ResolvedReflectiveProviders);
	        };
	        /**
	         * @param {?} providers
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	            var /** @type {?} */ proto = new ReflectiveProtoInjector(providers);
	            var /** @type {?} */ inj = new ReflectiveInjector_(proto);
	            inj._parent = this;
	            return inj;
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * \@internal
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._new = function (provider) {
	            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	                throw new CyclicDependencyError(this, provider.key);
	            }
	            return this._instantiateProvider(provider);
	        };
	        /**
	         * @param {?} provider
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	            if (provider.multiProvider) {
	                var /** @type {?} */ res = new Array(provider.resolvedFactories.length);
	                for (var /** @type {?} */ i = 0; i < provider.resolvedFactories.length; ++i) {
	                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	                }
	                return res;
	            }
	            else {
	                return this._instantiate(provider, provider.resolvedFactories[0]);
	            }
	        };
	        /**
	         * @param {?} provider
	         * @param {?} ResolvedReflectiveFactory
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	            var /** @type {?} */ factory = ResolvedReflectiveFactory.factory;
	            var /** @type {?} */ deps = ResolvedReflectiveFactory.dependencies;
	            var /** @type {?} */ length = deps.length;
	            var /** @type {?} */ d0;
	            var /** @type {?} */ d1;
	            var /** @type {?} */ d2;
	            var /** @type {?} */ d3;
	            var /** @type {?} */ d4;
	            var /** @type {?} */ d5;
	            var /** @type {?} */ d6;
	            var /** @type {?} */ d7;
	            var /** @type {?} */ d8;
	            var /** @type {?} */ d9;
	            var /** @type {?} */ d10;
	            var /** @type {?} */ d11;
	            var /** @type {?} */ d12;
	            var /** @type {?} */ d13;
	            var /** @type {?} */ d14;
	            var /** @type {?} */ d15;
	            var /** @type {?} */ d16;
	            var /** @type {?} */ d17;
	            var /** @type {?} */ d18;
	            var /** @type {?} */ d19;
	            try {
	                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
	                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
	                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
	                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
	                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
	                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
	                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
	                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
	                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
	                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
	                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
	                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
	                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
	                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
	                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
	                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
	                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
	                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
	                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
	                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
	            }
	            catch (e) {
	                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
	                    e.addKey(this, provider.key);
	                }
	                throw e;
	            }
	            var /** @type {?} */ obj;
	            try {
	                switch (length) {
	                    case 0:
	                        obj = factory();
	                        break;
	                    case 1:
	                        obj = factory(d0);
	                        break;
	                    case 2:
	                        obj = factory(d0, d1);
	                        break;
	                    case 3:
	                        obj = factory(d0, d1, d2);
	                        break;
	                    case 4:
	                        obj = factory(d0, d1, d2, d3);
	                        break;
	                    case 5:
	                        obj = factory(d0, d1, d2, d3, d4);
	                        break;
	                    case 6:
	                        obj = factory(d0, d1, d2, d3, d4, d5);
	                        break;
	                    case 7:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                        break;
	                    case 8:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                        break;
	                    case 9:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                        break;
	                    case 10:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                        break;
	                    case 11:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                        break;
	                    case 12:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                        break;
	                    case 13:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                        break;
	                    case 14:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                        break;
	                    case 15:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                        break;
	                    case 16:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                        break;
	                    case 17:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                        break;
	                    case 18:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                        break;
	                    case 19:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                        break;
	                    case 20:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                        break;
	                    default:
	                        throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
	                }
	            }
	            catch (e) {
	                throw new InstantiationError(this, e, e.stack, provider.key);
	            }
	            return obj;
	        };
	        /**
	         * @param {?} provider
	         * @param {?} dep
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	        };
	        /**
	         * @param {?} key
	         * @param {?} lowerBoundVisibility
	         * @param {?} upperBoundVisibility
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
	            if (key === INJECTOR_KEY) {
	                return this;
	            }
	            if (upperBoundVisibility instanceof Self) {
	                return this._getByKeySelf(key, notFoundValue);
	            }
	            else {
	                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	            if (notFoundValue !== THROW_IF_NOT_FOUND) {
	                return notFoundValue;
	            }
	            else {
	                throw new NoProviderError(this, key);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	            var /** @type {?} */ obj = this._strategy.getObjByKeyId(key.id);
	            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	        };
	        /**
	         * \@internal
	         * @param {?} key
	         * @param {?} notFoundValue
	         * @param {?} lowerBoundVisibility
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
	            var /** @type {?} */ inj;
	            if (lowerBoundVisibility instanceof SkipSelf) {
	                inj = this._parent;
	            }
	            else {
	                inj = this;
	            }
	            while (inj instanceof ReflectiveInjector_) {
	                var /** @type {?} */ inj_ = (inj);
	                var /** @type {?} */ obj = inj_._strategy.getObjByKeyId(key.id);
	                if (obj !== UNDEFINED)
	                    return obj;
	                inj = inj_._parent;
	            }
	            if (inj !== null) {
	                return inj.get(key.token, notFoundValue);
	            }
	            else {
	                return this._throwOrNull(key, notFoundValue);
	            }
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                    .join(', ');
	                return "ReflectiveInjector(providers: [" + providers + "])";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	        return ReflectiveInjector_;
	    }());
	    var /** @type {?} */ INJECTOR_KEY = ReflectiveKey.get(Injector);
	    /**
	     * @param {?} injector
	     * @param {?} fn
	     * @return {?}
	     */
	    function _mapProviders(injector, fn) {
	        var /** @type {?} */ res = new Array(injector._proto.numberOfProviders);
	        for (var /** @type {?} */ i = 0; i < injector._proto.numberOfProviders; ++i) {
	            res[i] = fn(injector._proto.getProviderAtIndex(i));
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * \@whatItDoes Provides a hook for centralized exception handling.
	     *
	     * \@description
	     *
	     * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	     * intercept error handling, write a custom exception handler that replaces this default as
	     * appropriate for your app.
	     *
	     * ### Example
	     *
	     * ```
	     * class MyErrorHandler implements ErrorHandler {
	     *   handleError(error) {
	     *     // do something with the exception
	     *   }
	     * }
	     *
	     * \@NgModule({
	     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	     * })
	     * class MyModule {}
	     * ```
	     *
	     * \@stable
	     */
	    var ErrorHandler = (function () {
	        /**
	         * @param {?=} rethrowError
	         */
	        function ErrorHandler(rethrowError) {
	            if (rethrowError === void 0) { rethrowError = true; }
	            /**
	             * @internal
	             */
	            this._console = console;
	            this.rethrowError = rethrowError;
	        }
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype.handleError = function (error) {
	            var /** @type {?} */ originalError = this._findOriginalError(error);
	            var /** @type {?} */ originalStack = this._findOriginalStack(error);
	            var /** @type {?} */ context = this._findContext(error);
	            this._console.error("EXCEPTION: " + this._extractMessage(error));
	            if (originalError) {
	                this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	            }
	            if (originalStack) {
	                this._console.error('ORIGINAL STACKTRACE:');
	                this._console.error(originalStack);
	            }
	            if (context) {
	                this._console.error('ERROR CONTEXT:');
	                this._console.error(context);
	            }
	            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	            // when an error happens. If we do not rethrow, bootstrap will always succeed.
	            if (this.rethrowError)
	                throw error;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._extractMessage = function (error) {
	            return error instanceof Error ? error.message : error.toString();
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findContext = function (error) {
	            if (error) {
	                return error.context ? error.context :
	                    this._findContext(((error)).originalError);
	            }
	            return null;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalError = function (error) {
	            var /** @type {?} */ e = ((error)).originalError;
	            while (e && ((e)).originalError) {
	                e = ((e)).originalError;
	            }
	            return e;
	        };
	        /**
	         * \@internal
	         * @param {?} error
	         * @return {?}
	         */
	        ErrorHandler.prototype._findOriginalStack = function (error) {
	            if (!(error instanceof Error))
	                return null;
	            var /** @type {?} */ e = error;
	            var /** @type {?} */ stack = e.stack;
	            while (e instanceof Error && ((e)).originalError) {
	                e = ((e)).originalError;
	                if (e instanceof Error && e.stack) {
	                    stack = e.stack;
	                }
	            }
	            return stack;
	        };
	        return ErrorHandler;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        /**
	         * @param {?} arr
	         * @param {?} condition
	         * @return {?}
	         */
	        ListWrapper.findLast = function (arr, condition) {
	            for (var /** @type {?} */ i = arr.length - 1; i >= 0; i--) {
	                if (condition(arr[i])) {
	                    return arr[i];
	                }
	            }
	            return null;
	        };
	        /**
	         * @param {?} list
	         * @param {?} items
	         * @return {?}
	         */
	        ListWrapper.removeAll = function (list, items) {
	            for (var /** @type {?} */ i = 0; i < items.length; ++i) {
	                var /** @type {?} */ index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        /**
	         * @param {?} list
	         * @param {?} el
	         * @return {?}
	         */
	        ListWrapper.remove = function (list, el) {
	            var /** @type {?} */ index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        /**
	         * @param {?} a
	         * @param {?} b
	         * @return {?}
	         */
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var /** @type {?} */ i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        /**
	         * @param {?} list
	         * @return {?}
	         */
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var /** @type {?} */ flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return ((flat)).concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @param {?} comparator
	     * @return {?}
	     */
	    function areIterablesEqual(a, b, comparator) {
	        var /** @type {?} */ iterator1 = a[getSymbolIterator()]();
	        var /** @type {?} */ iterator2 = b[getSymbolIterator()]();
	        while (true) {
	            var /** @type {?} */ item1 = iterator1.next();
	            var /** @type {?} */ item2 = iterator2.next();
	            if (item1.done && item2.done)
	                return true;
	            if (item1.done || item2.done)
	                return false;
	            if (!comparator(item1.value, item2.value))
	                return false;
	        }
	    }
	    /**
	     * @param {?} obj
	     * @param {?} fn
	     * @return {?}
	     */
	    function iterateListLike(obj, fn) {
	        if (Array.isArray(obj)) {
	            for (var /** @type {?} */ i = 0; i < obj.length; i++) {
	                fn(obj[i]);
	            }
	        }
	        else {
	            var /** @type {?} */ iterator = obj[getSymbolIterator()]();
	            var /** @type {?} */ item = void 0;
	            while (!((item = iterator.next()).done)) {
	                fn(item.value);
	            }
	        }
	    }

	    /**
	     * Determine if the argument is shaped like a Promise
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return !!obj && typeof obj.then === 'function';
	    }

	    /**
	     * A function that will be executed when an application is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ APP_INITIALIZER = new OpaqueToken('Application Initializer');
	    /**
	     * A class that reflects the state of running {\@link APP_INITIALIZER}s.
	     *
	     * \@experimental
	     */
	    var ApplicationInitStatus = (function () {
	        /**
	         * @param {?} appInits
	         */
	        function ApplicationInitStatus(appInits) {
	            var _this = this;
	            this._done = false;
	            var asyncInitPromises = [];
	            if (appInits) {
	                for (var i = 0; i < appInits.length; i++) {
	                    var initResult = appInits[i]();
	                    if (isPromise(initResult)) {
	                        asyncInitPromises.push(initResult);
	                    }
	                }
	            }
	            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	            if (asyncInitPromises.length === 0) {
	                this._done = true;
	            }
	        }
	        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._done; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._donePromise; },
	            enumerable: true,
	            configurable: true
	        });
	        ApplicationInitStatus.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationInitStatus.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	        ]; };
	        return ApplicationInitStatus;
	    }());

	    /**
	     * A DI Token representing a unique string id assigned to the application by Angular and used
	     * primarily for prefixing application attributes and CSS styles when
	     * {@link ViewEncapsulation#Emulated} is being used.
	     *
	     * If you need to avoid randomly generated value to be used as an application id, you can provide
	     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	     * using this token.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID = new OpaqueToken('AppId');
	    /**
	     * @return {?}
	     */
	    function _appIdRandomProviderFactory() {
	        return "" + _randomChar() + _randomChar() + _randomChar();
	    }
	    /**
	     * Providers that will generate a random APP_ID_TOKEN.
	     * @experimental
	     */
	    var /** @type {?} */ APP_ID_RANDOM_PROVIDER = {
	        provide: APP_ID,
	        useFactory: _appIdRandomProviderFactory,
	        deps: /** @type {?} */ ([]),
	    };
	    /**
	     * @return {?}
	     */
	    function _randomChar() {
	        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	    }
	    /**
	     * A function that will be executed when a platform is initialized.
	     * @experimental
	     */
	    var /** @type {?} */ PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	    /**
	     * All callbacks provided via this token will be called for every component that is bootstrapped.
	     * Signature of the callback:
	     *
	     * `(componentRef: ComponentRef) => void`.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	    /**
	     * A token which indicates the root directory of the application
	     * @experimental
	     */
	    var /** @type {?} */ PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');

	    var Console = (function () {
	        function Console() {
	        }
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.log = function (message) { print(message); };
	        /**
	         * @param {?} message
	         * @return {?}
	         */
	        Console.prototype.warn = function (message) { warn(message); };
	        Console.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Console.ctorParameters = function () { return []; };
	        return Console;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a component is still being loaded in a synchronous compile.
	     *
	     * \@stable
	     */
	    var ComponentStillLoadingError = (function (_super) {
	        __extends$4(ComponentStillLoadingError, _super);
	        /**
	         * @param {?} compType
	         */
	        function ComponentStillLoadingError(compType) {
	            _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	            this.compType = compType;
	        }
	        return ComponentStillLoadingError;
	    }(BaseError));
	    /**
	     * Combination of NgModuleFactory and ComponentFactorys.
	     *
	     * \@experimental
	     */
	    var ModuleWithComponentFactories = (function () {
	        /**
	         * @param {?} ngModuleFactory
	         * @param {?} componentFactories
	         */
	        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	            this.ngModuleFactory = ngModuleFactory;
	            this.componentFactories = componentFactories;
	        }
	        return ModuleWithComponentFactories;
	    }());
	    /**
	     * @return {?}
	     */
	    function _throwError() {
	        throw new Error("Runtime compiler is not loaded");
	    }
	    /**
	     * Low-level service for running the angular compiler during runtime
	     * to create {\@link ComponentFactory}s, which
	     * can later be used to create and render a Component instance.
	     *
	     * Each `\@NgModule` provides an own `Compiler` to its injector,
	     * that will use the directives/pipes of the ng module for compilation
	     * of components.
	     * \@stable
	     */
	    var Compiler = (function () {
	        function Compiler() {
	        }
	        /**
	         * Compiles the given NgModule and all of its components. All templates of the components listed
	         * in `entryComponents`
	         * have to be inlined. Otherwise throws a {\@link ComponentStillLoadingError}.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	        /**
	         * Compiles the given NgModule and all of its components
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	        /**
	         * Same as {\@link compileModuleSync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Same as {\@link compileModuleAsync} but also creates ComponentFactories for all components.
	         * @param {?} moduleType
	         * @return {?}
	         */
	        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Exposes the CSS-style selectors that have been used in `ngContent` directives within
	         * the template of the given component.
	         * This is used by the `upgrade` library to compile the appropriate transclude content
	         * in the Angular 1 wrapper component.
	         * @param {?} component
	         * @return {?}
	         */
	        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
	        /**
	         * Clears all caches.
	         * @return {?}
	         */
	        Compiler.prototype.clearCache = function () { };
	        /**
	         * Clears the cache for the given component/ngModule.
	         * @param {?} type
	         * @return {?}
	         */
	        Compiler.prototype.clearCacheFor = function (type) { };
	        Compiler.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Compiler.ctorParameters = function () { return []; };
	        return Compiler;
	    }());
	    /**
	     * Token to provide CompilerOptions in the platform injector.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	    /**
	     * A factory for creating a Compiler
	     *
	     * \@experimental
	     * @abstract
	     */
	    var CompilerFactory = (function () {
	        function CompilerFactory() {
	        }
	        /**
	         * @abstract
	         * @param {?=} options
	         * @return {?}
	         */
	        CompilerFactory.prototype.createCompiler = function (options) { };
	        return CompilerFactory;
	    }());

	    var ElementRef = (function () {
	        /**
	         * @param {?} nativeElement
	         */
	        function ElementRef(nativeElement) {
	            this.nativeElement = nativeElement;
	        }
	        return ElementRef;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * \@Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   \@Output() open: EventEmitter<any> = new EventEmitter();
	     *   \@Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * \@stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$6(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         * @param {?=} isAsync
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        /**
	         * @param {?=} value
	         * @return {?}
	         */
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        /**
	         * @param {?=} generatorOrNext
	         * @param {?=} error
	         * @param {?=} complete
	         * @return {?}
	         */
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var /** @type {?} */ schedulerFn;
	            var /** @type {?} */ errorFn = function (err) { return null; };
	            var /** @type {?} */ completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));

	    /**
	     * An injectable service for executing work inside or outside of the Angular zone.
	     *
	     * The most common use of this service is to optimize performance when starting a work consisting of
	     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	     * Angular. Such tasks can be kicked off via {\@link runOutsideAngular} and if needed, these tasks
	     * can reenter the Angular zone via {\@link run}.
	     *
	     * <!-- TODO: add/fix links to:
	     *   - docs explaining zones and the use of zones in Angular and change-detection
	     *   - link to runOutsideAngular/run (throughout this file!)
	     *   -->
	     *
	     * ### Example
	     * ```
	     * import {Component, NgZone} from '\@angular/core';
	     * import {NgIf} from '\@angular/common';
	     *
	     * \@Component({
	     *   selector: 'ng-zone-demo'.
	     *   template: `
	     *     <h2>Demo: NgZone</h2>
	     *
	     *     <p>Progress: {{progress}}%</p>
	     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	     *
	     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	     *   `,
	     * })
	     * export class NgZoneDemo {
	     *   progress: number = 0;
	     *   label: string;
	     *
	     *   constructor(private _ngZone: NgZone) {}
	     *
	     *   // Loop inside the Angular zone
	     *   // so the UI DOES refresh after each setTimeout cycle
	     *   processWithinAngularZone() {
	     *     this.label = 'inside';
	     *     this.progress = 0;
	     *     this._increaseProgress(() => console.log('Inside Done!'));
	     *   }
	     *
	     *   // Loop outside of the Angular zone
	     *   // so the UI DOES NOT refresh after each setTimeout cycle
	     *   processOutsideOfAngularZone() {
	     *     this.label = 'outside';
	     *     this.progress = 0;
	     *     this._ngZone.runOutsideAngular(() => {
	     *       this._increaseProgress(() => {
	     *       // reenter the Angular zone and display done
	     *       this._ngZone.run(() => {console.log('Outside Done!') });
	     *     }}));
	     *   }
	     *
	     *   _increaseProgress(doneCallback: () => void) {
	     *     this.progress += 1;
	     *     console.log(`Current progress: ${this.progress}%`);
	     *
	     *     if (this.progress < 100) {
	     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	     *     } else {
	     *       doneCallback();
	     *     }
	     *   }
	     * }
	     * ```
	     * \@experimental
	     */
	    var NgZone = (function () {
	        /**
	         * @param {?} __0
	         */
	        function NgZone(_a) {
	            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	            this._hasPendingMicrotasks = false;
	            this._hasPendingMacrotasks = false;
	            this._isStable = true;
	            this._nesting = 0;
	            this._onUnstable = new EventEmitter(false);
	            this._onMicrotaskEmpty = new EventEmitter(false);
	            this._onStable = new EventEmitter(false);
	            this._onErrorEvents = new EventEmitter(false);
	            if (typeof Zone == 'undefined') {
	                throw new Error('Angular requires Zone.js prolyfill.');
	            }
	            Zone.assertZonePatched();
	            this.outer = this.inner = Zone.current;
	            if (Zone['wtfZoneSpec']) {
	                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	            }
	            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	            }
	            this.forkInnerZoneWithAngularBehavior();
	        }
	        /**
	         * @return {?}
	         */
	        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	        /**
	         * @return {?}
	         */
	        NgZone.assertInAngularZone = function () {
	            if (!NgZone.isInAngularZone()) {
	                throw new Error('Expected to be in Angular Zone, but it is not!');
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.assertNotInAngularZone = function () {
	            if (NgZone.isInAngularZone()) {
	                throw new Error('Expected to not be in Angular Zone, but it is!');
	            }
	        };
	        /**
	         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	         * outside of the Angular zone (typically started via {\@link runOutsideAngular}).
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * within the Angular zone.
	         *
	         * If a synchronous error happens it will be rethrown and not reported via `onError`.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	        /**
	         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	         * rethrown.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	        /**
	         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * outside of the Angular zone.
	         *
	         * Use {\@link run} to reenter the Angular zone and do work that updates the application model.
	         * @param {?} fn
	         * @return {?}
	         */
	        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	        Object.defineProperty(NgZone.prototype, "onUnstable", {
	            /**
	             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onUnstable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	            /**
	             * Notifies when there is no more microtasks enqueue in the current VM Turn.
	             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	             * For this reason this event can fire multiple times per VM Turn.
	             * @return {?}
	             */
	            get: function () { return this._onMicrotaskEmpty; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onStable", {
	            /**
	             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	             * implies we are about to relinquish VM turn.
	             * This event gets called just once.
	             * @return {?}
	             */
	            get: function () { return this._onStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onError", {
	            /**
	             * Notify that an error has been delivered.
	             * @return {?}
	             */
	            get: function () { return this._onErrorEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "isStable", {
	            /**
	             * Whether there are no outstanding microtasks or macrotasks.
	             * @return {?}
	             */
	            get: function () { return this._isStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMicrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._hasPendingMacrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.checkStable = function () {
	            var _this = this;
	            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	                try {
	                    this._nesting++;
	                    this._onMicrotaskEmpty.emit(null);
	                }
	                finally {
	                    this._nesting--;
	                    if (!this._hasPendingMicrotasks) {
	                        try {
	                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                        }
	                        finally {
	                            this._isStable = true;
	                        }
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	            var _this = this;
	            this.inner = this.inner.fork({
	                name: 'angular',
	                properties: /** @type {?} */ ({ 'isAngularZone': true }),
	                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invokeTask(target, task, applyThis, applyArgs);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onHasTask: function (delegate, current, target, hasTaskState) {
	                    delegate.hasTask(target, hasTaskState);
	                    if (current === target) {
	                        // We are only interested in hasTask events which originate from our zone
	                        // (A child hasTask event is not interesting to us)
	                        if (hasTaskState.change == 'microTask') {
	                            _this.setHasMicrotask(hasTaskState.microTask);
	                        }
	                        else if (hasTaskState.change == 'macroTask') {
	                            _this.setHasMacrotask(hasTaskState.macroTask);
	                        }
	                    }
	                },
	                onHandleError: function (delegate, current, target, error) {
	                    delegate.handleError(target, error);
	                    _this.triggerError(error);
	                    return false;
	                }
	            });
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onEnter = function () {
	            this._nesting++;
	            if (this._isStable) {
	                this._isStable = false;
	                this._onUnstable.emit(null);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgZone.prototype.onLeave = function () {
	            this._nesting--;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMicrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	            this._hasPendingMicrotasks = hasMicrotasks;
	            this.checkStable();
	        };
	        /**
	         * @param {?} hasMacrotasks
	         * @return {?}
	         */
	        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	        return NgZone;
	    }());

	    var AnimationQueue = (function () {
	        /**
	         * @param {?} _zone
	         */
	        function AnimationQueue(_zone) {
	            this._zone = _zone;
	            this.entries = [];
	        }
	        /**
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationQueue.prototype.enqueue = function (player) { this.entries.push(player); };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype.flush = function () {
	            var _this = this;
	            // given that each animation player may set aside
	            // microtasks and rely on DOM-based events, this
	            // will cause Angular to run change detection after
	            // each request. This sidesteps the issue. If a user
	            // hooks into an animation via (@anim.start) or (@anim.done)
	            // then those methods will automatically trigger change
	            // detection by wrapping themselves inside of a zone
	            if (this.entries.length) {
	                this._zone.runOutsideAngular(function () {
	                    // this code is wrapped into a single promise such that the
	                    // onStart and onDone player callbacks are triggered outside
	                    // of the digest cycle of animations
	                    Promise.resolve(null).then(function () { return _this._triggerAnimations(); });
	                });
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationQueue.prototype._triggerAnimations = function () {
	            NgZone.assertNotInAngularZone();
	            while (this.entries.length) {
	                var /** @type {?} */ player = this.entries.shift();
	                // in the event that an animation throws an error then we do
	                // not want to re-run animations on any previous animations
	                // if they have already been kicked off beforehand
	                if (!player.hasStarted()) {
	                    player.play();
	                }
	            }
	        };
	        AnimationQueue.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        AnimationQueue.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return AnimationQueue;
	    }());

	    var DefaultIterableDifferFactory = (function () {
	        function DefaultIterableDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	        /**
	         * @param {?} cdRef
	         * @param {?=} trackByFn
	         * @return {?}
	         */
	        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	            return new DefaultIterableDiffer(trackByFn);
	        };
	        return DefaultIterableDifferFactory;
	    }());
	    var /** @type {?} */ trackByIdentity = function (index, item) { return item; };
	    /**
	     * \@stable
	     */
	    var DefaultIterableDiffer = (function () {
	        /**
	         * @param {?=} _trackByFn
	         */
	        function DefaultIterableDiffer(_trackByFn) {
	            this._trackByFn = _trackByFn;
	            this._length = null;
	            this._collection = null;
	            this._linkedRecords = null;
	            this._unlinkedRecords = null;
	            this._previousItHead = null;
	            this._itHead = null;
	            this._itTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._movesHead = null;
	            this._movesTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	            this._identityChangesHead = null;
	            this._identityChangesTail = null;
	            this._trackByFn = this._trackByFn || trackByIdentity;
	        }
	        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._collection; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._itHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	            var /** @type {?} */ nextIt = this._itHead;
	            var /** @type {?} */ nextRemove = this._removalsHead;
	            var /** @type {?} */ addRemoveOffset = 0;
	            var /** @type {?} */ moveOffsets = null;
	            while (nextIt || nextRemove) {
	                // Figure out which is the next record to process
	                // Order: remove, add, move
	                var /** @type {?} */ record = !nextRemove ||
	                    nextIt &&
	                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                    nextIt :
	                    nextRemove;
	                var /** @type {?} */ adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	                var /** @type {?} */ currentIndex = record.currentIndex;
	                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	                if (record === nextRemove) {
	                    addRemoveOffset--;
	                    nextRemove = nextRemove._nextRemoved;
	                }
	                else {
	                    nextIt = nextIt._next;
	                    if (record.previousIndex == null) {
	                        addRemoveOffset++;
	                    }
	                    else {
	                        // INVARIANT:  currentIndex < previousIndex
	                        if (!moveOffsets)
	                            moveOffsets = [];
	                        var /** @type {?} */ localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                        var /** @type {?} */ localCurrentIndex = currentIndex - addRemoveOffset;
	                        if (localMovePreviousIndex != localCurrentIndex) {
	                            for (var /** @type {?} */ i = 0; i < localMovePreviousIndex; i++) {
	                                var /** @type {?} */ offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                                var /** @type {?} */ index = offset + i;
	                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                    moveOffsets[i] = offset + 1;
	                                }
	                            }
	                            var /** @type {?} */ previousIndex = record.previousIndex;
	                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                        }
	                    }
	                }
	                if (adjPreviousIndex !== currentIndex) {
	                    fn(record, adjPreviousIndex, currentIndex);
	                }
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._movesHead; record !== null; record = record._nextMoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.diff = function (collection) {
	            if (isBlank(collection))
	                collection = [];
	            if (!isListLikeIterable(collection)) {
	                throw new Error("Error trying to diff '" + collection + "'");
	            }
	            if (this.check(collection)) {
	                return this;
	            }
	            else {
	                return null;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} collection
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.check = function (collection) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ record = this._itHead;
	            var /** @type {?} */ mayBeDirty = false;
	            var /** @type {?} */ index;
	            var /** @type {?} */ item;
	            var /** @type {?} */ itemTrackBy;
	            if (Array.isArray(collection)) {
	                var /** @type {?} */ list = collection;
	                this._length = collection.length;
	                for (var /** @type {?} */ index_1 = 0; index_1 < this._length; index_1++) {
	                    item = list[index_1];
	                    itemTrackBy = this._trackByFn(index_1, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = this._mismatch(record, item, itemTrackBy, index_1);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                }
	            }
	            else {
	                index = 0;
	                iterateListLike(collection, function (item /** TODO #9100 */) {
	                    itemTrackBy = _this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = _this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            _this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                    index++;
	                });
	                this._length = index;
	            }
	            this._truncate(record);
	            this._collection = collection;
	            return this.isDirty;
	        };
	        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._movesHead !== null ||
	                    this._removalsHead !== null || this._identityChangesHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Reset the state of the change objects to show no changes. This means set previousKey to
	         * currentKey, and clear all of the queues (additions, moves, removals).
	         * Set the previousIndexes of moved and added items to their currentIndexes
	         * Reset the list of additions, moves and removals
	         *
	         * \@internal
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                var /** @type {?} */ nextRecord = void 0;
	                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                    record.previousIndex = record.currentIndex;
	                }
	                this._additionsHead = this._additionsTail = null;
	                for (record = this._movesHead; record !== null; record = nextRecord) {
	                    record.previousIndex = record.currentIndex;
	                    nextRecord = record._nextMoved;
	                }
	                this._movesHead = this._movesTail = null;
	                this._removalsHead = this._removalsTail = null;
	                this._identityChangesHead = this._identityChangesTail = null;
	            }
	        };
	        /**
	         * This is the core function which handles differences between collections.
	         *
	         * - `record` is the record which we saw at this position last time. If null then it is a new
	         *   item.
	         * - `item` is the current item in the collection
	         * - `index` is the position of the item in the collection
	         *
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	            // The previous record after which we will append the current one.
	            var /** @type {?} */ previousRecord;
	            if (record === null) {
	                previousRecord = this._itTail;
	            }
	            else {
	                previousRecord = record._prev;
	                // Remove the record from the collection since we know it does not match the item.
	                this._remove(record);
	            }
	            // Attempt to see if we have seen the item before.
	            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	            if (record !== null) {
	                // We have seen this before, we need to move it forward in the collection.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._moveAfter(record, previousRecord, index);
	            }
	            else {
	                // Never seen it, check evicted list.
	                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	                if (record !== null) {
	                    // It is an item which we have evicted earlier: reinsert it back into the list.
	                    // But first we need to check if identity changed, so we can update in view if necessary
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                    this._reinsertAfter(record, previousRecord, index);
	                }
	                else {
	                    // It is a new item: add it.
	                    record =
	                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	                }
	            }
	            return record;
	        };
	        /**
	         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	         *
	         * Use case: `[a, a]` => `[b, a, a]`
	         *
	         * If we did not have this check then the insertion of `b` would:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) leave `a` at index `1` as is. <-- this is wrong!
	         *   3) reinsert `a` at index 2. <-- this is wrong!
	         *
	         * The correct behavior is:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) reinsert `a` at index 1.
	         *   3) move `a` at from `1` to `2`.
	         *
	         *
	         * Double check that we have not evicted a duplicate item. We need to check if the item type may
	         * have already been removed:
	         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	         * at the end.
	         *
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @param {?} itemTrackBy
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	            var /** @type {?} */ reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (reinsertRecord !== null) {
	                record = this._reinsertAfter(reinsertRecord, record._prev, index);
	            }
	            else if (record.currentIndex != index) {
	                record.currentIndex = index;
	                this._addToMoves(record, index);
	            }
	            return record;
	        };
	        /**
	         * Get rid of any excess {\@link CollectionChangeRecord}s from the previous collection
	         *
	         * - `record` The first excess {\@link CollectionChangeRecord}.
	         *
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._truncate = function (record) {
	            // Anything after that needs to be removed;
	            while (record !== null) {
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(this._unlink(record));
	                record = nextRecord;
	            }
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.clear();
	            }
	            if (this._additionsTail !== null) {
	                this._additionsTail._nextAdded = null;
	            }
	            if (this._movesTail !== null) {
	                this._movesTail._nextMoved = null;
	            }
	            if (this._itTail !== null) {
	                this._itTail._next = null;
	            }
	            if (this._removalsTail !== null) {
	                this._removalsTail._nextRemoved = null;
	            }
	            if (this._identityChangesTail !== null) {
	                this._identityChangesTail._nextIdentityChange = null;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	            this._unlink(record);
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	            this._insertAfter(record, prevRecord, index);
	            if (this._additionsTail === null) {
	                // todo(vicb)
	                // assert(this._additionsHead === null);
	                this._additionsTail = this._additionsHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_additionsTail._nextAdded === null);
	                // assert(record._nextAdded === null);
	                this._additionsTail = this._additionsTail._nextAdded = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} prevRecord
	         * @param {?} index
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	            // todo(vicb)
	            // assert(record != prevRecord);
	            // assert(record._next === null);
	            // assert(record._prev === null);
	            var /** @type {?} */ next = prevRecord === null ? this._itHead : prevRecord._next;
	            // todo(vicb)
	            // assert(next != record);
	            // assert(prevRecord != record);
	            record._next = next;
	            record._prev = prevRecord;
	            if (next === null) {
	                this._itTail = record;
	            }
	            else {
	                next._prev = record;
	            }
	            if (prevRecord === null) {
	                this._itHead = record;
	            }
	            else {
	                prevRecord._next = record;
	            }
	            if (this._linkedRecords === null) {
	                this._linkedRecords = new _DuplicateMap();
	            }
	            this._linkedRecords.put(record);
	            record.currentIndex = index;
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._remove = function (record) {
	            return this._addToRemovals(this._unlink(record));
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._unlink = function (record) {
	            if (this._linkedRecords !== null) {
	                this._linkedRecords.remove(record);
	            }
	            var /** @type {?} */ prev = record._prev;
	            var /** @type {?} */ next = record._next;
	            // todo(vicb)
	            // assert((record._prev = null) === null);
	            // assert((record._next = null) === null);
	            if (prev === null) {
	                this._itHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            if (next === null) {
	                this._itTail = prev;
	            }
	            else {
	                next._prev = prev;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} toIndex
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	            // todo(vicb)
	            // assert(record._nextMoved === null);
	            if (record.previousIndex === toIndex) {
	                return record;
	            }
	            if (this._movesTail === null) {
	                // todo(vicb)
	                // assert(_movesHead === null);
	                this._movesTail = this._movesHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_movesTail._nextMoved === null);
	                this._movesTail = this._movesTail._nextMoved = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	            if (this._unlinkedRecords === null) {
	                this._unlinkedRecords = new _DuplicateMap();
	            }
	            this._unlinkedRecords.put(record);
	            record.currentIndex = null;
	            record._nextRemoved = null;
	            if (this._removalsTail === null) {
	                // todo(vicb)
	                // assert(_removalsHead === null);
	                this._removalsTail = this._removalsHead = record;
	                record._prevRemoved = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(_removalsTail._nextRemoved === null);
	                // assert(record._nextRemoved === null);
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = this._removalsTail._nextRemoved = record;
	            }
	            return record;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @param {?} item
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	            record.item = item;
	            if (this._identityChangesTail === null) {
	                this._identityChangesTail = this._identityChangesHead = record;
	            }
	            else {
	                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	            }
	            return record;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultIterableDiffer.prototype.toString = function () {
	            var /** @type {?} */ list = [];
	            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
	            var /** @type {?} */ previous = [];
	            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
	            var /** @type {?} */ additions = [];
	            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
	            var /** @type {?} */ moves = [];
	            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
	            var /** @type {?} */ removals = [];
	            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
	            var /** @type {?} */ identityChanges = [];
	            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
	            return 'collection: ' + list.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'moves: ' + moves.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n' +
	                'identityChanges: ' + identityChanges.join(', ') + '\n';
	        };
	        return DefaultIterableDiffer;
	    }());
	    /**
	     * \@stable
	     */
	    var CollectionChangeRecord = (function () {
	        /**
	         * @param {?} item
	         * @param {?} trackById
	         */
	        function CollectionChangeRecord(item, trackById) {
	            this.item = item;
	            this.trackById = trackById;
	            this.currentIndex = null;
	            this.previousIndex = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._prev = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._prevDup = null;
	            /** @internal */
	            this._nextDup = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextMoved = null;
	            /** @internal */
	            this._nextIdentityChange = null;
	        }
	        /**
	         * @return {?}
	         */
	        CollectionChangeRecord.prototype.toString = function () {
	            return this.previousIndex === this.currentIndex ? stringify(this.item) :
	                stringify(this.item) + '[' +
	                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	        };
	        return CollectionChangeRecord;
	    }());
	    var _DuplicateItemRecordList = (function () {
	        function _DuplicateItemRecordList() {
	            /** @internal */
	            this._head = null;
	            /** @internal */
	            this._tail = null;
	        }
	        /**
	         * Append the record to the list of duplicates.
	         *
	         * Note: by design all records in the list of duplicates hold the same value in record.item.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.add = function (record) {
	            if (this._head === null) {
	                this._head = this._tail = record;
	                record._nextDup = null;
	                record._prevDup = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(record.item ==  _head.item ||
	                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	                this._tail._nextDup = record;
	                record._prevDup = this._tail;
	                record._nextDup = null;
	                this._tail = record;
	            }
	        };
	        /**
	         * @param {?} trackById
	         * @param {?} afterIndex
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	            var /** @type {?} */ record;
	            for (record = this._head; record !== null; record = record._nextDup) {
	                if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                    looseIdentical(record.trackById, trackById)) {
	                    return record;
	                }
	            }
	            return null;
	        };
	        /**
	         * Remove one {\@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * Returns whether the list of duplicates is empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateItemRecordList.prototype.remove = function (record) {
	            // todo(vicb)
	            // assert(() {
	            //  // verify that the record being removed is in the list.
	            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	            //    if (identical(cursor, record)) return true;
	            //  }
	            //  return false;
	            //});
	            var /** @type {?} */ prev = record._prevDup;
	            var /** @type {?} */ next = record._nextDup;
	            if (prev === null) {
	                this._head = next;
	            }
	            else {
	                prev._nextDup = next;
	            }
	            if (next === null) {
	                this._tail = prev;
	            }
	            else {
	                next._prevDup = prev;
	            }
	            return this._head === null;
	        };
	        return _DuplicateItemRecordList;
	    }());
	    var _DuplicateMap = (function () {
	        function _DuplicateMap() {
	            this.map = new Map();
	        }
	        /**
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.put = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ duplicates = this.map.get(key);
	            if (!duplicates) {
	                duplicates = new _DuplicateItemRecordList();
	                this.map.set(key, duplicates);
	            }
	            duplicates.add(record);
	        };
	        /**
	         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	         * have already iterated over, we use the afterIndex to pretend it is not there.
	         *
	         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	         * have any more `a`s needs to return the last `a` not the first or second.
	         * @param {?} trackById
	         * @param {?=} afterIndex
	         * @return {?}
	         */
	        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	            if (afterIndex === void 0) { afterIndex = null; }
	            var /** @type {?} */ key = trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            return recordList ? recordList.get(trackById, afterIndex) : null;
	        };
	        /**
	         * Removes a {\@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * The list of duplicates also is removed from the map if it gets empty.
	         * @param {?} record
	         * @return {?}
	         */
	        _DuplicateMap.prototype.remove = function (record) {
	            var /** @type {?} */ key = record.trackById;
	            var /** @type {?} */ recordList = this.map.get(key);
	            // Remove the list of duplicates when it gets empty
	            if (recordList.remove(record)) {
	                this.map.delete(key);
	            }
	            return record;
	        };
	        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.map.size === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	        /**
	         * @return {?}
	         */
	        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	        return _DuplicateMap;
	    }());
	    /**
	     * @param {?} item
	     * @param {?} addRemoveOffset
	     * @param {?} moveOffsets
	     * @return {?}
	     */
	    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	        var /** @type {?} */ previousIndex = item.previousIndex;
	        if (previousIndex === null)
	            return previousIndex;
	        var /** @type {?} */ moveOffset = 0;
	        if (moveOffsets && previousIndex < moveOffsets.length) {
	            moveOffset = moveOffsets[previousIndex];
	        }
	        return previousIndex + addRemoveOffset + moveOffset;
	    }

	    var DefaultKeyValueDifferFactory = (function () {
	        function DefaultKeyValueDifferFactory() {
	        }
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	        /**
	         * @param {?} cdRef
	         * @return {?}
	         */
	        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	        return DefaultKeyValueDifferFactory;
	    }());
	    var DefaultKeyValueDiffer = (function () {
	        function DefaultKeyValueDiffer() {
	            this._records = new Map();
	            this._mapHead = null;
	            this._previousMapHead = null;
	            this._changesHead = null;
	            this._changesTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	        }
	        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._additionsHead !== null || this._changesHead !== null ||
	                    this._removalsHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	            var /** @type {?} */ record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.diff = function (map) {
	            if (!map) {
	                map = new Map();
	            }
	            else if (!(map instanceof Map || isJsObject(map))) {
	                throw new Error("Error trying to diff '" + map + "'");
	            }
	            return this.check(map) ? this : null;
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	        /**
	         * @param {?} map
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.check = function (map) {
	            var _this = this;
	            this._reset();
	            var /** @type {?} */ records = this._records;
	            var /** @type {?} */ oldSeqRecord = this._mapHead;
	            var /** @type {?} */ lastOldSeqRecord = null;
	            var /** @type {?} */ lastNewSeqRecord = null;
	            var /** @type {?} */ seqChanged = false;
	            this._forEach(map, function (value, key) {
	                var /** @type {?} */ newSeqRecord;
	                if (oldSeqRecord && key === oldSeqRecord.key) {
	                    newSeqRecord = oldSeqRecord;
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    seqChanged = true;
	                    if (oldSeqRecord !== null) {
	                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                        _this._addToRemovals(oldSeqRecord);
	                    }
	                    if (records.has(key)) {
	                        newSeqRecord = records.get(key);
	                        _this._maybeAddToChanges(newSeqRecord, value);
	                    }
	                    else {
	                        newSeqRecord = new KeyValueChangeRecord(key);
	                        records.set(key, newSeqRecord);
	                        newSeqRecord.currentValue = value;
	                        _this._addToAdditions(newSeqRecord);
	                    }
	                }
	                if (seqChanged) {
	                    if (_this._isInRemovals(newSeqRecord)) {
	                        _this._removeFromRemovals(newSeqRecord);
	                    }
	                    if (lastNewSeqRecord == null) {
	                        _this._mapHead = newSeqRecord;
	                    }
	                    else {
	                        lastNewSeqRecord._next = newSeqRecord;
	                    }
	                }
	                lastOldSeqRecord = oldSeqRecord;
	                lastNewSeqRecord = newSeqRecord;
	                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	            });
	            this._truncate(lastOldSeqRecord, oldSeqRecord);
	            return this.isDirty;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var /** @type {?} */ record = void 0;
	                // Record the state of the mapping
	                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                    record.previousValue = record.currentValue;
	                }
	                for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                    record.previousValue = record.currentValue;
	                }
	                this._changesHead = this._changesTail = null;
	                this._additionsHead = this._additionsTail = null;
	                this._removalsHead = this._removalsTail = null;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} lastRecord
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	            while (record !== null) {
	                if (lastRecord === null) {
	                    this._mapHead = null;
	                }
	                else {
	                    lastRecord._next = null;
	                }
	                var /** @type {?} */ nextRecord = record._next;
	                this._addToRemovals(record);
	                lastRecord = record;
	                record = nextRecord;
	            }
	            for (var /** @type {?} */ rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	                rec.previousValue = rec.currentValue;
	                rec.currentValue = null;
	                this._records.delete(rec.key);
	            }
	        };
	        /**
	         * @param {?} record
	         * @param {?} newValue
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	            if (!looseIdentical(newValue, record.currentValue)) {
	                record.previousValue = record.currentValue;
	                record.currentValue = newValue;
	                this._addToChanges(record);
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	            return record === this._removalsHead || record._nextRemoved !== null ||
	                record._prevRemoved !== null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	            if (this._removalsHead === null) {
	                this._removalsHead = this._removalsTail = record;
	            }
	            else {
	                this._removalsTail._nextRemoved = record;
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = record;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} prev
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	            var /** @type {?} */ next = record._next;
	            if (prev === null) {
	                this._mapHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            record._next = null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	            var /** @type {?} */ prev = record._prevRemoved;
	            var /** @type {?} */ next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            record._prevRemoved = record._nextRemoved = null;
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	            if (this._additionsHead === null) {
	                this._additionsHead = this._additionsTail = record;
	            }
	            else {
	                this._additionsTail._nextAdded = record;
	                this._additionsTail = record;
	            }
	        };
	        /**
	         * \@internal
	         * @param {?} record
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	            if (this._changesHead === null) {
	                this._changesHead = this._changesTail = record;
	            }
	            else {
	                this._changesTail._nextChanged = record;
	                this._changesTail = record;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype.toString = function () {
	            var /** @type {?} */ items = [];
	            var /** @type {?} */ previous = [];
	            var /** @type {?} */ changes = [];
	            var /** @type {?} */ additions = [];
	            var /** @type {?} */ removals = [];
	            var /** @type {?} */ record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                items.push(stringify(record));
	            }
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                previous.push(stringify(record));
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                changes.push(stringify(record));
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                additions.push(stringify(record));
	            }
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                removals.push(stringify(record));
	            }
	            return 'map: ' + items.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'changes: ' + changes.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n';
	        };
	        /**
	         * \@internal
	         * @param {?} obj
	         * @param {?} fn
	         * @return {?}
	         */
	        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	            if (obj instanceof Map) {
	                obj.forEach(fn);
	            }
	            else {
	                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	            }
	        };
	        return DefaultKeyValueDiffer;
	    }());
	    /**
	     * \@stable
	     */
	    var KeyValueChangeRecord = (function () {
	        /**
	         * @param {?} key
	         */
	        function KeyValueChangeRecord(key) {
	            this.key = key;
	            this.previousValue = null;
	            this.currentValue = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextChanged = null;
	        }
	        /**
	         * @return {?}
	         */
	        KeyValueChangeRecord.prototype.toString = function () {
	            return looseIdentical(this.previousValue, this.currentValue) ?
	                stringify(this.key) :
	                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                    stringify(this.currentValue) + ']');
	        };
	        return KeyValueChangeRecord;
	    }());

	    /**
	     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	     * \@stable
	     */
	    var IterableDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function IterableDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        IterableDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new IterableDiffers(factories);
	            }
	            else {
	                return new IterableDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
	         * inherited {\@link IterableDiffers} instance with the provided factories and return a new
	         * {\@link IterableDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	         * which will only be applied to the injector for this component and its children.
	         * This step is all that's required to make a new {\@link IterableDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * \@Component({
	         *   viewProviders: [
	         *     IterableDiffers.extend([new ImmutableListDiffer()])
	         *   ]
	         * })
	         * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        IterableDiffers.extend = function (factories) {
	            return {
	                provide: IterableDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend IterableDiffers without a parent injector');
	                    }
	                    return IterableDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} iterable
	         * @return {?}
	         */
	        IterableDiffers.prototype.find = function (iterable) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(iterable); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	            }
	        };
	        return IterableDiffers;
	    }());

	    /**
	     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	     * \@stable
	     */
	    var KeyValueDiffers = (function () {
	        /**
	         * @param {?} factories
	         */
	        function KeyValueDiffers(factories) {
	            this.factories = factories;
	        }
	        /**
	         * @param {?} factories
	         * @param {?=} parent
	         * @return {?}
	         */
	        KeyValueDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var /** @type {?} */ copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new KeyValueDiffers(factories);
	            }
	            else {
	                return new KeyValueDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
	         * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
	         * {\@link KeyValueDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	         * which will only be applied to the injector for this component and its children.
	         * This step is all that's required to make a new {\@link KeyValueDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * \@Component({
	         *   viewProviders: [
	         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	         *   ]
	         * })
	         * ```
	         * @param {?} factories
	         * @return {?}
	         */
	        KeyValueDiffers.extend = function (factories) {
	            return {
	                provide: KeyValueDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                    }
	                    return KeyValueDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        /**
	         * @param {?} kv
	         * @return {?}
	         */
	        KeyValueDiffers.prototype.find = function (kv) {
	            var /** @type {?} */ factory = this.factories.find(function (f) { return f.supports(kv); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + kv + "'");
	            }
	        };
	        return KeyValueDiffers;
	    }());

	    var /** @type {?} */ UNINITIALIZED = {
	        toString: function () { return 'CD_INIT_VALUE'; }
	    };
	    /**
	     * @param {?} a
	     * @param {?} b
	     * @return {?}
	     */
	    function devModeEqual(a, b) {
	        if (isListLikeIterable(a) && isListLikeIterable(b)) {
	            return areIterablesEqual(a, b, devModeEqual);
	        }
	        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	    /**
	     * Indicates that the result of a {\@link Pipe} transformation has changed even though the
	     * reference
	     * has not changed.
	     *
	     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	     *
	     * Example:
	     *
	     * ```
	     * if (this._latestValue === this._latestReturnedValue) {
	     *    return this._latestReturnedValue;
	     *  } else {
	     *    this._latestReturnedValue = this._latestValue;
	     *    return WrappedValue.wrap(this._latestValue); // this will force update
	     *  }
	     * ```
	     * \@stable
	     */
	    var WrappedValue = (function () {
	        /**
	         * @param {?} wrapped
	         */
	        function WrappedValue(wrapped) {
	            this.wrapped = wrapped;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	        return WrappedValue;
	    }());
	    /**
	     * Helper class for unwrapping WrappedValue s
	     */
	    var ValueUnwrapper = (function () {
	        function ValueUnwrapper() {
	            this.hasWrappedValue = false;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.unwrap = function (value) {
	            if (value instanceof WrappedValue) {
	                this.hasWrappedValue = true;
	                return value.wrapped;
	            }
	            return value;
	        };
	        /**
	         * @return {?}
	         */
	        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	        return ValueUnwrapper;
	    }());
	    /**
	     * Represents a basic change from a previous to a new value.
	     * \@stable
	     */
	    var SimpleChange = (function () {
	        /**
	         * @param {?} previousValue
	         * @param {?} currentValue
	         */
	        function SimpleChange(previousValue, currentValue) {
	            this.previousValue = previousValue;
	            this.currentValue = currentValue;
	        }
	        /**
	         * Check whether the new value is the first value assigned.
	         * @return {?}
	         */
	        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
	        return SimpleChange;
	    }());

	    /**
	     * \@stable
	     * @abstract
	     */
	    var ChangeDetectorRef = (function () {
	        function ChangeDetectorRef() {
	        }
	        /**
	         * Marks all {\@link ChangeDetectionStrategy#OnPush} ancestors as to be checked.
	         *
	         * <!-- TODO: Add a link to a chapter on OnPush components -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/GC512b?p=preview))
	         *
	         * ```typescript
	         * \@Component({
	         *   selector: 'cmp',
	         *   changeDetection: ChangeDetectionStrategy.OnPush,
	         *   template: `Number of ticks: {{numberOfTicks}}`
	         * })
	         * class Cmp {
	         *   numberOfTicks = 0;
	         *
	         *   constructor(ref: ChangeDetectorRef) {
	         *     setInterval(() => {
	         *       this.numberOfTicks ++
	         *       // the following is required, otherwise the view will not be updated
	         *       this.ref.markForCheck();
	         *     }, 1000);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   changeDetection: ChangeDetectionStrategy.OnPush,
	         *   template: `
	         *     <cmp><cmp>
	         *   `,
	         * })
	         * class App {
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.markForCheck = function () { };
	        /**
	         * Detaches the change detector from the change detector tree.
	         *
	         * The detached change detector will not be checked until it is reattached.
	         *
	         * This can also be used in combination with {\@link ChangeDetectorRef#detectChanges} to implement
	         * local change
	         * detection checks.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	         *
	         * ### Example
	         *
	         * The following example defines a component with a large list of readonly data.
	         * Imagine the data changes constantly, many times per second. For performance reasons,
	         * we want to check and update the list every five seconds. We can do that by detaching
	         * the component's change detector and doing a local check every five seconds.
	         *
	         * ```typescript
	         * class DataProvider {
	         *   // in a real application the returned data will be different every time
	         *   get data() {
	         *     return [1,2,3,4,5];
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'giant-list',
	         *   template: `
	         *     <li *ngFor="let d of dataProvider.data">Data {{d}}</lig>
	         *   `,
	         * })
	         * class GiantList {
	         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {
	         *     ref.detach();
	         *     setInterval(() => {
	         *       this.ref.detectChanges();
	         *     }, 5000);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   providers: [DataProvider],
	         *   template: `
	         *     <giant-list><giant-list>
	         *   `,
	         * })
	         * class App {
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detach = function () { };
	        /**
	         * Checks the change detector and its children.
	         *
	         * This can also be used in combination with {\@link ChangeDetectorRef#detach} to implement local
	         * change detection
	         * checks.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
	         *
	         * ### Example
	         *
	         * The following example defines a component with a large list of readonly data.
	         * Imagine, the data changes constantly, many times per second. For performance reasons,
	         * we want to check and update the list every five seconds.
	         *
	         * We can do that by detaching the component's change detector and doing a local change detection
	         * check
	         * every five seconds.
	         *
	         * See {\@link ChangeDetectorRef#detach} for more information.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.detectChanges = function () { };
	        /**
	         * Checks the change detector and its children, and throws if any changes are detected.
	         *
	         * This is used in development mode to verify that running change detection doesn't introduce
	         * other changes.
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.checkNoChanges = function () { };
	        /**
	         * Reattach the change detector to the change detector tree.
	         *
	         * This also marks OnPush ancestors as to be checked. This reattached change detector will be
	         * checked during the next change detection run.
	         *
	         * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/aUhZha?p=preview))
	         *
	         * The following example creates a component displaying `live` data. The component will detach
	         * its change detector from the main change detector tree when the component's live property
	         * is set to false.
	         *
	         * ```typescript
	         * class DataProvider {
	         *   data = 1;
	         *
	         *   constructor() {
	         *     setInterval(() => {
	         *       this.data = this.data * 2;
	         *     }, 500);
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'live-data',
	         *   inputs: ['live'],
	         *   template: 'Data: {{dataProvider.data}}'
	         * })
	         * class LiveData {
	         *   constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}
	         *
	         *   set live(value) {
	         *     if (value)
	         *       this.ref.reattach();
	         *     else
	         *       this.ref.detach();
	         *   }
	         * }
	         *
	         * \@Component({
	         *   selector: 'app',
	         *   providers: [DataProvider],
	         *   template: `
	         *     Live Update: <input type="checkbox" [(ngModel)]="live">
	         *     <live-data [live]="live"><live-data>
	         *   `,
	         * })
	         * class App {
	         *   live = true;
	         * }
	         * ```
	         * @abstract
	         * @return {?}
	         */
	        ChangeDetectorRef.prototype.reattach = function () { };
	        return ChangeDetectorRef;
	    }());

	    /**
	     * Structural diffing for `Object`s and `Map`s.
	     */
	    var /** @type {?} */ keyValDiff = [new DefaultKeyValueDifferFactory()];
	    /**
	     * Structural diffing for `Iterable` types such as `Array`s.
	     */
	    var /** @type {?} */ iterableDiff = [new DefaultIterableDifferFactory()];
	    var /** @type {?} */ defaultIterableDiffers = new IterableDiffers(iterableDiff);
	    var /** @type {?} */ defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	    var RenderComponentType = (function () {
	        /**
	         * @param {?} id
	         * @param {?} templateUrl
	         * @param {?} slotCount
	         * @param {?} encapsulation
	         * @param {?} styles
	         * @param {?} animations
	         */
	        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	            this.id = id;
	            this.templateUrl = templateUrl;
	            this.slotCount = slotCount;
	            this.encapsulation = encapsulation;
	            this.styles = styles;
	            this.animations = animations;
	        }
	        return RenderComponentType;
	    }());
	    /**
	     * @abstract
	     */
	    var RenderDebugInfo = (function () {
	        function RenderDebugInfo() {
	        }
	        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "component", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return RenderDebugInfo;
	    }());
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var Renderer = (function () {
	        function Renderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @return {?}
	         */
	        Renderer.prototype.createViewRoot = function (hostElement) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
	        /**
	         * @abstract
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        Renderer.prototype.projectNodes = function (parentElement, nodes) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        Renderer.prototype.detachView = function (viewRootNodes) { };
	        /**
	         * @abstract
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listen = function (renderElement, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        Renderer.prototype.listenGlobal = function (target, name, callback) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
	        /**
	         * Used only in debug mode to serialize property changes to dom nodes as attributes.
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
	        /**
	         * @abstract
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        Renderer.prototype.setText = function (renderNode, text) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	        return Renderer;
	    }());
	    /**
	     * Injectable service that provides a low-level interface for modifying the UI.
	     *
	     * Use this service to bypass Angular's templating and make custom UI changes that can't be
	     * expressed declaratively. For example if you need to set a property or an attribute whose name is
	     * not statically known, use {\@link #setElementProperty} or {\@link #setElementAttribute}
	     * respectively.
	     *
	     * If you are implementing a custom renderer, you must implement this interface.
	     *
	     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	     * \@experimental
	     * @abstract
	     */
	    var RootRenderer = (function () {
	        function RootRenderer() {
	        }
	        /**
	         * @abstract
	         * @param {?} componentType
	         * @return {?}
	         */
	        RootRenderer.prototype.renderComponent = function (componentType) { };
	        return RootRenderer;
	    }());

	    var SecurityContext = {};
	    SecurityContext.NONE = 0;
	    SecurityContext.HTML = 1;
	    SecurityContext.STYLE = 2;
	    SecurityContext.SCRIPT = 3;
	    SecurityContext.URL = 4;
	    SecurityContext.RESOURCE_URL = 5;
	    SecurityContext[SecurityContext.NONE] = "NONE";
	    SecurityContext[SecurityContext.HTML] = "HTML";
	    SecurityContext[SecurityContext.STYLE] = "STYLE";
	    SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
	    SecurityContext[SecurityContext.URL] = "URL";
	    SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
	    /**
	     * Sanitizer is used by the views to sanitize potentially dangerous values.
	     *
	     * \@stable
	     * @abstract
	     */
	    var Sanitizer = (function () {
	        function Sanitizer() {
	        }
	        /**
	         * @abstract
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        Sanitizer.prototype.sanitize = function (context, value) { };
	        return Sanitizer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An error thrown if application changes model breaking the top-down data flow.
	     *
	     * This exception is only thrown in dev mode.
	     *
	     * <!-- TODO: Add a link once the dev mode option is configurable -->
	     *
	     * ### Example
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'parent',
	     *   template: '<child [prop]="parentProp"></child>',
	     * })
	     * class Parent {
	     *   parentProp = 'init';
	     * }
	     *
	     * \@Directive({selector: 'child', inputs: ['prop']})
	     * class Child {
	     *   constructor(public parent: Parent) {}
	     *
	     *   set prop(v) {
	     *     // this updates the parent property, which is disallowed during change detection
	     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
	     *     this.parent.parentProp = 'updated';
	     *   }
	     * }
	     * ```
	     * \@stable
	     */
	    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
	        __extends$7(ExpressionChangedAfterItHasBeenCheckedError, _super);
	        /**
	         * @param {?} oldValue
	         * @param {?} currValue
	         */
	        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
	            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	            if (oldValue === UNINITIALIZED) {
	                msg +=
	                    " It seems like the view has been created after its parent and its children have been dirty checked." +
	                        " Has it been created in a change detection hook ?";
	            }
	            _super.call(this, msg);
	        }
	        return ExpressionChangedAfterItHasBeenCheckedError;
	    }(BaseError));
	    /**
	     * Thrown when an exception was raised during view creation, change detection or destruction.
	     *
	     * This error wraps the original exception to attach additional contextual information that can
	     * be useful for debugging.
	     * \@stable
	     */
	    var ViewWrappedError = (function (_super) {
	        __extends$7(ViewWrappedError, _super);
	        /**
	         * @param {?} originalError
	         * @param {?} context
	         */
	        function ViewWrappedError(originalError, context) {
	            _super.call(this, "Error in " + context.source, originalError);
	            this.context = context;
	        }
	        return ViewWrappedError;
	    }(WrappedError));
	    /**
	     * Thrown when a destroyed view is used.
	     *
	     * This error indicates a bug in the framework.
	     *
	     * This is an internal Angular error.
	     * \@stable
	     */
	    var ViewDestroyedError = (function (_super) {
	        __extends$7(ViewDestroyedError, _super);
	        /**
	         * @param {?} details
	         */
	        function ViewDestroyedError(details) {
	            _super.call(this, "Attempt to use a destroyed view: " + details);
	        }
	        return ViewDestroyedError;
	    }(BaseError));

	    var ViewUtils = (function () {
	        /**
	         * @param {?} _renderer
	         * @param {?} sanitizer
	         * @param {?} animationQueue
	         */
	        function ViewUtils(_renderer, sanitizer, animationQueue) {
	            this._renderer = _renderer;
	            this.animationQueue = animationQueue;
	            this.sanitizer = sanitizer;
	        }
	        /**
	         * \@internal
	         * @param {?} renderComponentType
	         * @return {?}
	         */
	        ViewUtils.prototype.renderComponent = function (renderComponentType) {
	            return this._renderer.renderComponent(renderComponentType);
	        };
	        ViewUtils.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ViewUtils.ctorParameters = function () { return [
	            { type: RootRenderer, },
	            { type: Sanitizer, },
	            { type: AnimationQueue, },
	        ]; };
	        return ViewUtils;
	    }());
	    var /** @type {?} */ nextRenderComponentTypeId = 0;
	    /**
	     * @param {?} templateUrl
	     * @param {?} slotCount
	     * @param {?} encapsulation
	     * @param {?} styles
	     * @param {?} animations
	     * @return {?}
	     */
	    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
	        return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	    }
	    /**
	     * @param {?} e
	     * @param {?} array
	     * @return {?}
	     */
	    function addToArray(e, array) {
	        array.push(e);
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} constAndInterp
	     * @return {?}
	     */
	    function interpolate(valueCount, constAndInterp) {
	        var /** @type {?} */ result = '';
	        for (var /** @type {?} */ i = 0; i < valueCount * 2; i = i + 2) {
	            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	        }
	        return result + constAndInterp[valueCount * 2];
	    }
	    /**
	     * @param {?} valueCount
	     * @param {?} c0
	     * @param {?} a1
	     * @param {?} c1
	     * @param {?=} a2
	     * @param {?=} c2
	     * @param {?=} a3
	     * @param {?=} c3
	     * @param {?=} a4
	     * @param {?=} c4
	     * @param {?=} a5
	     * @param {?=} c5
	     * @param {?=} a6
	     * @param {?=} c6
	     * @param {?=} a7
	     * @param {?=} c7
	     * @param {?=} a8
	     * @param {?=} c8
	     * @param {?=} a9
	     * @param {?=} c9
	     * @return {?}
	     */
	    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	        switch (valueCount) {
	            case 1:
	                return c0 + _toStringWithNull(a1) + c1;
	            case 2:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	            case 3:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3;
	            case 4:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4;
	            case 5:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	            case 6:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	            case 7:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7;
	            case 8:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	            case 9:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	            default:
	                throw new Error("Does not support more than 9 expressions");
	        }
	    }
	    /**
	     * @param {?} v
	     * @return {?}
	     */
	    function _toStringWithNull(v) {
	        return v != null ? v.toString() : '';
	    }
	    /**
	     * @param {?} throwOnChange
	     * @param {?} oldValue
	     * @param {?} newValue
	     * @return {?}
	     */
	    function checkBinding(throwOnChange, oldValue, newValue) {
	        if (throwOnChange) {
	            if (!devModeEqual(oldValue, newValue)) {
	                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	            }
	            return false;
	        }
	        else {
	            return !looseIdentical(oldValue, newValue);
	        }
	    }
	    /**
	     * @param {?} input
	     * @param {?} value
	     * @return {?}
	     */
	    function castByValue(input, value) {
	        return (input);
	    }
	    var /** @type {?} */ EMPTY_ARRAY = [];
	    var /** @type {?} */ EMPTY_MAP = {};
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy1(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        return function (p0) {
	            if (!looseIdentical(v0, p0)) {
	                v0 = p0;
	                result = fn(p0);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy2(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        return function (p0, p1) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	                v0 = p0;
	                v1 = p1;
	                result = fn(p0, p1);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy3(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0 = UNINITIALIZED;
	        var /** @type {?} */ v1 = UNINITIALIZED;
	        var /** @type {?} */ v2 = UNINITIALIZED;
	        return function (p0, p1, p2) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                result = fn(p0, p1, p2);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy4(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3;
	        v0 = v1 = v2 = v3 = UNINITIALIZED;
	        return function (p0, p1, p2, p3) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                result = fn(p0, p1, p2, p3);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy5(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4;
	        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                result = fn(p0, p1, p2, p3, p4);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy6(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5;
	        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                result = fn(p0, p1, p2, p3, p4, p5);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy7(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                result = fn(p0, p1, p2, p3, p4, p5, p6);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy8(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy9(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} fn
	     * @return {?}
	     */
	    function pureProxy10(fn) {
	        var /** @type {?} */ result;
	        var /** @type {?} */ v0, /** @type {?} */ v1, /** @type {?} */ v2, /** @type {?} */ v3, /** @type {?} */ v4, /** @type {?} */ v5, /** @type {?} */ v6, /** @type {?} */ v7, /** @type {?} */ v8, /** @type {?} */ v9;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	                !looseIdentical(v9, p9)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                v9 = p9;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	            }
	            return result;
	        };
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} changes
	     * @return {?}
	     */
	    function setBindingDebugInfoForChanges(renderer, el, changes) {
	        Object.keys(changes).forEach(function (propName) {
	            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} el
	     * @param {?} propName
	     * @param {?} value
	     * @return {?}
	     */
	    function setBindingDebugInfo(renderer, el, propName, value) {
	        try {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
	        }
	        catch (e) {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
	        }
	    }
	    var /** @type {?} */ CAMEL_CASE_REGEXP = /([A-Z])/g;
	    /**
	     * @param {?} input
	     * @return {?}
	     */
	    function camelCaseToDashCase(input) {
	        return input.replace(CAMEL_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return '-' + m[1].toLowerCase();
	        });
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} parentElement
	     * @param {?} name
	     * @param {?} attrs
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
	        var /** @type {?} */ el = renderer.createElement(parentElement, name, debugInfo);
	        for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
	        }
	        return el;
	    }
	    /**
	     * @param {?} renderer
	     * @param {?} elementName
	     * @param {?} attrs
	     * @param {?} rootSelectorOrNode
	     * @param {?=} debugInfo
	     * @return {?}
	     */
	    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
	        var /** @type {?} */ hostElement;
	        if (isPresent(rootSelectorOrNode)) {
	            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	            for (var /** @type {?} */ i = 0; i < attrs.length; i += 2) {
	                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
	            }
	            renderer.setElementAttribute(hostElement, 'ng-version', VERSION.full);
	        }
	        else {
	            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
	        }
	        return hostElement;
	    }
	    /**
	     * @param {?} view
	     * @param {?} element
	     * @param {?} eventNamesAndTargets
	     * @param {?} listener
	     * @return {?}
	     */
	    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
	        var /** @type {?} */ disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
	        for (var /** @type {?} */ i = 0; i < eventNamesAndTargets.length; i += 2) {
	            var /** @type {?} */ eventName = eventNamesAndTargets.get(i);
	            var /** @type {?} */ eventTarget = eventNamesAndTargets.get(i + 1);
	            var /** @type {?} */ disposable = void 0;
	            if (eventTarget) {
	                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
	            }
	            else {
	                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
	            }
	            disposables.set(i / 2, disposable);
	        }
	        return disposeInlineArray.bind(null, disposables);
	    }
	    /**
	     * @param {?} disposables
	     * @return {?}
	     */
	    function disposeInlineArray(disposables) {
	        for (var /** @type {?} */ i = 0; i < disposables.length; i++) {
	            disposables.get(i)();
	        }
	    }
	    /**
	     * @return {?}
	     */
	    function noop() { }
	    /**
	     * @param {?} length
	     * @return {?}
	     */
	    function createEmptyInlineArray(length) {
	        var /** @type {?} */ ctor;
	        if (length <= 2) {
	            ctor = InlineArray2;
	        }
	        else if (length <= 4) {
	            ctor = InlineArray4;
	        }
	        else if (length <= 8) {
	            ctor = InlineArray8;
	        }
	        else if (length <= 16) {
	            ctor = InlineArray16;
	        }
	        else {
	            ctor = InlineArrayDynamic;
	        }
	        return new ctor(length);
	    }
	    var InlineArray0 = (function () {
	        function InlineArray0() {
	            this.length = 0;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray0.prototype.get = function (index) { return undefined; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray0.prototype.set = function (index, value) { };
	        return InlineArray0;
	    }());
	    var InlineArray2 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         */
	        function InlineArray2(length, _v0, _v1) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray2.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray2.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	            }
	        };
	        return InlineArray2;
	    }());
	    var InlineArray4 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         */
	        function InlineArray4(length, _v0, _v1, _v2, _v3) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray4.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray4.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	            }
	        };
	        return InlineArray4;
	    }());
	    var InlineArray8 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         */
	        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray8.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray8.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	            }
	        };
	        return InlineArray8;
	    }());
	    var InlineArray16 = (function () {
	        /**
	         * @param {?} length
	         * @param {?=} _v0
	         * @param {?=} _v1
	         * @param {?=} _v2
	         * @param {?=} _v3
	         * @param {?=} _v4
	         * @param {?=} _v5
	         * @param {?=} _v6
	         * @param {?=} _v7
	         * @param {?=} _v8
	         * @param {?=} _v9
	         * @param {?=} _v10
	         * @param {?=} _v11
	         * @param {?=} _v12
	         * @param {?=} _v13
	         * @param {?=} _v14
	         * @param {?=} _v15
	         */
	        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	            this._v8 = _v8;
	            this._v9 = _v9;
	            this._v10 = _v10;
	            this._v11 = _v11;
	            this._v12 = _v12;
	            this._v13 = _v13;
	            this._v14 = _v14;
	            this._v15 = _v15;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArray16.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                case 8:
	                    return this._v8;
	                case 9:
	                    return this._v9;
	                case 10:
	                    return this._v10;
	                case 11:
	                    return this._v11;
	                case 12:
	                    return this._v12;
	                case 13:
	                    return this._v13;
	                case 14:
	                    return this._v14;
	                case 15:
	                    return this._v15;
	                default:
	                    return undefined;
	            }
	        };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArray16.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	                case 8:
	                    this._v8 = value;
	                    break;
	                case 9:
	                    this._v9 = value;
	                    break;
	                case 10:
	                    this._v10 = value;
	                    break;
	                case 11:
	                    this._v11 = value;
	                    break;
	                case 12:
	                    this._v12 = value;
	                    break;
	                case 13:
	                    this._v13 = value;
	                    break;
	                case 14:
	                    this._v14 = value;
	                    break;
	                case 15:
	                    this._v15 = value;
	                    break;
	            }
	        };
	        return InlineArray16;
	    }());
	    var InlineArrayDynamic = (function () {
	        /**
	         * @param {?} length
	         * @param {...?} values
	         */
	        function InlineArrayDynamic(length) {
	            var values = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                values[_i - 1] = arguments[_i];
	            }
	            this.length = length;
	            this._values = values;
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
	        /**
	         * @param {?} index
	         * @param {?} value
	         * @return {?}
	         */
	        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
	        return InlineArrayDynamic;
	    }());
	    var /** @type {?} */ EMPTY_INLINE_ARRAY = new InlineArray0();


	    var view_utils = Object.freeze({
	        ViewUtils: ViewUtils,
	        createRenderComponentType: createRenderComponentType,
	        addToArray: addToArray,
	        interpolate: interpolate,
	        inlineInterpolate: inlineInterpolate,
	        checkBinding: checkBinding,
	        castByValue: castByValue,
	        EMPTY_ARRAY: EMPTY_ARRAY,
	        EMPTY_MAP: EMPTY_MAP,
	        pureProxy1: pureProxy1,
	        pureProxy2: pureProxy2,
	        pureProxy3: pureProxy3,
	        pureProxy4: pureProxy4,
	        pureProxy5: pureProxy5,
	        pureProxy6: pureProxy6,
	        pureProxy7: pureProxy7,
	        pureProxy8: pureProxy8,
	        pureProxy9: pureProxy9,
	        pureProxy10: pureProxy10,
	        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	        setBindingDebugInfo: setBindingDebugInfo,
	        createRenderElement: createRenderElement,
	        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	        subscribeToRenderElement: subscribeToRenderElement,
	        noop: noop,
	        InlineArray2: InlineArray2,
	        InlineArray4: InlineArray4,
	        InlineArray8: InlineArray8,
	        InlineArray16: InlineArray16,
	        InlineArrayDynamic: InlineArrayDynamic,
	        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
	    });

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of a Component created via a {\@link ComponentFactory}.
	     *
	     * `ComponentRef` provides access to the Component Instance as well other objects related to this
	     * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
	     * method.
	     * \@stable
	     * @abstract
	     */
	    var ComponentRef = (function () {
	        function ComponentRef() {
	        }
	        Object.defineProperty(ComponentRef.prototype, "location", {
	            /**
	             * Location of the Host Element of this Component Instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "injector", {
	            /**
	             * The injector on which the component instance exists.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "instance", {
	            /**
	             * The instance of the Component.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "hostView", {
	            /**
	             * The {\@link ViewRef} of the Host View of this Component instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
	            /**
	             * The {\@link ChangeDetectorRef} of the Component instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "componentType", {
	            /**
	             * The component type.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Destroys the component instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ComponentRef.prototype.destroy = function () { };
	        /**
	         * Allows to register a callback that will be called when the component is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef.prototype.onDestroy = function (callback) { };
	        return ComponentRef;
	    }());
	    var ComponentRef_ = (function (_super) {
	        __extends$5(ComponentRef_, _super);
	        /**
	         * @param {?} _index
	         * @param {?} _parentView
	         * @param {?} _nativeElement
	         * @param {?} _component
	         */
	        function ComponentRef_(_index, _parentView, _nativeElement, _component) {
	            _super.call(this);
	            this._index = _index;
	            this._parentView = _parentView;
	            this._nativeElement = _nativeElement;
	            this._component = _component;
	        }
	        Object.defineProperty(ComponentRef_.prototype, "location", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.injector(this._index); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "instance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._component; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "hostView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (this._component.constructor); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	        return ComponentRef_;
	    }(ComponentRef));
	    /**
	     * \@stable
	     */
	    var ComponentFactory = (function () {
	        /**
	         * @param {?} selector
	         * @param {?} _viewClass
	         * @param {?} _componentType
	         */
	        function ComponentFactory(selector, _viewClass, _componentType) {
	            this.selector = selector;
	            this._viewClass = _viewClass;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentFactory.prototype, "componentType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Creates a new component.
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @param {?=} rootSelectorOrNode
	         * @return {?}
	         */
	        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	            var /** @type {?} */ vu = injector.get(ViewUtils);
	            if (!projectableNodes) {
	                projectableNodes = [];
	            }
	            var /** @type {?} */ hostView = new this._viewClass(vu, null, null, null);
	            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
	        };
	        return ComponentFactory;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var NoComponentFactoryError = (function (_super) {
	        __extends$8(NoComponentFactoryError, _super);
	        /**
	         * @param {?} component
	         */
	        function NoComponentFactoryError(component) {
	            _super.call(this, "No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
	            this.component = component;
	        }
	        return NoComponentFactoryError;
	    }(BaseError));
	    var _NullComponentFactoryResolver = (function () {
	        function _NullComponentFactoryResolver() {
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            throw new NoComponentFactoryError(component);
	        };
	        return _NullComponentFactoryResolver;
	    }());
	    /**
	     * \@stable
	     * @abstract
	     */
	    var ComponentFactoryResolver = (function () {
	        function ComponentFactoryResolver() {
	        }
	        /**
	         * @abstract
	         * @param {?} component
	         * @return {?}
	         */
	        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
	        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	        return ComponentFactoryResolver;
	    }());
	    var CodegenComponentFactoryResolver = (function () {
	        /**
	         * @param {?} factories
	         * @param {?} _parent
	         */
	        function CodegenComponentFactoryResolver(factories, _parent) {
	            this._parent = _parent;
	            this._factories = new Map();
	            for (var i = 0; i < factories.length; i++) {
	                var factory = factories[i];
	                this._factories.set(factory.componentType, factory);
	            }
	        }
	        /**
	         * @param {?} component
	         * @return {?}
	         */
	        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            var /** @type {?} */ result = this._factories.get(component);
	            if (!result) {
	                result = this._parent.resolveComponentFactory(component);
	            }
	            return result;
	        };
	        return CodegenComponentFactoryResolver;
	    }());

	    var /** @type {?} */ trace;
	    var /** @type {?} */ events;
	    /**
	     * @return {?}
	     */
	    function detectWTF() {
	        var /** @type {?} */ wtf = ((global$1) /** TODO #9100 */)['wtf'];
	        if (wtf) {
	            trace = wtf['trace'];
	            if (trace) {
	                events = trace['events'];
	                return true;
	            }
	        }
	        return false;
	    }
	    /**
	     * @param {?} signature
	     * @param {?=} flags
	     * @return {?}
	     */
	    function createScope(signature, flags) {
	        if (flags === void 0) { flags = null; }
	        return events.createScope(signature, flags);
	    }
	    /**
	     * @param {?} scope
	     * @param {?=} returnValue
	     * @return {?}
	     */
	    function leave(scope, returnValue) {
	        trace.leaveScope(scope, returnValue);
	        return returnValue;
	    }
	    /**
	     * @param {?} rangeType
	     * @param {?} action
	     * @return {?}
	     */
	    function startTimeRange(rangeType, action) {
	        return trace.beginTimeRange(rangeType, action);
	    }
	    /**
	     * @param {?} range
	     * @return {?}
	     */
	    function endTimeRange(range) {
	        trace.endTimeRange(range);
	    }

	    /**
	     * True if WTF is enabled.
	     */
	    var /** @type {?} */ wtfEnabled = detectWTF();
	    /**
	     * @param {?=} arg0
	     * @param {?=} arg1
	     * @return {?}
	     */
	    function noopScope(arg0, arg1) {
	        return null;
	    }
	    /**
	     * Create trace scope.
	     *
	     * Scopes must be strictly nested and are analogous to stack frames, but
	     * do not have to follow the stack frames. Instead it is recommended that they follow logical
	     * nesting. You may want to use
	     * [Event
	     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	     * as they are defined in WTF.
	     *
	     * Used to mark scope entry. The return value is used to leave the scope.
	     *
	     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	     *
	     *     someMethod() {
	     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	     *        // DO SOME WORK HERE
	     *        return wtfLeave(s, 123); // Return value 123
	     *     }
	     *
	     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	     * negatively impact the performance of your application. For this reason we recommend that
	     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	     * exception, will produce incorrect trace, but presence of exception signifies logic error which
	     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	     * an exception is expected during normal execution while profiling.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	    /**
	     * Used to mark end of Scope.
	     *
	     * - `scope` to end.
	     * - `returnValue` (optional) to be passed to the WTF.
	     *
	     * Returns the `returnValue for easy chaining.
	     * @experimental
	     */
	    var /** @type {?} */ wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	    /**
	     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	     * enabled.
	     *
	     *     someMethod() {
	     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	     *        var future = new Future.delay(5).then((_) {
	     *          wtfEndTimeRange(s);
	     *        });
	     *     }
	     * @experimental
	     */
	    var /** @type {?} */ wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	    /**
	     * Ends a async time range operation.
	     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	     * enabled.
	     * @experimental
	     */
	    var /** @type {?} */ wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

	    /**
	     * The Testability service provides testing hooks that can be accessed from
	     * the browser and by services such as Protractor. Each bootstrapped Angular
	     * application on the page will have an instance of Testability.
	     * \@experimental
	     */
	    var Testability = (function () {
	        /**
	         * @param {?} _ngZone
	         */
	        function Testability(_ngZone) {
	            this._ngZone = _ngZone;
	            /** @internal */
	            this._pendingCount = 0;
	            /** @internal */
	            this._isZoneStable = true;
	            /**
	             * Whether any work was done since the last 'whenStable' callback. This is
	             * useful to detect if this could have potentially destabilized another
	             * component while it is stabilizing.
	             * @internal
	             */
	            this._didWork = false;
	            /** @internal */
	            this._callbacks = [];
	            this._watchAngularEvents();
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        Testability.prototype._watchAngularEvents = function () {
	            var _this = this;
	            this._ngZone.onUnstable.subscribe({
	                next: function () {
	                    _this._didWork = true;
	                    _this._isZoneStable = false;
	                }
	            });
	            this._ngZone.runOutsideAngular(function () {
	                _this._ngZone.onStable.subscribe({
	                    next: function () {
	                        NgZone.assertNotInAngularZone();
	                        scheduleMicroTask(function () {
	                            _this._isZoneStable = true;
	                            _this._runCallbacksIfReady();
	                        });
	                    }
	                });
	            });
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.increasePendingRequestCount = function () {
	            this._pendingCount += 1;
	            this._didWork = true;
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.decreasePendingRequestCount = function () {
	            this._pendingCount -= 1;
	            if (this._pendingCount < 0) {
	                throw new Error('pending async requests below zero');
	            }
	            this._runCallbacksIfReady();
	            return this._pendingCount;
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.isStable = function () {
	            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	        };
	        /**
	         * \@internal
	         * @return {?}
	         */
	        Testability.prototype._runCallbacksIfReady = function () {
	            var _this = this;
	            if (this.isStable()) {
	                // Schedules the call backs in a new frame so that it is always async.
	                scheduleMicroTask(function () {
	                    while (_this._callbacks.length !== 0) {
	                        (_this._callbacks.pop())(_this._didWork);
	                    }
	                    _this._didWork = false;
	                });
	            }
	            else {
	                // Not Ready
	                this._didWork = true;
	            }
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        Testability.prototype.whenStable = function (callback) {
	            this._callbacks.push(callback);
	            this._runCallbacksIfReady();
	        };
	        /**
	         * @return {?}
	         */
	        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	        /**
	         * @deprecated use findProviders
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findBindings = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        /**
	         * @param {?} using
	         * @param {?} provider
	         * @param {?} exactMatch
	         * @return {?}
	         */
	        Testability.prototype.findProviders = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Testability.ctorParameters = function () { return [
	            { type: NgZone, },
	        ]; };
	        return Testability;
	    }());
	    /**
	     * A global registry of {\@link Testability} instances for specific elements.
	     * \@experimental
	     */
	    var TestabilityRegistry = (function () {
	        function TestabilityRegistry() {
	            /** @internal */
	            this._applications = new Map();
	            _testabilityGetter.addToWindow(this);
	        }
	        /**
	         * @param {?} token
	         * @param {?} testability
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	            this._applications.set(token, testability);
	        };
	        /**
	         * @param {?} elem
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	        /**
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	        /**
	         * @param {?} elem
	         * @param {?=} findInAncestors
	         * @return {?}
	         */
	        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	        };
	        TestabilityRegistry.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        TestabilityRegistry.ctorParameters = function () { return []; };
	        return TestabilityRegistry;
	    }());
	    var _NoopGetTestability = (function () {
	        function _NoopGetTestability() {
	        }
	        /**
	         * @param {?} registry
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.addToWindow = function (registry) { };
	        /**
	         * @param {?} registry
	         * @param {?} elem
	         * @param {?} findInAncestors
	         * @return {?}
	         */
	        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            return null;
	        };
	        return _NoopGetTestability;
	    }());
	    /**
	     * Set the {\@link GetTestability} implementation used by the Angular testing framework.
	     * \@experimental
	     * @param {?} getter
	     * @return {?}
	     */
	    function setTestabilityGetter(getter) {
	        _testabilityGetter = getter;
	    }
	    var /** @type {?} */ _testabilityGetter = new _NoopGetTestability();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _devMode = true;
	    var /** @type {?} */ _runModeLocked = false;
	    var /** @type {?} */ _platform;
	    /**
	     * Disable Angular's development mode, which turns off assertions and other
	     * checks within the framework.
	     *
	     * One important assertion this disables verifies that a change detection pass
	     * does not result in additional changes to any bindings (also known as
	     * unidirectional data flow).
	     *
	     * \@stable
	     * @return {?}
	     */
	    function enableProdMode() {
	        if (_runModeLocked) {
	            throw new Error('Cannot enable prod mode after platform setup.');
	        }
	        _devMode = false;
	    }
	    /**
	     * Returns whether Angular is in development mode. After called once,
	     * the value is locked and won't change any more.
	     *
	     * By default, this is true, unless a user calls `enableProdMode` before calling this.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function isDevMode() {
	        _runModeLocked = true;
	        return _devMode;
	    }
	    /**
	     * A token for third-party components that can register themselves with NgProbe.
	     *
	     * \@experimental
	     */
	    var NgProbeToken = (function () {
	        /**
	         * @param {?} name
	         * @param {?} token
	         */
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    /**
	     * Creates a platform.
	     * Platforms have to be eagerly created via this function.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} injector
	     * @return {?}
	     */
	    function createPlatform(injector) {
	        if (_platform && !_platform.destroyed) {
	            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	        }
	        _platform = injector.get(PlatformRef);
	        var /** @type {?} */ inits = (injector.get(PLATFORM_INITIALIZER, null));
	        if (inits)
	            inits.forEach(function (init) { return init(); });
	        return _platform;
	    }
	    /**
	     * Creates a factory for a platform
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} parentPlatformFactory
	     * @param {?} name
	     * @param {?=} providers
	     * @return {?}
	     */
	    function createPlatformFactory(parentPlatformFactory, name, providers) {
	        if (providers === void 0) { providers = []; }
	        var /** @type {?} */ marker = new OpaqueToken("Platform: " + name);
	        return function (extraProviders) {
	            if (extraProviders === void 0) { extraProviders = []; }
	            if (!getPlatform()) {
	                if (parentPlatformFactory) {
	                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	                }
	                else {
	                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	                }
	            }
	            return assertPlatform(marker);
	        };
	    }
	    /**
	     * Checks that there currently is a platform
	     * which contains the given token as a provider.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @param {?} requiredToken
	     * @return {?}
	     */
	    function assertPlatform(requiredToken) {
	        var /** @type {?} */ platform = getPlatform();
	        if (!platform) {
	            throw new Error('No platform exists!');
	        }
	        if (!platform.injector.get(requiredToken, null)) {
	            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	        }
	        return platform;
	    }
	    /**
	     * Destroy the existing platform.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function destroyPlatform() {
	        if (_platform && !_platform.destroyed) {
	            _platform.destroy();
	        }
	    }
	    /**
	     * Returns the current platform.
	     *
	     * \@experimental APIs related to application bootstrap are currently under review.
	     * @return {?}
	     */
	    function getPlatform() {
	        return _platform && !_platform.destroyed ? _platform : null;
	    }
	    /**
	     * The Angular platform is the entry point for Angular on a web page. Each page
	     * has exactly one platform, and services (such as reflection) which are common
	     * to every Angular application running on the page are bound in its scope.
	     *
	     * A page's platform is initialized implicitly when {\@link bootstrap}() is called, or
	     * explicitly by calling {\@link createPlatform}().
	     *
	     * \@stable
	     * @abstract
	     */
	    var PlatformRef = (function () {
	        function PlatformRef() {
	        }
	        /**
	         * Creates an instance of an `\@NgModule` for the given platform
	         * for offline compilation.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * my_module.ts:
	         *
	         * \@NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * main.ts:
	         * import {MyModuleNgFactory} from './my_module.ngfactory';
	         * import {platformBrowser} from '\@angular/platform-browser';
	         *
	         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	         * ```
	         *
	         * \@experimental APIs related to application bootstrap are currently under review.
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            throw unimplemented();
	        };
	        /**
	         * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * \@NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	         * ```
	         * \@stable
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            throw unimplemented();
	        };
	        /**
	         * Register a listener to be called when the platform is disposed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef.prototype.onDestroy = function (callback) { };
	        Object.defineProperty(PlatformRef.prototype, "injector", {
	            /**
	             * Retrieve the platform {\@link Injector}, which is the parent injector for
	             * every Angular application on the page and provides singleton providers.
	             * @return {?}
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         * Destroy the Angular platform and all Angular applications on the page.
	         * @abstract
	         * @return {?}
	         */
	        PlatformRef.prototype.destroy = function () { };
	        Object.defineProperty(PlatformRef.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformRef;
	    }());
	    /**
	     * @param {?} errorHandler
	     * @param {?} callback
	     * @return {?}
	     */
	    function _callAndReportToErrorHandler(errorHandler, callback) {
	        try {
	            var /** @type {?} */ result = callback();
	            if (isPromise(result)) {
	                return result.catch(function (e) {
	                    errorHandler.handleError(e);
	                    // rethrow as the exception handler might not do it
	                    throw e;
	                });
	            }
	            return result;
	        }
	        catch (e) {
	            errorHandler.handleError(e);
	            // rethrow as the exception handler might not do it
	            throw e;
	        }
	    }
	    var PlatformRef_ = (function (_super) {
	        __extends$3(PlatformRef_, _super);
	        /**
	         * @param {?} _injector
	         */
	        function PlatformRef_(_injector) {
	            _super.call(this);
	            this._injector = _injector;
	            this._modules = [];
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        Object.defineProperty(PlatformRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        PlatformRef_.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error('The platform has already been destroyed!');
	            }
	            this._modules.slice().forEach(function (module) { return module.destroy(); });
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	            this._destroyed = true;
	        };
	        /**
	         * @param {?} moduleFactory
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	        };
	        /**
	         * @param {?} moduleFactory
	         * @param {?} ngZone
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	            var _this = this;
	            // Note: We need to create the NgZone _before_ we instantiate the module,
	            // as instantiating the module creates some providers eagerly.
	            // So we create a mini parent injector that just contains the new NgZone and
	            // pass that as parent to the NgModuleFactory.
	            if (!ngZone)
	                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	            // Attention: Don't use ApplicationRef.run here,
	            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	            return ngZone.run(function () {
	                var /** @type {?} */ ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	                var /** @type {?} */ moduleRef = (moduleFactory.create(ngZoneInjector));
	                var /** @type {?} */ exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	                if (!exceptionHandler) {
	                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	                }
	                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	                return _callAndReportToErrorHandler(exceptionHandler, function () {
	                    var /** @type {?} */ initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                    return initStatus.donePromise.then(function () {
	                        _this._moduleDoBootstrap(moduleRef);
	                        return moduleRef;
	                    });
	                });
	            });
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @return {?}
	         */
	        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	        };
	        /**
	         * @param {?} moduleType
	         * @param {?=} compilerOptions
	         * @param {?} ngZone
	         * @param {?=} componentFactoryCallback
	         * @return {?}
	         */
	        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	            var _this = this;
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            var /** @type {?} */ compilerFactory = this.injector.get(CompilerFactory);
	            var /** @type {?} */ compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	            // ugly internal api hack: generate host component factories for all declared components and
	            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	            // factories.
	            if (componentFactoryCallback) {
	                return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                    .then(function (_a) {
	                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                    componentFactoryCallback(componentFactories);
	                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	                });
	            }
	            return compiler.compileModuleAsync(moduleType)
	                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	        };
	        /**
	         * @param {?} moduleRef
	         * @return {?}
	         */
	        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	            var /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);
	            if (moduleRef.bootstrapFactories.length > 0) {
	                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	            }
	            else if (moduleRef.instance.ngDoBootstrap) {
	                moduleRef.instance.ngDoBootstrap(appRef);
	            }
	            else {
	                throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                    "Please define one of these.");
	            }
	        };
	        PlatformRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        PlatformRef_.ctorParameters = function () { return [
	            { type: Injector, },
	        ]; };
	        return PlatformRef_;
	    }(PlatformRef));
	    /**
	     * A reference to an Angular application running on a page.
	     *
	     * For more about Angular applications, see the documentation for {\@link bootstrap}.
	     *
	     * \@stable
	     * @abstract
	     */
	    var ApplicationRef = (function () {
	        function ApplicationRef() {
	        }
	        /**
	         * Bootstrap a new component at the root level of the application.
	         *
	         * ### Bootstrap process
	         *
	         * When bootstrapping a new root component into an application, Angular mounts the
	         * specified application component onto DOM elements identified by the [componentType]'s
	         * selector and kicks off automatic change detection to finish initializing the component.
	         *
	         * ### Example
	         * {\@example core/ts/platform/platform.ts region='longform'}
	         * @abstract
	         * @param {?} componentFactory
	         * @return {?}
	         */
	        ApplicationRef.prototype.bootstrap = function (componentFactory) { };
	        /**
	         * Invoke this method to explicitly process change detection and its side-effects.
	         *
	         * In development mode, `tick()` also performs a second change detection cycle to ensure that no
	         * further changes are detected. If additional changes are picked up during this second cycle,
	         * bindings in the app have side-effects that cannot be resolved in a single change detection
	         * pass.
	         * In this case, Angular throws an error, since an Angular application can only have one change
	         * detection pass during which all change detection must complete.
	         * @abstract
	         * @return {?}
	         */
	        ApplicationRef.prototype.tick = function () { };
	        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	            /**
	             * Get a list of component types registered to this application.
	             * This list is populated even before the component is created.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ApplicationRef.prototype, "components", {
	            /**
	             * Get a list of components registered to this application.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         * Attaches a view so that it will be dirty checked.
	         * The view will be automatically detached when it is destroyed.
	         * This will throw if the view is already attached to a ViewContainer.
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.attachView = function (view) { unimplemented(); };
	        /**
	         * Detaches a view from dirty checking again.
	         * @param {?} view
	         * @return {?}
	         */
	        ApplicationRef.prototype.detachView = function (view) { unimplemented(); };
	        Object.defineProperty(ApplicationRef.prototype, "viewCount", {
	            /**
	             * Returns the number of attached views.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ApplicationRef;
	    }());
	    var ApplicationRef_ = (function (_super) {
	        __extends$3(ApplicationRef_, _super);
	        /**
	         * @param {?} _zone
	         * @param {?} _console
	         * @param {?} _injector
	         * @param {?} _exceptionHandler
	         * @param {?} _componentFactoryResolver
	         * @param {?} _initStatus
	         * @param {?} _testabilityRegistry
	         * @param {?} _testability
	         */
	        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	            var _this = this;
	            _super.call(this);
	            this._zone = _zone;
	            this._console = _console;
	            this._injector = _injector;
	            this._exceptionHandler = _exceptionHandler;
	            this._componentFactoryResolver = _componentFactoryResolver;
	            this._initStatus = _initStatus;
	            this._testabilityRegistry = _testabilityRegistry;
	            this._testability = _testability;
	            this._bootstrapListeners = [];
	            this._rootComponents = [];
	            this._rootComponentTypes = [];
	            this._views = [];
	            this._runningTick = false;
	            this._enforceNoNewChanges = false;
	            this._enforceNoNewChanges = isDevMode();
	            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        }
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.attachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            this._views.push(view);
	            view.attachToAppRef(this);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype.detachView = function (viewRef) {
	            var /** @type {?} */ view = ((viewRef)).internalView;
	            ListWrapper.remove(this._views, view);
	            view.detach();
	        };
	        /**
	         * @param {?} componentOrFactory
	         * @return {?}
	         */
	        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	            var _this = this;
	            if (!this._initStatus.done) {
	                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	            }
	            var /** @type {?} */ componentFactory;
	            if (componentOrFactory instanceof ComponentFactory) {
	                componentFactory = componentOrFactory;
	            }
	            else {
	                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	            }
	            this._rootComponentTypes.push(componentFactory.componentType);
	            var /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	            var /** @type {?} */ testability = compRef.injector.get(Testability, null);
	            if (testability) {
	                compRef.injector.get(TestabilityRegistry)
	                    .registerApplication(compRef.location.nativeElement, testability);
	            }
	            this._loadComponent(compRef);
	            if (isDevMode()) {
	                this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return compRef;
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._loadComponent = function (componentRef) {
	            this.attachView(componentRef.hostView);
	            this.tick();
	            this._rootComponents.push(componentRef);
	            // Get the listeners lazily to prevent DI cycles.
	            var /** @type {?} */ listeners = (this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	                .concat(this._bootstrapListeners));
	            listeners.forEach(function (listener) { return listener(componentRef); });
	        };
	        /**
	         * @param {?} componentRef
	         * @return {?}
	         */
	        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	            this.detachView(componentRef.hostView);
	            ListWrapper.remove(this._rootComponents, componentRef);
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.tick = function () {
	            if (this._runningTick) {
	                throw new Error('ApplicationRef.tick is called recursively');
	            }
	            var /** @type {?} */ scope = ApplicationRef_._tickScope();
	            try {
	                this._runningTick = true;
	                this._views.forEach(function (view) { return view.ref.detectChanges(); });
	                if (this._enforceNoNewChanges) {
	                    this._views.forEach(function (view) { return view.ref.checkNoChanges(); });
	                }
	            }
	            finally {
	                this._runningTick = false;
	                wtfLeave(scope);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ApplicationRef_.prototype.ngOnDestroy = function () {
	            // TODO(alxhub): Dispose of the NgZone.
	            this._views.slice().forEach(function (view) { return view.destroy(); });
	        };
	        Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._views.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponentTypes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "components", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._rootComponents; },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	        ApplicationRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationRef_.ctorParameters = function () { return [
	            { type: NgZone, },
	            { type: Console, },
	            { type: Injector, },
	            { type: ErrorHandler, },
	            { type: ComponentFactoryResolver, },
	            { type: ApplicationInitStatus, },
	            { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	            { type: Testability, decorators: [{ type: Optional },] },
	        ]; };
	        return ApplicationRef_;
	    }(ApplicationRef));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
	     *
	     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	     * NgModule Instance.
	     *
	     * \@stable
	     * @abstract
	     */
	    var NgModuleRef = (function () {
	        function NgModuleRef() {
	        }
	        Object.defineProperty(NgModuleRef.prototype, "injector", {
	            /**
	             * The injector that contains all of the providers of the NgModule.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
	            /**
	             * The ComponentFactoryResolver to get hold of the ComponentFactories
	             * declared in the `entryComponents` property of the module.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "instance", {
	            /**
	             * The NgModule instance.
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Destroys the module instance and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        NgModuleRef.prototype.destroy = function () { };
	        /**
	         * Allows to register a callback that will be called when the module is destroyed.
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleRef.prototype.onDestroy = function (callback) { };
	        return NgModuleRef;
	    }());
	    /**
	     * \@experimental
	     */
	    var NgModuleFactory = (function () {
	        /**
	         * @param {?} _injectorClass
	         * @param {?} _moduleType
	         */
	        function NgModuleFactory(_injectorClass, _moduleType) {
	            this._injectorClass = _injectorClass;
	            this._moduleType = _moduleType;
	        }
	        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._moduleType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentInjector
	         * @return {?}
	         */
	        NgModuleFactory.prototype.create = function (parentInjector) {
	            if (!parentInjector) {
	                parentInjector = Injector.NULL;
	            }
	            var /** @type {?} */ instance = new this._injectorClass(parentInjector);
	            instance.create();
	            return instance;
	        };
	        return NgModuleFactory;
	    }());
	    var /** @type {?} */ _UNDEFINED = new Object();
	    /**
	     * @abstract
	     */
	    var NgModuleInjector = (function (_super) {
	        __extends$9(NgModuleInjector, _super);
	        /**
	         * @param {?} parent
	         * @param {?} factories
	         * @param {?} bootstrapFactories
	         */
	        function NgModuleInjector(parent, factories, bootstrapFactories) {
	            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	            this.parent = parent;
	            this.bootstrapFactories = bootstrapFactories;
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.createInternal = function () { };
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            if (token === Injector || token === ComponentFactoryResolver) {
	                return this;
	            }
	            var /** @type {?} */ result = this.getInternal(token, _UNDEFINED);
	            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	        };
	        /**
	         * @abstract
	         * @param {?} token
	         * @param {?} notFoundValue
	         * @return {?}
	         */
	        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
	        Object.defineProperty(NgModuleInjector.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	            }
	            this._destroyed = true;
	            this.destroyInternal();
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        NgModuleInjector.prototype.destroyInternal = function () { };
	        return NgModuleInjector;
	    }(CodegenComponentFactoryResolver));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Used to load ng module factories.
	     * \@stable
	     * @abstract
	     */
	    var NgModuleFactoryLoader = (function () {
	        function NgModuleFactoryLoader() {
	        }
	        /**
	         * @abstract
	         * @param {?} path
	         * @return {?}
	         */
	        NgModuleFactoryLoader.prototype.load = function (path) { };
	        return NgModuleFactoryLoader;
	    }());
	    var /** @type {?} */ moduleFactories = new Map();
	    /**
	     * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	     * \@experimental
	     * @param {?} id
	     * @param {?} factory
	     * @return {?}
	     */
	    function registerModuleFactory(id, factory) {
	        var /** @type {?} */ existing = moduleFactories.get(id);
	        if (existing) {
	            throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	        }
	        moduleFactories.set(id, factory);
	    }
	    /**
	     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	     * cannot be found.
	     * \@experimental
	     * @param {?} id
	     * @return {?}
	     */
	    function getModuleFactory(id) {
	        var /** @type {?} */ factory = moduleFactories.get(id);
	        if (!factory)
	            throw new Error("No module with ID " + id + " loaded");
	        return factory;
	    }

	    /**
	     * An unmodifiable list of items that Angular keeps up to date when the state
	     * of the application changes.
	     *
	     * The type of object that {\@link Query} and {\@link ViewQueryMetadata} provide.
	     *
	     * Implements an iterable interface, therefore it can be used in both ES6
	     * javascript `for (var i of items)` loops as well as in Angular templates with
	     * `*ngFor="let i of myList"`.
	     *
	     * Changes can be observed by subscribing to the changes `Observable`.
	     *
	     * NOTE: In the future this class will implement an `Observable` interface.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	     * ```typescript
	     * \@Component({...})
	     * class Container {
	     *   \@ViewChildren(Item) items:QueryList<Item>;
	     * }
	     * ```
	     * \@stable
	     */
	    var QueryList = (function () {
	        function QueryList() {
	            this._dirty = true;
	            this._results = [];
	            this._emitter = new EventEmitter();
	        }
	        Object.defineProperty(QueryList.prototype, "changes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._emitter; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._results[this.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * See
	         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	        /**
	         * See
	         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.filter = function (fn) {
	            return this._results.filter(fn);
	        };
	        /**
	         * See
	         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	        /**
	         * See
	         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	         * @param {?} fn
	         * @param {?} init
	         * @return {?}
	         */
	        QueryList.prototype.reduce = function (fn, init) {
	            return this._results.reduce(fn, init);
	        };
	        /**
	         * See
	         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	        /**
	         * See
	         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	         * @param {?} fn
	         * @return {?}
	         */
	        QueryList.prototype.some = function (fn) {
	            return this._results.some(fn);
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toArray = function () { return this._results.slice(); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.toString = function () { return this._results.toString(); };
	        /**
	         * @param {?} res
	         * @return {?}
	         */
	        QueryList.prototype.reset = function (res) {
	            this._results = ListWrapper.flatten(res);
	            this._dirty = false;
	        };
	        /**
	         * @return {?}
	         */
	        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	        /**
	         * internal
	         * @return {?}
	         */
	        QueryList.prototype.setDirty = function () { this._dirty = true; };
	        Object.defineProperty(QueryList.prototype, "dirty", {
	            /**
	             * internal
	             * @return {?}
	             */
	            get: function () { return this._dirty; },
	            enumerable: true,
	            configurable: true
	        });
	        return QueryList;
	    }());

	    var /** @type {?} */ _SEPARATOR = '#';
	    var /** @type {?} */ FACTORY_CLASS_SUFFIX = 'NgFactory';
	    /**
	     * Configuration for SystemJsNgModuleLoader.
	     * token.
	     *
	     * \@experimental
	     * @abstract
	     */
	    var SystemJsNgModuleLoaderConfig = (function () {
	        function SystemJsNgModuleLoaderConfig() {
	        }
	        return SystemJsNgModuleLoaderConfig;
	    }());
	    var /** @type {?} */ DEFAULT_CONFIG = {
	        factoryPathPrefix: '',
	        factoryPathSuffix: '.ngfactory',
	    };
	    /**
	     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	     * \@experimental
	     */
	    var SystemJsNgModuleLoader = (function () {
	        /**
	         * @param {?} _compiler
	         * @param {?=} config
	         */
	        function SystemJsNgModuleLoader(_compiler, config) {
	            this._compiler = _compiler;
	            this._config = config || DEFAULT_CONFIG;
	        }
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.load = function (path) {
	            var /** @type {?} */ offlineMode = this._compiler instanceof Compiler;
	            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	            var _this = this;
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            if (exportName === undefined) {
	                exportName = 'default';
	            }
	            return System.import(module)
	                .then(function (module) { return module[exportName]; })
	                .then(function (type) { return checkNotEmpty(type, module, exportName); })
	                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	        };
	        /**
	         * @param {?} path
	         * @return {?}
	         */
	        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            var /** @type {?} */ factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	            if (exportName === undefined) {
	                exportName = 'default';
	                factoryClassSuffix = '';
	            }
	            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	                .then(function (module) { return module[exportName + factoryClassSuffix]; })
	                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	        };
	        SystemJsNgModuleLoader.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        SystemJsNgModuleLoader.ctorParameters = function () { return [
	            { type: Compiler, },
	            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	        ]; };
	        return SystemJsNgModuleLoader;
	    }());
	    /**
	     * @param {?} value
	     * @param {?} modulePath
	     * @param {?} exportName
	     * @return {?}
	     */
	    function checkNotEmpty(value, modulePath, exportName) {
	        if (!value) {
	            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	        }
	        return value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an Embedded Template that can be used to instantiate Embedded Views.
	     *
	     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	     * `TemplateRef` from a Component or a Directive via {\@link Query}.
	     *
	     * To instantiate Embedded Views based on a Template, use
	     * {\@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	     * View Container.
	     * \@stable
	     * @abstract
	     */
	    var TemplateRef = (function () {
	        function TemplateRef() {
	        }
	        Object.defineProperty(TemplateRef.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef.prototype.createEmbeddedView = function (context) { };
	        return TemplateRef;
	    }());
	    var TemplateRef_ = (function (_super) {
	        __extends$10(TemplateRef_, _super);
	        /**
	         * @param {?} _parentView
	         * @param {?} _nodeIndex
	         * @param {?} _nativeElement
	         */
	        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
	            _super.call(this);
	            this._parentView = _parentView;
	            this._nodeIndex = _nodeIndex;
	            this._nativeElement = _nativeElement;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        TemplateRef_.prototype.createEmbeddedView = function (context) {
	            var /** @type {?} */ view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
	            view.create(context || ({}));
	            return view.ref;
	        };
	        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef_;
	    }(TemplateRef));

	    /**
	     * Represents a container where one or more Views can be attached.
	     *
	     * The container can contain two kinds of Views. Host Views, created by instantiating a
	     * {\@link Component} via {\@link #createComponent}, and Embedded Views, created by instantiating an
	     * {\@link TemplateRef Embedded Template} via {\@link #createEmbeddedView}.
	     *
	     * The location of the View Container within the containing View is specified by the Anchor
	     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	     * have a single View Container.
	     *
	     * Root elements of Views attached to this container become siblings of the Anchor Element in
	     * the Rendered View.
	     *
	     * To access a `ViewContainerRef` of an Element, you can either place a {\@link Directive} injected
	     * with `ViewContainerRef` on the Element, or you obtain it via a {\@link ViewChild} query.
	     * \@stable
	     * @abstract
	     */
	    var ViewContainerRef = (function () {
	        function ViewContainerRef() {
	        }
	        Object.defineProperty(ViewContainerRef.prototype, "element", {
	            /**
	             * Anchor element that specifies the location of this container in the containing View.
	             * <!-- TODO: rename to anchorElement -->
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Destroys all Views in this container.
	         * @abstract
	         * @return {?}
	         */
	        ViewContainerRef.prototype.clear = function () { };
	        /**
	         * Returns the {\@link ViewRef} for the View located in this container at the specified index.
	         * @abstract
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.get = function (index) { };
	        Object.defineProperty(ViewContainerRef.prototype, "length", {
	            /**
	             * Returns the number of Views currently attached to this container.
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        /**
	         * Instantiates an Embedded View based on the {\@link TemplateRef `templateRef`} and inserts it
	         * into this container at the specified `index`.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * Returns the {\@link ViewRef} for the newly created View.
	         * @abstract
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
	        /**
	         * Instantiates a single {\@link Component} and inserts its Host View into this container at the
	         * specified `index`.
	         *
	         * The component is instantiated using its {\@link ComponentFactory} which can be
	         * obtained via {\@link ComponentFactoryResolver#resolveComponentFactory}.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * You can optionally specify the {\@link Injector} that will be used as parent for the Component.
	         *
	         * Returns the {\@link ComponentRef} of the Host View created for the newly instantiated Component.
	         * @abstract
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) { };
	        /**
	         * Inserts a View identified by a {\@link ViewRef} into the container at the specified `index`.
	         *
	         * If `index` is not specified, the new View will be inserted as the last View in the container.
	         *
	         * Returns the inserted {\@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.insert = function (viewRef, index) { };
	        /**
	         * Moves a View identified by a {\@link ViewRef} into the container at the specified `index`.
	         *
	         * Returns the inserted {\@link ViewRef}.
	         * @abstract
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
	        /**
	         * Returns the index of the View, specified via {\@link ViewRef}, within the current container or
	         * `-1` if this container doesn't contain the View.
	         * @abstract
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef.prototype.indexOf = function (viewRef) { };
	        /**
	         * Destroys a View attached to this container at the specified `index`.
	         *
	         * If `index` is not specified, the last View in the container will be removed.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.remove = function (index) { };
	        /**
	         * Use along with {\@link #insert} to move a View within the current container.
	         *
	         * If the `index` param is omitted, the last {\@link ViewRef} is detached.
	         * @abstract
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef.prototype.detach = function (index) { };
	        return ViewContainerRef;
	    }());
	    var ViewContainerRef_ = (function () {
	        /**
	         * @param {?} _element
	         */
	        function ViewContainerRef_(_element) {
	            this._element = _element;
	            /** @internal */
	            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
	            /** @internal */
	            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
	            /** @internal */
	            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
	            /** @internal */
	            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
	        }
	        /**
	         * @param {?} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	        Object.defineProperty(ViewContainerRef_.prototype, "length", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ views = this._element.nestedViews;
	                return isPresent(views) ? views.length : 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "element", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._element.parentInjector; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} templateRef
	         * @param {?=} context
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	            if (context === void 0) { context = null; }
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ viewRef = templateRef.createEmbeddedView(context);
	            this.insert(viewRef, index);
	            return viewRef;
	        };
	        /**
	         * @param {?} componentFactory
	         * @param {?=} index
	         * @param {?=} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
	            if (index === void 0) { index = -1; }
	            if (injector === void 0) { injector = null; }
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            var /** @type {?} */ s = this._createComponentInContainerScope();
	            var /** @type {?} */ contextInjector = injector || this._element.parentInjector;
	            var /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);
	            this.insert(componentRef.hostView, index);
	            return wtfLeave(s, componentRef);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.insert = function (viewRef, index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._insertScope();
	            if (index == -1)
	                index = this.length;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.attachView(viewRef_.internalView, index);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	            var /** @type {?} */ s = this._insertScope();
	            if (currentIndex == -1)
	                return;
	            var /** @type {?} */ viewRef_ = (viewRef);
	            this._element.moveView(viewRef_.internalView, currentIndex);
	            return wtfLeave(s, viewRef_);
	        };
	        /**
	         * @param {?} viewRef
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.indexOf = function (viewRef) {
	            return this._element.nestedViews.indexOf(((viewRef)).internalView);
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.remove = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._removeScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            view.destroy();
	            // view is intentionally not returned to the client.
	            wtfLeave(s);
	        };
	        /**
	         * @param {?=} index
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.detach = function (index) {
	            if (index === void 0) { index = -1; }
	            var /** @type {?} */ s = this._detachScope();
	            if (index == -1)
	                index = this.length - 1;
	            var /** @type {?} */ view = this._element.detachView(index);
	            return wtfLeave(s, view.ref);
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainerRef_.prototype.clear = function () {
	            for (var /** @type {?} */ i = this.length - 1; i >= 0; i--) {
	                this.remove(i);
	            }
	        };
	        return ViewContainerRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     * @abstract
	     */
	    var ViewRef = (function (_super) {
	        __extends$11(ViewRef, _super);
	        function ViewRef() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * Destroys the view and all of the data structures associated with it.
	         * @abstract
	         * @return {?}
	         */
	        ViewRef.prototype.destroy = function () { };
	        Object.defineProperty(ViewRef.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef.prototype.onDestroy = function (callback) { };
	        return ViewRef;
	    }(ChangeDetectorRef));
	    /**
	     * Represents an Angular View.
	     *
	     * <!-- TODO: move the next two paragraphs to the dev guide -->
	     * A View is a fundamental building block of the application UI. It is the smallest grouping of
	     * Elements which are created and destroyed together.
	     *
	     * Properties of elements in a View can change, but the structure (number and order) of elements in
	     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	     * removing nested Views via a {\@link ViewContainerRef}. Each View can contain many View Containers.
	     * <!-- /TODO -->
	     *
	     * ### Example
	     *
	     * Given this template...
	     *
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <li *ngFor="let  item of items">{{item}}</li>
	     * </ul>
	     * ```
	     *
	     * We have two {\@link TemplateRef}s:
	     *
	     * Outer {\@link TemplateRef}:
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <template ngFor let-item [ngForOf]="items"></template>
	     * </ul>
	     * ```
	     *
	     * Inner {\@link TemplateRef}:
	     * ```
	     *   <li>{{item}}</li>
	     * ```
	     *
	     * Notice that the original template is broken down into two separate {\@link TemplateRef}s.
	     *
	     * The outer/inner {\@link TemplateRef}s are then assembled into views like so:
	     *
	     * ```
	     * <!-- ViewRef: outer-0 -->
	     * Count: 2
	     * <ul>
	     *   <template view-container-ref></template>
	     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	     * </ul>
	     * <!-- /ViewRef: outer-0 -->
	     * ```
	     * \@experimental
	     * @abstract
	     */
	    var EmbeddedViewRef = (function (_super) {
	        __extends$11(EmbeddedViewRef, _super);
	        function EmbeddedViewRef() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return (unimplemented()); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return EmbeddedViewRef;
	    }(ViewRef));
	    var ViewRef_ = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} animationQueue
	         */
	        function ViewRef_(_view, animationQueue) {
	            this._view = _view;
	            this.animationQueue = animationQueue;
	            this._view = _view;
	            this._originalMode = this._view.cdMode;
	        }
	        Object.defineProperty(ViewRef_.prototype, "internalView", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.flatRootNodes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.detectChanges = function () {
	            this._view.detectChanges(false);
	            this.animationQueue.flush();
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.reattach = function () {
	            this._view.cdMode = this._originalMode;
	            this.markForCheck();
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewRef_.prototype.onDestroy = function (callback) {
	            if (!this._view.disposables) {
	                this._view.disposables = [];
	            }
	            this._view.disposables.push(callback);
	        };
	        /**
	         * @return {?}
	         */
	        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
	        return ViewRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EventListener = (function () {
	        /**
	         * @param {?} name
	         * @param {?} callback
	         */
	        function EventListener(name, callback) {
	            this.name = name;
	            this.callback = callback;
	        }
	        ;
	        return EventListener;
	    }());
	    /**
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var DebugNode = (function () {
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugNode(nativeNode, parent, _debugInfo) {
	            this._debugInfo = _debugInfo;
	            this.nativeNode = nativeNode;
	            if (parent && parent instanceof DebugElement) {
	                parent.addChild(this);
	            }
	            else {
	                this.parent = null;
	            }
	            this.listeners = [];
	        }
	        Object.defineProperty(DebugNode.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "componentInstance", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.component : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.context : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._debugInfo ? this._debugInfo.references : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._debugInfo ? this._debugInfo.source : null; },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugNode;
	    }());
	    /**
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var DebugElement = (function (_super) {
	        __extends$12(DebugElement, _super);
	        /**
	         * @param {?} nativeNode
	         * @param {?} parent
	         * @param {?} _debugInfo
	         */
	        function DebugElement(nativeNode, parent, _debugInfo) {
	            _super.call(this, nativeNode, parent, _debugInfo);
	            this.properties = {};
	            this.attributes = {};
	            this.classes = {};
	            this.styles = {};
	            this.childNodes = [];
	            this.nativeElement = nativeNode;
	        }
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.addChild = function (child) {
	            if (child) {
	                this.childNodes.push(child);
	                child.parent = this;
	            }
	        };
	        /**
	         * @param {?} child
	         * @return {?}
	         */
	        DebugElement.prototype.removeChild = function (child) {
	            var /** @type {?} */ childIndex = this.childNodes.indexOf(child);
	            if (childIndex !== -1) {
	                child.parent = null;
	                this.childNodes.splice(childIndex, 1);
	            }
	        };
	        /**
	         * @param {?} child
	         * @param {?} newChildren
	         * @return {?}
	         */
	        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	            var /** @type {?} */ siblingIndex = this.childNodes.indexOf(child);
	            if (siblingIndex !== -1) {
	                var /** @type {?} */ previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	                var /** @type {?} */ nextChildren = this.childNodes.slice(siblingIndex + 1);
	                this.childNodes = previousChildren.concat(newChildren, nextChildren);
	                for (var /** @type {?} */ i = 0; i < newChildren.length; ++i) {
	                    var /** @type {?} */ newChild = newChildren[i];
	                    if (newChild.parent) {
	                        newChild.parent.removeChild(newChild);
	                    }
	                    newChild.parent = this;
	                }
	            }
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.query = function (predicate) {
	            var /** @type {?} */ results = this.queryAll(predicate);
	            return results[0] || null;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAll = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryElementChildren(this, predicate, matches);
	            return matches;
	        };
	        /**
	         * @param {?} predicate
	         * @return {?}
	         */
	        DebugElement.prototype.queryAllNodes = function (predicate) {
	            var /** @type {?} */ matches = [];
	            _queryNodeChildren(this, predicate, matches);
	            return matches;
	        };
	        Object.defineProperty(DebugElement.prototype, "children", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} eventName
	         * @param {?} eventObj
	         * @return {?}
	         */
	        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	            this.listeners.forEach(function (listener) {
	                if (listener.name == eventName) {
	                    listener.callback(eventObj);
	                }
	            });
	        };
	        return DebugElement;
	    }(DebugNode));
	    /**
	     * \@experimental
	     * @param {?} debugEls
	     * @return {?}
	     */
	    function asNativeElements(debugEls) {
	        return debugEls.map(function (el) { return el.nativeElement; });
	    }
	    /**
	     * @param {?} element
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryElementChildren(element, predicate, matches) {
	        element.childNodes.forEach(function (node) {
	            if (node instanceof DebugElement) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                _queryElementChildren(node, predicate, matches);
	            }
	        });
	    }
	    /**
	     * @param {?} parentNode
	     * @param {?} predicate
	     * @param {?} matches
	     * @return {?}
	     */
	    function _queryNodeChildren(parentNode, predicate, matches) {
	        if (parentNode instanceof DebugElement) {
	            parentNode.childNodes.forEach(function (node) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                if (node instanceof DebugElement) {
	                    _queryNodeChildren(node, predicate, matches);
	                }
	            });
	        }
	    }
	    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
	    var /** @type {?} */ _nativeNodeToDebugNode = new Map();
	    /**
	     * \@experimental
	     * @param {?} nativeNode
	     * @return {?}
	     */
	    function getDebugNode(nativeNode) {
	        return _nativeNodeToDebugNode.get(nativeNode);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function indexDebugNode(node) {
	        _nativeNodeToDebugNode.set(node.nativeNode, node);
	    }
	    /**
	     * @param {?} node
	     * @return {?}
	     */
	    function removeDebugNodeFromIndex(node) {
	        _nativeNodeToDebugNode.delete(node.nativeNode);
	    }

	    /**
	     * @return {?}
	     */
	    function _reflector() {
	        return reflector;
	    }
	    var /** @type {?} */ _CORE_PLATFORM_PROVIDERS = [
	        PlatformRef_,
	        { provide: PlatformRef, useExisting: PlatformRef_ },
	        { provide: Reflector, useFactory: _reflector, deps: [] },
	        { provide: ReflectorReader, useExisting: Reflector },
	        TestabilityRegistry,
	        Console,
	    ];
	    /**
	     * This platform has to be included in any other platform
	     *
	     * @experimental
	     */
	    var /** @type {?} */ platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ LOCALE_ID = new OpaqueToken('LocaleId');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS = new OpaqueToken('Translations');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var /** @type {?} */ TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');

	    /**
	     * @return {?}
	     */
	    function _iterableDiffersFactory() {
	        return defaultIterableDiffers;
	    }
	    /**
	     * @return {?}
	     */
	    function _keyValueDiffersFactory() {
	        return defaultKeyValueDiffers;
	    }
	    /**
	     * @param {?=} locale
	     * @return {?}
	     */
	    function _localeFactory(locale) {
	        return locale || 'en-US';
	    }
	    /**
	     * This module includes the providers of \@angular/core that are needed
	     * to bootstrap components via `ApplicationRef`.
	     *
	     * \@experimental
	     */
	    var ApplicationModule = (function () {
	        function ApplicationModule() {
	        }
	        ApplicationModule.decorators = [
	            { type: NgModule, args: [{
	                        providers: [
	                            ApplicationRef_,
	                            { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                            ApplicationInitStatus,
	                            Compiler,
	                            APP_ID_RANDOM_PROVIDER,
	                            ViewUtils,
	                            AnimationQueue,
	                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                            {
	                                provide: LOCALE_ID,
	                                useFactory: _localeFactory,
	                                deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
	                            },
	                        ]
	                    },] },
	        ];
	        /** @nocollapse */
	        ApplicationModule.ctorParameters = function () { return []; };
	        return ApplicationModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
	    var /** @type {?} */ ANY_STATE = '*';
	    var /** @type {?} */ DEFAULT_STATE = '*';
	    var /** @type {?} */ EMPTY_STATE = 'void';

	    var AnimationGroupPlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationGroupPlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            var count = 0;
	            var total = this._players.length;
	            if (total == 0) {
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else {
	                this._players.forEach(function (player) {
	                    player.parentPlayer = _this;
	                    player.onDone(function () {
	                        if (++count >= total) {
	                            _this._onFinish();
	                        }
	                    });
	                });
	            }
	        }
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._players.forEach(function (player) { return player.play(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.setPosition = function (p) {
	            this._players.forEach(function (player) { player.setPosition(p); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationGroupPlayer.prototype.getPosition = function () {
	            var /** @type {?} */ min = 0;
	            this._players.forEach(function (player) {
	                var /** @type {?} */ p = player.getPosition();
	                min = Math.min(p, min);
	            });
	            return min;
	        };
	        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupPlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * `AnimationKeyframe` consists of a series of styles (contained within {\@link AnimationStyles
	     * `AnimationStyles`})
	     * and an offset value indicating when those styles are applied within the `duration/delay/easing`
	     * timings.
	     * `AnimationKeyframe` is mostly an internal class which is designed to be used alongside {\@link
	     * Renderer#animate-anchor `Renderer.animate`}.
	     *
	     * \@experimental Animation support is experimental
	     */
	    var AnimationKeyframe = (function () {
	        /**
	         * @param {?} offset
	         * @param {?} styles
	         */
	        function AnimationKeyframe(offset, styles) {
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return AnimationKeyframe;
	    }());

	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationPlayer = (function () {
	        function AnimationPlayer() {
	        }
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onDone = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationPlayer.prototype.onStart = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.init = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.hasStarted = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.play = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.pause = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.restart = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.finish = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.reset = function () { };
	        /**
	         * @abstract
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        AnimationPlayer.prototype.getPosition = function () { };
	        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            /**
	             * @param {?} player
	             * @return {?}
	             */
	            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationPlayer;
	    }());
	    var NoOpAnimationPlayer = (function () {
	        function NoOpAnimationPlayer() {
	            var _this = this;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._started = false;
	            this.parentPlayer = null;
	            scheduleMicroTask(function () { return _this._onFinish(); });
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype._onFinish = function () {
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.init = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.play = function () {
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	            }
	            this._started = true;
	        };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.pause = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.restart = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.destroy = function () { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.reset = function () { };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.setPosition = function (p) { };
	        /**
	         * @return {?}
	         */
	        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
	        return NoOpAnimationPlayer;
	    }());

	    var AnimationSequencePlayer = (function () {
	        /**
	         * @param {?} _players
	         */
	        function AnimationSequencePlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._currentIndex = 0;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._players.forEach(function (player) { player.parentPlayer = _this; });
	            this._onNext(false);
	        }
	        /**
	         * @param {?} start
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onNext = function (start) {
	            var _this = this;
	            if (this._finished)
	                return;
	            if (this._players.length == 0) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else if (this._currentIndex >= this._players.length) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                this._onFinish();
	            }
	            else {
	                var /** @type {?} */ player = this._players[this._currentIndex++];
	                player.onDone(function () { return _this._onNext(true); });
	                this._activePlayer = player;
	                if (start) {
	                    player.play();
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._activePlayer.play();
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.restart = function () {
	            this.reset();
	            if (this._players.length > 0) {
	                this._players[0].restart();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	                this._activePlayer = new NoOpAnimationPlayer();
	            }
	        };
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
	        /**
	         * @return {?}
	         */
	        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
	        Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequencePlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var /** @type {?} */ AUTO_STYLE = '*';
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link trigger trigger
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationEntryMetadata = (function () {
	        /**
	         * @param {?} name
	         * @param {?} definitions
	         */
	        function AnimationEntryMetadata(name, definitions) {
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return AnimationEntryMetadata;
	    }());
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationStateMetadata = (function () {
	        function AnimationStateMetadata() {
	        }
	        return AnimationStateMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link state state animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStateDeclarationMetadata = (function (_super) {
	        __extends$13(AnimationStateDeclarationMetadata, _super);
	        /**
	         * @param {?} stateNameExpr
	         * @param {?} styles
	         */
	        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return AnimationStateDeclarationMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the
	     * {\@link transition transition animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStateTransitionMetadata = (function (_super) {
	        __extends$13(AnimationStateTransitionMetadata, _super);
	        /**
	         * @param {?} stateChangeExpr
	         * @param {?} steps
	         */
	        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return AnimationStateTransitionMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationMetadata = (function () {
	        function AnimationMetadata() {
	        }
	        return AnimationMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link keyframes keyframes
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$13(AnimationKeyframesSequenceMetadata, _super);
	        /**
	         * @param {?} steps
	         */
	        function AnimationKeyframesSequenceMetadata(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationKeyframesSequenceMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link style style animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationStyleMetadata = (function (_super) {
	        __extends$13(AnimationStyleMetadata, _super);
	        /**
	         * @param {?} styles
	         * @param {?=} offset
	         */
	        function AnimationStyleMetadata(styles, offset) {
	            if (offset === void 0) { offset = null; }
	            _super.call(this);
	            this.styles = styles;
	            this.offset = offset;
	        }
	        return AnimationStyleMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link animate animate
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationAnimateMetadata = (function (_super) {
	        __extends$13(AnimationAnimateMetadata, _super);
	        /**
	         * @param {?} timings
	         * @param {?} styles
	         */
	        function AnimationAnimateMetadata(timings, styles) {
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return AnimationAnimateMetadata;
	    }(AnimationMetadata));
	    /**
	     * \@experimental Animation support is experimental.
	     * @abstract
	     */
	    var AnimationWithStepsMetadata = (function (_super) {
	        __extends$13(AnimationWithStepsMetadata, _super);
	        function AnimationWithStepsMetadata() {
	            _super.call(this);
	        }
	        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationWithStepsMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link sequence sequence
	     * animation function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationSequenceMetadata = (function (_super) {
	        __extends$13(AnimationSequenceMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationSequenceMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequenceMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {\@link group group animation
	     * function} is called.
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationGroupMetadata = (function (_super) {
	        __extends$13(AnimationGroupMetadata, _super);
	        /**
	         * @param {?} _steps
	         */
	        function AnimationGroupMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `animate` specifies an animation step that will apply the provided `styles` data for a given
	     * amount of
	     * time based on the provided `timing` expression value. Calls to `animate` are expected to be
	     * used within {\@link sequence an animation sequence}, {\@link group group}, or {\@link transition
	     * transition}.
	     *
	     * ### Usage
	     *
	     * The `animate` function accepts two input parameters: `timing` and `styles`:
	     *
	     * - `timing` is a string based value that can be a combination of a duration with optional
	     * delay and easing values. The format for the expression breaks down to `duration delay easing`
	     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	     * delay=100, easing=ease-out`.
	     * If a numeric value is provided then that will be used as the `duration` value in millisecond
	     * form.
	     * - `styles` is the style input data which can either be a call to {\@link style style} or {\@link
	     * keyframes keyframes}.
	     * If left empty then the styles from the destination state will be collected and used (this is
	     * useful when
	     * describing an animation step that will complete an animation by {\@link
	     * transition#the-final-animate-call animating to the final state}).
	     *
	     * ```typescript
	     * // various functions for specifying timing data
	     * animate(500, style(...))
	     * animate("1s", style(...))
	     * animate("100ms 0.5s", style(...))
	     * animate("5s ease", style(...))
	     * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	     *
	     * // either style() of keyframes() can be used
	     * animate(500, style({ background: "red" }))
	     * animate(500, keyframes([
	     *   style({ background: "blue" })),
	     *   style({ background: "red" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} timing
	     * @param {?=} styles
	     * @return {?}
	     */
	    function animate(timing, styles) {
	        if (styles === void 0) { styles = null; }
	        var /** @type {?} */ stylesEntry = styles;
	        if (!isPresent(stylesEntry)) {
	            var /** @type {?} */ EMPTY_STYLE = {};
	            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
	        }
	        return new AnimationAnimateMetadata(timing, stylesEntry);
	    }
	    /**
	     * `group` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
	     * are useful when a series of styles must be animated/closed off
	     * at different statrting/ending times.
	     *
	     * The `group` function can either be used within a {\@link sequence sequence} or a {\@link transition
	     * transition}
	     * and it will only continue to the next instruction once all of the inner animation steps
	     * have completed.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `group` animation function can either consist
	     * of {\@link style style} or {\@link animate animate} function calls. Each call to `style()` or
	     * `animate()`
	     * within a group will be executed instantly (use {\@link keyframes keyframes} or a
	     * {\@link animate#usage animate() with a delay value} to offset styles to be applied at a later
	     * time).
	     *
	     * ```typescript
	     * group([
	     *   animate("1s", { background: "black" }))
	     *   animate("2s", { color: "white" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function group(steps) {
	        return new AnimationGroupMetadata(steps);
	    }
	    /**
	     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
	     * by default when an array is passed as animation data into {\@link transition transition}.)
	     *
	     * The `sequence` function can either be used within a {\@link group group} or a {\@link transition
	     * transition}
	     * and it will only continue to the next instruction once each of the inner animation steps
	     * have completed.
	     *
	     * To perform animation styling in parallel with other animation steps then
	     * have a look at the {\@link group group} animation function.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `sequence` animation function can either consist
	     * of {\@link style style} or {\@link animate animate} function calls. A call to `style()` will apply
	     * the
	     * provided styling data immediately while a call to `animate()` will apply its styling
	     * data over a given time depending on its timing data.
	     *
	     * ```typescript
	     * sequence([
	     *   style({ opacity: 0 })),
	     *   animate("1s", { opacity: 1 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function sequence(steps) {
	        return new AnimationSequenceMetadata(steps);
	    }
	    /**
	     * `style` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `style` declares a key/value object containing CSS properties/styles that can then
	     * be used for {\@link state animation states}, within an {\@link sequence animation sequence}, or as
	     * styling data for both {\@link animate animate} and {\@link keyframes keyframes}.
	     *
	     * ### Usage
	     *
	     * `style` takes in a key/value string map as data and expects one or more CSS property/value
	     * pairs to be defined.
	     *
	     * ```typescript
	     * // string values are used for css properties
	     * style({ background: "red", color: "blue" })
	     *
	     * // numerical (pixel) values are also supported
	     * style({ width: 100, height: 0 })
	     * ```
	     *
	     * #### Auto-styles (using `*`)
	     *
	     * When an asterix (`*`) character is used as a value then it will be detected from the element
	     * being animated
	     * and applied as animation data when the animation starts.
	     *
	     * This feature proves useful for a state depending on layout and/or environment factors; in such
	     * cases
	     * the styles are calculated just before the animation starts.
	     *
	     * ```typescript
	     * // the steps below will animate from 0 to the
	     * // actual height of the element
	     * style({ height: 0 }),
	     * animate("1s", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} tokens
	     * @return {?}
	     */
	    function style(tokens) {
	        var /** @type {?} */ input;
	        var /** @type {?} */ offset = null;
	        if (typeof tokens === 'string') {
	            input = [(tokens)];
	        }
	        else {
	            if (Array.isArray(tokens)) {
	                input = (tokens);
	            }
	            else {
	                input = [(tokens)];
	            }
	            input.forEach(function (entry) {
	                var /** @type {?} */ entryOffset = ((entry) /** TODO #9100 */)['offset'];
	                if (isPresent(entryOffset)) {
	                    offset = offset == null ? parseFloat(entryOffset) : offset;
	                }
	            });
	        }
	        return new AnimationStyleMetadata(input, offset);
	    }
	    /**
	     * `state` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `state` declares an animation state within the given trigger. When a state is
	     * active within a component then its associated styles will persist on
	     * the element that the trigger is attached to (even when the animation ends).
	     *
	     * To animate between states, have a look at the animation {\@link transition transition}
	     * DSL function. To register states to an animation trigger please have a look
	     * at the {\@link trigger trigger} function.
	     *
	     * #### The `void` state
	     *
	     * The `void` state value is a reserved word that angular uses to determine when the element is not
	     * apart
	     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	     * associated element
	     * is void).
	     *
	     * #### The `*` (default) state
	     *
	     * The `*` state (when styled) is a fallback state that will be used if
	     * the state that is being animated is not declared within the trigger.
	     *
	     * ### Usage
	     *
	     * `state` will declare an animation state with its associated styles
	     * within the given trigger.
	     *
	     * - `stateNameExpr` can be one or more state names separated by commas.
	     * - `styles` refers to the {\@link style styling data} that will be persisted on the element once
	     * the state
	     * has been reached.
	     *
	     * ```typescript
	     * // "void" is a reserved name for a state and is used to represent
	     * // the state in which an element is detached from from the application.
	     * state("void", style({ height: 0 }))
	     *
	     * // user-defined states
	     * state("closed", style({ height: 0 }))
	     * state("open, visible", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} stateNameExpr
	     * @param {?} styles
	     * @return {?}
	     */
	    function state(stateNameExpr, styles) {
	        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
	    }
	    /**
	     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `keyframes` specifies a collection of {\@link style style} entries each optionally characterized
	     * by an `offset` value.
	     *
	     * ### Usage
	     *
	     * The `keyframes` animation function is designed to be used alongside the {\@link animate animate}
	     * animation function. Instead of applying animations from where they are
	     * currently to their destination, keyframes can describe how each style entry is applied
	     * and at what point within the animation arc (much like CSS Keyframe Animations do).
	     *
	     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
	     * what percentage of the animate time the styles will be applied.
	     *
	     * ```typescript
	     * // the provided offset values describe when each backgroundColor value is applied.
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red", offset: 0 }),
	     *   style({ backgroundColor: "blue", offset: 0.2 }),
	     *   style({ backgroundColor: "orange", offset: 0.3 }),
	     *   style({ backgroundColor: "black", offset: 1 })
	     * ]))
	     * ```
	     *
	     * Alternatively, if there are no `offset` values used within the style entries then the offsets
	     * will
	     * be calculated automatically.
	     *
	     * ```typescript
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red" }) // offset = 0
	     *   style({ backgroundColor: "blue" }) // offset = 0.33
	     *   style({ backgroundColor: "orange" }) // offset = 0.66
	     *   style({ backgroundColor: "black" }) // offset = 1
	     * ]))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} steps
	     * @return {?}
	     */
	    function keyframes(steps) {
	        return new AnimationKeyframesSequenceMetadata(steps);
	    }
	    /**
	     * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `transition` declares the {\@link sequence sequence of animation steps} that will be run when the
	     * provided
	     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
	     * which consists
	     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
	     *
	     * Animation transitions are placed within an {\@link trigger animation trigger}. For an transition
	     * to animate to
	     * a state value and persist its styles then one or more {\@link state animation states} is expected
	     * to be defined.
	     *
	     * ### Usage
	     *
	     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	     * what the
	     * previous state is and what the current state has become. In other words, if a transition is
	     * defined that
	     * matches the old/current state criteria then the associated animation will be triggered.
	     *
	     * ```typescript
	     * // all transition/state changes are defined within an animation trigger
	     * trigger("myAnimationTrigger", [
	     *   // if a state is defined then its styles will be persisted when the
	     *   // animation has fully completed itself
	     *   state("on", style({ background: "green" })),
	     *   state("off", style({ background: "grey" })),
	     *
	     *   // a transition animation that will be kicked off when the state value
	     *   // bound to "myAnimationTrigger" changes from "on" to "off"
	     *   transition("on => off", animate(500)),
	     *
	     *   // it is also possible to do run the same animation for both directions
	     *   transition("on <=> off", animate(500)),
	     *
	     *   // or to define multiple states pairs separated by commas
	     *   transition("on => off, off => void", animate(500)),
	     *
	     *   // this is a catch-all state change for when an element is inserted into
	     *   // the page and the destination state is unknown
	     *   transition("void => *", [
	     *     style({ opacity: 0 }),
	     *     animate(500)
	     *   ]),
	     *
	     *   // this will capture a state change between any states
	     *   transition("* => *", animate("1s 0s")),
	     * ])
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * #### The final `animate` call
	     *
	     * If the final step within the transition steps is a call to `animate()` that **only**
	     * uses a timing value with **no style data** then it will be automatically used as the final
	     * animation
	     * arc for the element to animate itself to the final state. This involves an automatic mix of
	     * adding/removing CSS styles so that the element will be in the exact state it should be for the
	     * applied state to be presented correctly.
	     *
	     * ```
	     * // start off by hiding the element, but make sure that it animates properly to whatever state
	     * // is currently active for "myAnimationTrigger"
	     * transition("void => *", [
	     *   style({ opacity: 0 }),
	     *   animate(500)
	     * ])
	     * ```
	     *
	     * ### Transition Aliases (`:enter` and `:leave`)
	     *
	     * Given that enter (insertion) and leave (removal) animations are so common,
	     * the `transition` function accepts both `:enter` and `:leave` values which
	     * are aliases for the `void => *` and `* => void` state changes.
	     *
	     * ```
	     * transition(":enter", [
	     *   style({ opacity: 0 }),
	     *   animate(500, style({ opacity: 1 }))
	     * ])
	     * transition(":leave", [
	     *   animate(500, style({ opacity: 0 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} stateChangeExpr
	     * @param {?} steps
	     * @return {?}
	     */
	    function transition(stateChangeExpr, steps) {
	        var /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
	        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
	    }
	    /**
	     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {\@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `trigger` Creates an animation trigger which will a list of {\@link state state} and {\@link
	     * transition transition}
	     * entries that will be evaluated when the expression bound to the trigger changes.
	     *
	     * Triggers are registered within the component annotation data under the
	     * {\@link Component#animations-anchor animations section}. An animation trigger can
	     * be placed on an element within a template by referencing the name of the
	     * trigger followed by the expression value that the trigger is bound to
	     * (in the form of `[\@triggerName]="expression"`.
	     *
	     * ### Usage
	     *
	     * `trigger` will create an animation trigger reference based on the provided `name` value.
	     * The provided `animation` value is expected to be an array consisting of {\@link state state} and
	     * {\@link transition transition}
	     * declarations.
	     *
	     * ```typescript
	     * \@Component({
	     *   selector: 'my-component',
	     *   templateUrl: 'my-component-tpl.html',
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *       state(...),
	     *       state(...),
	     *       transition(...),
	     *       transition(...)
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   myStatusExp = "something";
	     * }
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [\@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {\@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * \@experimental Animation support is experimental.
	     * @param {?} name
	     * @param {?} animation
	     * @return {?}
	     */
	    function trigger(name, animation) {
	        return new AnimationEntryMetadata(name, animation);
	    }

	    /**
	     * @param {?} previousStyles
	     * @param {?} newStyles
	     * @param {?=} nullValue
	     * @return {?}
	     */
	    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
	        if (nullValue === void 0) { nullValue = null; }
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(newStyles).forEach(function (prop) {
	            var /** @type {?} */ value = newStyles[prop];
	            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
	        });
	        Object.keys(previousStyles).forEach(function (prop) {
	            if (!isPresent(finalStyles[prop])) {
	                finalStyles[prop] = nullValue;
	            }
	        });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collectedStyles
	     * @param {?} finalStateStyles
	     * @param {?} keyframes
	     * @return {?}
	     */
	    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
	        var /** @type {?} */ limit = keyframes.length - 1;
	        var /** @type {?} */ firstKeyframe = keyframes[0];
	        // phase 1: copy all the styles from the first keyframe into the lookup map
	        var /** @type {?} */ flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
	        var /** @type {?} */ extraFirstKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFirstStyles = false;
	        Object.keys(collectedStyles).forEach(function (prop) {
	            var /** @type {?} */ value = (collectedStyles[prop]);
	            // if the style is already defined in the first keyframe then
	            // we do not replace it.
	            if (!flatenedFirstKeyframeStyles[prop]) {
	                flatenedFirstKeyframeStyles[prop] = value;
	                extraFirstKeyframeStyles[prop] = value;
	                hasExtraFirstStyles = true;
	            }
	        });
	        var /** @type {?} */ keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
	        // phase 2: normalize the final keyframe
	        var /** @type {?} */ finalKeyframe = keyframes[limit];
	        finalKeyframe.styles.styles.unshift(finalStateStyles);
	        var /** @type {?} */ flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
	        var /** @type {?} */ extraFinalKeyframeStyles = {};
	        var /** @type {?} */ hasExtraFinalStyles = false;
	        Object.keys(keyframeCollectedStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
	                extraFinalKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFinalStyles = true;
	            }
	        });
	        if (hasExtraFinalStyles) {
	            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
	        }
	        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
	                extraFirstKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFirstStyles = true;
	            }
	        });
	        if (hasExtraFirstStyles) {
	            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
	        }
	        collectAndResolveStyles(collectedStyles, [finalStateStyles]);
	        return keyframes;
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function clearStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
	        return finalStyles;
	    }
	    /**
	     * @param {?} collection
	     * @param {?} styles
	     * @return {?}
	     */
	    function collectAndResolveStyles(collection, styles) {
	        return styles.map(function (entry) {
	            var /** @type {?} */ stylesObj = {};
	            Object.keys(entry).forEach(function (prop) {
	                var /** @type {?} */ value = entry[prop];
	                if (value == FILL_STYLE_FLAG) {
	                    value = collection[prop];
	                    if (!isPresent(value)) {
	                        value = AUTO_STYLE;
	                    }
	                }
	                collection[prop] = value;
	                stylesObj[prop] = value;
	            });
	            return stylesObj;
	        });
	    }
	    /**
	     * @param {?} element
	     * @param {?} renderer
	     * @param {?} styles
	     * @return {?}
	     */
	    function renderStyles(element, renderer, styles) {
	        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function flattenStyles(styles) {
	        var /** @type {?} */ finalStyles = {};
	        styles.forEach(function (entry) {
	            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = (entry[prop]); });
	        });
	        return finalStyles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * `AnimationStyles` consists of a collection of key/value maps containing CSS-based style data
	     * that can either be used as initial styling data or apart of a series of keyframes within an
	     * animation.
	     * This class is mostly internal, and it is designed to be used alongside
	     * {\@link AnimationKeyframe `AnimationKeyframe`} and {\@link Renderer#animate-anchor
	     * `Renderer.animate`}.
	     *
	     * \@experimental Animation support is experimental
	     */
	    var AnimationStyles = (function () {
	        /**
	         * @param {?} styles
	         */
	        function AnimationStyles(styles) {
	            this.styles = styles;
	        }
	        return AnimationStyles;
	    }());

	    /**
	     * An instance of this class is returned as an event parameter when an animation
	     * callback is captured for an animation either during the start or done phase.
	     *
	     * ```typescript
	     * \@Component({
	     *   host: {
	     *     '[\@myAnimationTrigger]': 'someExpression',
	     *     '(\@myAnimationTrigger.start)': 'captureStartEvent($event)',
	     *     '(\@myAnimationTrigger.done)': 'captureDoneEvent($event)',
	     *   },
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *        // ...
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   someExpression: any = false;
	     *   captureStartEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     *
	     *   captureDoneEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     * }
	     * ```
	     *
	     * \@experimental Animation support is experimental.
	     */
	    var AnimationTransitionEvent = (function () {
	        /**
	         * @param {?} __0
	         */
	        function AnimationTransitionEvent(_a) {
	            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
	            this.fromState = fromState;
	            this.toState = toState;
	            this.totalTime = totalTime;
	            this.phaseName = phaseName;
	        }
	        return AnimationTransitionEvent;
	    }());

	    var AnimationTransition = (function () {
	        /**
	         * @param {?} _player
	         * @param {?} _fromState
	         * @param {?} _toState
	         * @param {?} _totalTime
	         */
	        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
	            this._player = _player;
	            this._fromState = _fromState;
	            this._toState = _toState;
	            this._totalTime = _totalTime;
	        }
	        /**
	         * @param {?} phaseName
	         * @return {?}
	         */
	        AnimationTransition.prototype._createEvent = function (phaseName) {
	            return new AnimationTransitionEvent({
	                fromState: this._fromState,
	                toState: this._toState,
	                totalTime: this._totalTime,
	                phaseName: phaseName
	            });
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onStart = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('start')); }, 'player.onStart'));
	            this._player.onStart(fn);
	        };
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationTransition.prototype.onDone = function (callback) {
	            var _this = this;
	            var /** @type {?} */ fn = (Zone.current.wrap(function () { return callback(_this._createEvent('done')); }, 'player.onDone'));
	            this._player.onDone(fn);
	        };
	        return AnimationTransition;
	    }());

	    var DebugDomRootRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRootRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} componentProto
	         * @return {?}
	         */
	        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
	        };
	        return DebugDomRootRenderer;
	    }());
	    var DebugDomRenderer = (function () {
	        /**
	         * @param {?} _delegate
	         */
	        function DebugDomRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        /**
	         * @param {?} selectorOrNode
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, null, debugInfo);
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} name
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
	            var /** @type {?} */ nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
	            var /** @type {?} */ debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        /**
	         * @param {?} hostElement
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	        /**
	         * @param {?} parentElement
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var /** @type {?} */ comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return comment;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?=} debugInfo
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var /** @type {?} */ text = this._delegate.createText(parentElement, value, debugInfo);
	            var /** @type {?} */ debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return text;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            var /** @type {?} */ debugParent = getDebugNode(parentElement);
	            if (isPresent(debugParent) && debugParent instanceof DebugElement) {
	                var /** @type {?} */ debugElement_1 = debugParent;
	                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
	            }
	            this._delegate.projectNodes(parentElement, nodes);
	        };
	        /**
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	            var /** @type {?} */ debugNode = getDebugNode(node);
	            if (isPresent(debugNode)) {
	                var /** @type {?} */ debugParent = debugNode.parent;
	                if (viewRootNodes.length > 0 && isPresent(debugParent)) {
	                    var /** @type {?} */ debugViewRootNodes_1 = [];
	                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });
	                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
	                }
	            }
	            this._delegate.attachViewAfter(node, viewRootNodes);
	        };
	        /**
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	            viewRootNodes.forEach(function (node) {
	                var /** @type {?} */ debugNode = getDebugNode(node);
	                if (isPresent(debugNode) && isPresent(debugNode.parent)) {
	                    debugNode.parent.removeChild(debugNode);
	                }
	            });
	            this._delegate.detachView(viewRootNodes);
	        };
	        /**
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            viewAllNodes = viewAllNodes || [];
	            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
	            this._delegate.destroyView(hostElement, viewAllNodes);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl)) {
	                debugEl.listeners.push(new EventListener(name, callback));
	            }
	            return this._delegate.listen(renderElement, name, callback);
	        };
	        /**
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._delegate.listenGlobal(target, name, callback);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.properties[propertyName] = propertyValue;
	            }
	            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.attributes[attributeName] = attributeValue;
	            }
	            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.classes[className] = isAdd;
	            }
	            this._delegate.setElementClass(renderElement, className, isAdd);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            var /** @type {?} */ debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.styles[styleName] = styleValue;
	            }
	            this._delegate.setElementStyle(renderElement, styleName, styleValue);
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?=} args
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            this._delegate.invokeElementMethod(renderElement, methodName, args);
	        };
	        /**
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	        };
	        return DebugDomRenderer;
	    }());

	    var ViewType = {};
	    ViewType.HOST = 0;
	    ViewType.COMPONENT = 1;
	    ViewType.EMBEDDED = 2;
	    ViewType[ViewType.HOST] = "HOST";
	    ViewType[ViewType.COMPONENT] = "COMPONENT";
	    ViewType[ViewType.EMBEDDED] = "EMBEDDED";

	    var StaticNodeDebugInfo = (function () {
	        /**
	         * @param {?} providerTokens
	         * @param {?} componentToken
	         * @param {?} refTokens
	         */
	        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
	            this.providerTokens = providerTokens;
	            this.componentToken = componentToken;
	            this.refTokens = refTokens;
	        }
	        return StaticNodeDebugInfo;
	    }());
	    var DebugContext = (function () {
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         * @param {?} _tplRow
	         * @param {?} _tplCol
	         */
	        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	            this._tplRow = _tplRow;
	            this._tplCol = _tplCol;
	        }
	        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "context", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "component", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
	                    return this.injector.get(staticNodeInfo.componentToken);
	                }
	                return null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ componentView = this._view;
	                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
	                    componentView = (componentView.parentView);
	                }
	                return componentView.parentElement;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._view.injector(this._nodeIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "renderNode", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (isPresent(this._nodeIndex) && this._view.allNodes) {
	                    return this._view.allNodes[this._nodeIndex];
	                }
	                else {
	                    return null;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "providerTokens", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "source", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "references", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var _this = this;
	                var /** @type {?} */ varValues = {};
	                var /** @type {?} */ staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo)) {
	                    var /** @type {?} */ refs_1 = staticNodeInfo.refTokens;
	                    Object.keys(refs_1).forEach(function (refName) {
	                        var /** @type {?} */ refToken = refs_1[refName];
	                        var /** @type {?} */ varValue;
	                        if (isBlank(refToken)) {
	                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
	                        }
	                        else {
	                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
	                        }
	                        varValues[refName] = varValue;
	                    });
	                }
	                return varValues;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugContext;
	    }());

	    var ViewAnimationMap = (function () {
	        function ViewAnimationMap() {
	            this._map = new Map();
	            this._allPlayers = [];
	        }
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.find = function (element, animationName) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                return playersByAnimation[animationName];
	            }
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
	            var /** @type {?} */ el = this._map.get(element);
	            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.set = function (element, animationName, player) {
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (!isPresent(playersByAnimation)) {
	                playersByAnimation = {};
	            }
	            var /** @type {?} */ existingEntry = playersByAnimation[animationName];
	            if (isPresent(existingEntry)) {
	                this.remove(element, animationName);
	            }
	            playersByAnimation[animationName] = player;
	            this._allPlayers.push(player);
	            this._map.set(element, playersByAnimation);
	        };
	        /**
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?=} targetPlayer
	         * @return {?}
	         */
	        ViewAnimationMap.prototype.remove = function (element, animationName, targetPlayer) {
	            if (targetPlayer === void 0) { targetPlayer = null; }
	            var /** @type {?} */ playersByAnimation = this._map.get(element);
	            if (playersByAnimation) {
	                var /** @type {?} */ player = playersByAnimation[animationName];
	                if (!targetPlayer || player === targetPlayer) {
	                    delete playersByAnimation[animationName];
	                    var /** @type {?} */ index = this._allPlayers.indexOf(player);
	                    this._allPlayers.splice(index, 1);
	                    if (Object.keys(playersByAnimation).length === 0) {
	                        this._map.delete(element);
	                    }
	                }
	            }
	        };
	        return ViewAnimationMap;
	    }());

	    var AnimationViewContext = (function () {
	        /**
	         * @param {?} _animationQueue
	         */
	        function AnimationViewContext(_animationQueue) {
	            this._animationQueue = _animationQueue;
	            this._players = new ViewAnimationMap();
	        }
	        /**
	         * @param {?} callback
	         * @return {?}
	         */
	        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
	            var /** @type {?} */ activeAnimationPlayers = this._players.getAllPlayers();
	            // we check for the length to avoid having GroupAnimationPlayer
	            // issue an unnecessary microtask when zero players are passed in
	            if (activeAnimationPlayers.length) {
	                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
	            }
	            else {
	                callback();
	            }
	        };
	        /**
	         * @param {?} element
	         * @param {?} animationName
	         * @param {?} player
	         * @return {?}
	         */
	        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
	            var _this = this;
	            this._animationQueue.enqueue(player);
	            this._players.set(element, animationName, player);
	            player.onDone(function () { return _this._players.remove(element, animationName, player); });
	        };
	        /**
	         * @param {?} element
	         * @param {?=} animationName
	         * @return {?}
	         */
	        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName) {
	            if (animationName === void 0) { animationName = null; }
	            var /** @type {?} */ players = [];
	            if (animationName) {
	                var /** @type {?} */ currentPlayer = this._players.find(element, animationName);
	                if (currentPlayer) {
	                    _recursePlayers(currentPlayer, players);
	                }
	            }
	            else {
	                this._players.findAllPlayersByElement(element).forEach(function (player) { return _recursePlayers(player, players); });
	            }
	            return players;
	        };
	        return AnimationViewContext;
	    }());
	    /**
	     * @param {?} player
	     * @param {?} collectedPlayers
	     * @return {?}
	     */
	    function _recursePlayers(player, collectedPlayers) {
	        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
	            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
	        }
	        else {
	            collectedPlayers.push(player);
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ElementInjector = (function (_super) {
	        __extends$15(ElementInjector, _super);
	        /**
	         * @param {?} _view
	         * @param {?} _nodeIndex
	         */
	        function ElementInjector(_view, _nodeIndex) {
	            _super.call(this);
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	        }
	        /**
	         * @param {?} token
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        ElementInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
	        };
	        return ElementInjector;
	    }(Injector));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _scope_check = wtfCreateScope("AppView#check(ascii id)");
	    /**
	     * @experimental
	     */
	    var /** @type {?} */ EMPTY_CONTEXT = new Object();
	    var /** @type {?} */ UNDEFINED$1 = new Object();
	    /**
	     * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	     *
	     * @abstract
	     */
	    var AppView = (function () {
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentElement
	         * @param {?} cdMode
	         * @param {?=} declaredViewContainer
	         */
	        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            this.clazz = clazz;
	            this.componentType = componentType;
	            this.type = type;
	            this.viewUtils = viewUtils;
	            this.parentView = parentView;
	            this.parentIndex = parentIndex;
	            this.parentElement = parentElement;
	            this.cdMode = cdMode;
	            this.declaredViewContainer = declaredViewContainer;
	            this.numberOfChecks = 0;
	            this.ref = new ViewRef_(this, viewUtils.animationQueue);
	            if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	                this.renderer = viewUtils.renderComponent(componentType);
	            }
	            else {
	                this.renderer = parentView.renderer;
	            }
	            this._directRenderer = this.renderer.directRenderer;
	        }
	        Object.defineProperty(AppView.prototype, "animationContext", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                if (!this._animationContext) {
	                    this._animationContext = new AnimationViewContext(this.viewUtils.animationQueue);
	                }
	                return this._animationContext;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "destroyed", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        AppView.prototype.create = function (context) {
	            this.context = context;
	            return this.createInternal(null);
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} hostInjector
	         * @param {?} projectableNodes
	         * @return {?}
	         */
	        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
	            this.context = (EMPTY_CONTEXT);
	            this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	            this._hostInjector = hostInjector;
	            this._hostProjectableNodes = projectableNodes;
	            return this.createInternal(rootSelectorOrNode);
	        };
	        /**
	         * Overwritten by implementations.
	         * Returns the ComponentRef for the host element for ViewType.HOST.
	         * @param {?} rootSelectorOrNode
	         * @return {?}
	         */
	        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	        /**
	         * Overwritten by implementations.
	         * @param {?} templateNodeIndex
	         * @return {?}
	         */
	        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
	        /**
	         * @param {?} lastRootNode
	         * @param {?} allNodes
	         * @param {?} disposables
	         * @return {?}
	         */
	        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
	            this.lastRootNode = lastRootNode;
	            this.allNodes = allNodes;
	            this.disposables = disposables;
	            if (this.type === ViewType.COMPONENT) {
	                this.dirtyParentQueriesInternal();
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundValue
	         * @return {?}
	         */
	        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            var /** @type {?} */ result = UNDEFINED$1;
	            var /** @type {?} */ view = this;
	            while (result === UNDEFINED$1) {
	                if (isPresent(nodeIndex)) {
	                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
	                }
	                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
	                    result = view._hostInjector.get(token, notFoundValue);
	                }
	                nodeIndex = view.parentIndex;
	                view = view.parentView;
	            }
	            return result;
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?} notFoundResult
	         * @return {?}
	         */
	        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	            return notFoundResult;
	        };
	        /**
	         * @param {?} nodeIndex
	         * @return {?}
	         */
	        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detachAndDestroy = function () {
	            if (this.viewContainer) {
	                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
	            }
	            else if (this.appRef) {
	                this.appRef.detachView(this.ref);
	            }
	            else if (this._hasExternalHostElement) {
	                this.detach();
	            }
	            this.destroy();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.destroy = function () {
	            var _this = this;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                return;
	            }
	            var /** @type {?} */ hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
	            if (this.disposables) {
	                for (var /** @type {?} */ i = 0; i < this.disposables.length; i++) {
	                    this.disposables[i]();
	                }
	            }
	            this.destroyInternal();
	            this.dirtyParentQueriesInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
	            }
	            else {
	                this.renderer.destroyView(hostElement, this.allNodes);
	            }
	            this.cdMode = ChangeDetectorStatus.Destroyed;
	        };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.destroyInternal = function () { };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.detachInternal = function () { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.detach = function () {
	            var _this = this;
	            this.detachInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
	            }
	            else {
	                this._renderDetach();
	            }
	            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer &&
	                this.declaredViewContainer.projectedViews) {
	                var /** @type {?} */ projectedViews = this.declaredViewContainer.projectedViews;
	                var /** @type {?} */ index = projectedViews.indexOf(this);
	                // perf: pop is faster than splice!
	                if (index >= projectedViews.length - 1) {
	                    projectedViews.pop();
	                }
	                else {
	                    projectedViews.splice(index, 1);
	                }
	            }
	            this.appRef = null;
	            this.viewContainer = null;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @return {?}
	         */
	        AppView.prototype._renderDetach = function () {
	            if (this._directRenderer) {
	                this.visitRootNodesInternal(this._directRenderer.remove, null);
	            }
	            else {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	        };
	        /**
	         * @param {?} appRef
	         * @return {?}
	         */
	        AppView.prototype.attachToAppRef = function (appRef) {
	            if (this.viewContainer) {
	                throw new Error('This view is already attached to a ViewContainer!');
	            }
	            this.appRef = appRef;
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.attachAfter = function (viewContainer, prevView) {
	            if (this.appRef) {
	                throw new Error('This view is already attached directly to the ApplicationRef!');
	            }
	            this._renderAttach(viewContainer, prevView);
	            this.viewContainer = viewContainer;
	            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
	                if (!this.declaredViewContainer.projectedViews) {
	                    this.declaredViewContainer.projectedViews = [];
	                }
	                this.declaredViewContainer.projectedViews.push(this);
	            }
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype.moveAfter = function (viewContainer, prevView) {
	            this._renderAttach(viewContainer, prevView);
	            this.dirtyParentQueriesInternal();
	        };
	        /**
	         * @param {?} viewContainer
	         * @param {?} prevView
	         * @return {?}
	         */
	        AppView.prototype._renderAttach = function (viewContainer, prevView) {
	            var /** @type {?} */ prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
	            if (this._directRenderer) {
	                var /** @type {?} */ nextSibling = this._directRenderer.nextSibling(prevNode);
	                if (nextSibling) {
	                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
	                }
	                else {
	                    var /** @type {?} */ parentElement = this._directRenderer.parentElement(prevNode);
	                    if (parentElement) {
	                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
	                    }
	                }
	            }
	            else {
	                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
	            }
	        };
	        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "flatRootNodes", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                var /** @type {?} */ nodes = [];
	                this.visitRootNodesInternal(addToArray, nodes);
	                return nodes;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} parentElement
	         * @param {?} ngContentIndex
	         * @return {?}
	         */
	        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
	            if (this._directRenderer) {
	                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
	            }
	            else {
	                var /** @type {?} */ nodes = [];
	                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
	                this.renderer.projectNodes(parentElement, nodes);
	            }
	        };
	        /**
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
	            switch (this.type) {
	                case ViewType.EMBEDDED:
	                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
	                    break;
	                case ViewType.COMPONENT:
	                    if (this.parentView.type === ViewType.HOST) {
	                        var /** @type {?} */ nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
	                        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                            cb(nodes[i], c);
	                        }
	                    }
	                    else {
	                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
	                    }
	                    break;
	            }
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitRootNodesInternal = function (cb, c) { };
	        /**
	         * Overwritten by implementations
	         * @param {?} nodeIndex
	         * @param {?} ngContentIndex
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
	        /**
	         * Overwritten by implementations
	         * @return {?}
	         */
	        AppView.prototype.dirtyParentQueriesInternal = function () { };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.internalDetectChanges = function (throwOnChange) {
	            if (this.cdMode !== ChangeDetectorStatus.Detached) {
	                this.detectChanges(throwOnChange);
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChanges = function (throwOnChange) {
	            var /** @type {?} */ s = _scope_check(this.clazz);
	            if (this.cdMode === ChangeDetectorStatus.Checked ||
	                this.cdMode === ChangeDetectorStatus.Errored)
	                return;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                this.throwDestroyedError('detectChanges');
	            }
	            this.detectChangesInternal(throwOnChange);
	            if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	                this.cdMode = ChangeDetectorStatus.Checked;
	            this.numberOfChecks++;
	            wtfLeave(s);
	        };
	        /**
	         * Overwritten by implementations
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        AppView.prototype.detectChangesInternal = function (throwOnChange) { };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	        /**
	         * @return {?}
	         */
	        AppView.prototype.markPathToRootAsCheckOnce = function () {
	            var /** @type {?} */ c = this;
	            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	                if (c.cdMode === ChangeDetectorStatus.Checked) {
	                    c.cdMode = ChangeDetectorStatus.CheckOnce;
	                }
	                if (c.type === ViewType.COMPONENT) {
	                    c = c.parentView;
	                }
	                else {
	                    c = c.viewContainer ? c.viewContainer.parentView : null;
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        AppView.prototype.eventHandler = function (cb) {
	            return cb;
	        };
	        /**
	         * @param {?} details
	         * @return {?}
	         */
	        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	        return AppView;
	    }());
	    var DebugAppView = (function (_super) {
	        __extends$14(DebugAppView, _super);
	        /**
	         * @param {?} clazz
	         * @param {?} componentType
	         * @param {?} type
	         * @param {?} viewUtils
	         * @param {?} parentView
	         * @param {?} parentIndex
	         * @param {?} parentNode
	         * @param {?} cdMode
	         * @param {?} staticNodeDebugInfos
	         * @param {?=} declaredViewContainer
	         */
	        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
	            this.staticNodeDebugInfos = staticNodeDebugInfos;
	            this._currentDebugContext = null;
	        }
	        /**
	         * @param {?} context
	         * @return {?}
	         */
	        DebugAppView.prototype.create = function (context) {
	            this._resetDebug();
	            try {
	                return _super.prototype.create.call(this, context);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} rootSelectorOrNode
	         * @param {?} injector
	         * @param {?=} projectableNodes
	         * @return {?}
	         */
	        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            this._resetDebug();
	            try {
	                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} token
	         * @param {?} nodeIndex
	         * @param {?=} notFoundResult
	         * @return {?}
	         */
	        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            this._resetDebug();
	            try {
	                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.detach = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.detach.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype.destroy = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.destroy.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        DebugAppView.prototype.detectChanges = function (throwOnChange) {
	            this._resetDebug();
	            try {
	                _super.prototype.detectChanges.call(this, throwOnChange);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	        /**
	         * @param {?} nodeIndex
	         * @param {?} rowNum
	         * @param {?} colNum
	         * @return {?}
	         */
	        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	        };
	        /**
	         * @param {?} e
	         * @return {?}
	         */
	        DebugAppView.prototype._rethrowWithContext = function (e) {
	            if (!(e instanceof ViewWrappedError)) {
	                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                    this.cdMode = ChangeDetectorStatus.Errored;
	                }
	                if (isPresent(this._currentDebugContext)) {
	                    throw new ViewWrappedError(e, this._currentDebugContext);
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @return {?}
	         */
	        DebugAppView.prototype.eventHandler = function (cb) {
	            var _this = this;
	            var /** @type {?} */ superHandler = _super.prototype.eventHandler.call(this, cb);
	            return function (eventName, event) {
	                _this._resetDebug();
	                try {
	                    return superHandler.call(_this, eventName, event);
	                }
	                catch (e) {
	                    _this._rethrowWithContext(e);
	                    throw e;
	                }
	            };
	        };
	        return DebugAppView;
	    }(AppView));

	    /**
	     * A ViewContainer is created for elements that have a ViewContainerRef
	     * to keep track of the nested views.
	     */
	    var ViewContainer = (function () {
	        /**
	         * @param {?} index
	         * @param {?} parentIndex
	         * @param {?} parentView
	         * @param {?} nativeElement
	         */
	        function ViewContainer(index, parentIndex, parentView, nativeElement) {
	            this.index = index;
	            this.parentIndex = parentIndex;
	            this.parentView = parentView;
	            this.nativeElement = nativeElement;
	        }
	        Object.defineProperty(ViewContainer.prototype, "elementRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ElementRef(this.nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "vcRef", {
	            /**
	             * @return {?}
	             */
	            get: function () { return new ViewContainerRef_(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "parentInjector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.parentIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "injector", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.parentView.injector(this.index); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} throwOnChange
	         * @return {?}
	         */
	        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].detectChanges(throwOnChange);
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        ViewContainer.prototype.destroyNestedViews = function () {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].destroy();
	                }
	            }
	        };
	        /**
	         * @param {?} cb
	         * @param {?} c
	         * @return {?}
	         */
	        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].visitRootNodesInternal(cb, c);
	                }
	            }
	        };
	        /**
	         * @param {?} nestedViewClass
	         * @param {?} callback
	         * @return {?}
	         */
	        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
	            var /** @type {?} */ result = [];
	            if (this.nestedViews) {
	                for (var /** @type {?} */ i = 0; i < this.nestedViews.length; i++) {
	                    var /** @type {?} */ nestedView = this.nestedViews[i];
	                    if (nestedView.clazz === nestedViewClass) {
	                        result.push(callback(nestedView));
	                    }
	                }
	            }
	            if (this.projectedViews) {
	                for (var /** @type {?} */ i = 0; i < this.projectedViews.length; i++) {
	                    var /** @type {?} */ projectedView = this.projectedViews[i];
	                    if (projectedView.clazz === nestedViewClass) {
	                        result.push(callback(projectedView));
	                    }
	                }
	            }
	            return result;
	        };
	        /**
	         * @param {?} view
	         * @param {?} currentIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.moveView = function (view, currentIndex) {
	            var /** @type {?} */ previousIndex = this.nestedViews.indexOf(view);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            nestedViews.splice(previousIndex, 1);
	            nestedViews.splice(currentIndex, 0, view);
	            var /** @type {?} */ prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
	            view.moveAfter(this, prevView);
	        };
	        /**
	         * @param {?} view
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.attachView = function (view, viewIndex) {
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var /** @type {?} */ nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            // perf: array.push is faster than array.splice!
	            if (viewIndex >= nestedViews.length) {
	                nestedViews.push(view);
	            }
	            else {
	                nestedViews.splice(viewIndex, 0, view);
	            }
	            var /** @type {?} */ prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
	            view.attachAfter(this, prevView);
	        };
	        /**
	         * @param {?} viewIndex
	         * @return {?}
	         */
	        ViewContainer.prototype.detachView = function (viewIndex) {
	            var /** @type {?} */ view = this.nestedViews[viewIndex];
	            // perf: array.pop is faster than array.splice!
	            if (viewIndex >= this.nestedViews.length - 1) {
	                this.nestedViews.pop();
	            }
	            else {
	                this.nestedViews.splice(viewIndex, 1);
	            }
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            view.detach();
	            return view;
	        };
	        return ViewContainer;
	    }());

	    var /** @type {?} */ __core_private__ = {
	        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	        ChangeDetectorStatus: ChangeDetectorStatus,
	        constructDependencies: constructDependencies,
	        LifecycleHooks: LifecycleHooks,
	        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
	        ReflectorReader: ReflectorReader,
	        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	        ComponentRef_: ComponentRef_,
	        ViewContainer: ViewContainer,
	        AppView: AppView,
	        DebugAppView: DebugAppView,
	        NgModuleInjector: NgModuleInjector,
	        registerModuleFactory: registerModuleFactory,
	        ViewType: ViewType,
	        view_utils: view_utils,
	        ViewMetadata: ViewMetadata,
	        DebugContext: DebugContext,
	        StaticNodeDebugInfo: StaticNodeDebugInfo,
	        devModeEqual: devModeEqual,
	        UNINITIALIZED: UNINITIALIZED,
	        ValueUnwrapper: ValueUnwrapper,
	        RenderDebugInfo: RenderDebugInfo,
	        TemplateRef_: TemplateRef_,
	        ReflectionCapabilities: ReflectionCapabilities,
	        makeDecorator: makeDecorator,
	        DebugDomRootRenderer: DebugDomRootRenderer,
	        Console: Console,
	        reflector: reflector,
	        Reflector: Reflector,
	        NoOpAnimationPlayer: NoOpAnimationPlayer,
	        AnimationPlayer: AnimationPlayer,
	        AnimationSequencePlayer: AnimationSequencePlayer,
	        AnimationGroupPlayer: AnimationGroupPlayer,
	        AnimationKeyframe: AnimationKeyframe,
	        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
	        balanceAnimationKeyframes: balanceAnimationKeyframes,
	        flattenStyles: flattenStyles,
	        clearStyles: clearStyles,
	        renderStyles: renderStyles,
	        collectAndResolveStyles: collectAndResolveStyles,
	        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
	        AnimationStyles: AnimationStyles,
	        ANY_STATE: ANY_STATE,
	        DEFAULT_STATE: DEFAULT_STATE,
	        EMPTY_STATE: EMPTY_STATE,
	        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
	        ComponentStillLoadingError: ComponentStillLoadingError,
	        isPromise: isPromise,
	        AnimationTransition: AnimationTransition
	    };

	    exports.createPlatform = createPlatform;
	    exports.assertPlatform = assertPlatform;
	    exports.destroyPlatform = destroyPlatform;
	    exports.getPlatform = getPlatform;
	    exports.PlatformRef = PlatformRef;
	    exports.ApplicationRef = ApplicationRef;
	    exports.enableProdMode = enableProdMode;
	    exports.isDevMode = isDevMode;
	    exports.createPlatformFactory = createPlatformFactory;
	    exports.NgProbeToken = NgProbeToken;
	    exports.APP_ID = APP_ID;
	    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	    exports.APP_INITIALIZER = APP_INITIALIZER;
	    exports.ApplicationInitStatus = ApplicationInitStatus;
	    exports.DebugElement = DebugElement;
	    exports.DebugNode = DebugNode;
	    exports.asNativeElements = asNativeElements;
	    exports.getDebugNode = getDebugNode;
	    exports.Testability = Testability;
	    exports.TestabilityRegistry = TestabilityRegistry;
	    exports.setTestabilityGetter = setTestabilityGetter;
	    exports.TRANSLATIONS = TRANSLATIONS;
	    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	    exports.LOCALE_ID = LOCALE_ID;
	    exports.ApplicationModule = ApplicationModule;
	    exports.wtfCreateScope = wtfCreateScope;
	    exports.wtfLeave = wtfLeave;
	    exports.wtfStartTimeRange = wtfStartTimeRange;
	    exports.wtfEndTimeRange = wtfEndTimeRange;
	    exports.Type = Type;
	    exports.EventEmitter = EventEmitter;
	    exports.ErrorHandler = ErrorHandler;
	    exports.AnimationTransitionEvent = AnimationTransitionEvent;
	    exports.AnimationPlayer = AnimationPlayer;
	    exports.AnimationStyles = AnimationStyles;
	    exports.AnimationKeyframe = AnimationKeyframe;
	    exports.Sanitizer = Sanitizer;
	    exports.SecurityContext = SecurityContext;
	    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	    exports.Attribute = Attribute;
	    exports.ContentChild = ContentChild;
	    exports.ContentChildren = ContentChildren;
	    exports.Query = Query;
	    exports.ViewChild = ViewChild;
	    exports.ViewChildren = ViewChildren;
	    exports.Component = Component;
	    exports.Directive = Directive;
	    exports.HostBinding = HostBinding;
	    exports.HostListener = HostListener;
	    exports.Input = Input;
	    exports.Output = Output;
	    exports.Pipe = Pipe;
	    exports.AfterContentChecked = AfterContentChecked;
	    exports.AfterContentInit = AfterContentInit;
	    exports.AfterViewChecked = AfterViewChecked;
	    exports.AfterViewInit = AfterViewInit;
	    exports.DoCheck = DoCheck;
	    exports.OnChanges = OnChanges;
	    exports.OnDestroy = OnDestroy;
	    exports.OnInit = OnInit;
	    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	    exports.NgModule = NgModule;
	    exports.ViewEncapsulation = ViewEncapsulation;
	    exports.Version = Version;
	    exports.VERSION = VERSION;
	    exports.Class = Class;
	    exports.forwardRef = forwardRef;
	    exports.resolveForwardRef = resolveForwardRef;
	    exports.Injector = Injector;
	    exports.ReflectiveInjector = ReflectiveInjector;
	    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	    exports.ReflectiveKey = ReflectiveKey;
	    exports.OpaqueToken = OpaqueToken;
	    exports.Inject = Inject;
	    exports.Optional = Optional;
	    exports.Injectable = Injectable;
	    exports.Self = Self;
	    exports.SkipSelf = SkipSelf;
	    exports.Host = Host;
	    exports.NgZone = NgZone;
	    exports.RenderComponentType = RenderComponentType;
	    exports.Renderer = Renderer;
	    exports.RootRenderer = RootRenderer;
	    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	    exports.Compiler = Compiler;
	    exports.CompilerFactory = CompilerFactory;
	    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	    exports.ComponentFactory = ComponentFactory;
	    exports.ComponentRef = ComponentRef;
	    exports.ComponentFactoryResolver = ComponentFactoryResolver;
	    exports.ElementRef = ElementRef;
	    exports.NgModuleFactory = NgModuleFactory;
	    exports.NgModuleRef = NgModuleRef;
	    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	    exports.getModuleFactory = getModuleFactory;
	    exports.QueryList = QueryList;
	    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	    exports.TemplateRef = TemplateRef;
	    exports.ViewContainerRef = ViewContainerRef;
	    exports.EmbeddedViewRef = EmbeddedViewRef;
	    exports.ViewRef = ViewRef;
	    exports.ChangeDetectionStrategy = ChangeDetectionStrategy;
	    exports.ChangeDetectorRef = ChangeDetectorRef;
	    exports.CollectionChangeRecord = CollectionChangeRecord;
	    exports.DefaultIterableDiffer = DefaultIterableDiffer;
	    exports.IterableDiffers = IterableDiffers;
	    exports.KeyValueChangeRecord = KeyValueChangeRecord;
	    exports.KeyValueDiffers = KeyValueDiffers;
	    exports.SimpleChange = SimpleChange;
	    exports.WrappedValue = WrappedValue;
	    exports.platformCore = platformCore;
	    exports.__core_private__ = __core_private__;
	    exports.AUTO_STYLE = AUTO_STYLE;
	    exports.AnimationEntryMetadata = AnimationEntryMetadata;
	    exports.AnimationStateMetadata = AnimationStateMetadata;
	    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
	    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
	    exports.AnimationMetadata = AnimationMetadata;
	    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
	    exports.AnimationStyleMetadata = AnimationStyleMetadata;
	    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
	    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
	    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
	    exports.AnimationGroupMetadata = AnimationGroupMetadata;
	    exports.animate = animate;
	    exports.group = group;
	    exports.sequence = sequence;
	    exports.style = style;
	    exports.state = state;
	    exports.keyframes = keyframes;
	    exports.transition = transition;
	    exports.trigger = trigger;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(88);
	var Subscriber_1 = __webpack_require__(91);
	var Subscription_1 = __webpack_require__(93);
	var ObjectUnsubscribedError_1 = __webpack_require__(102);
	var SubjectSubscription_1 = __webpack_require__(103);
	var rxSubscriber_1 = __webpack_require__(100);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(89);
	var toSubscriber_1 = __webpack_require__(90);
	var observable_1 = __webpack_require__(101);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this.source);
	        }
	        else {
	            sink.add(this._subscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 89 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	/**
	 * window: browser in DOM main thread
	 * self: browser in WebWorker
	 * global: Node.js/other
	 */
	exports.root = (typeof window == 'object' && window.window === window && window
	    || typeof self == 'object' && self.self === self && self
	    || typeof global == 'object' && global.global === global && global);
	if (!exports.root) {
	    throw new Error('RxJS could not find any global context (window, self, global)');
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(91);
	var rxSubscriber_1 = __webpack_require__(100);
	var Observer_1 = __webpack_require__(99);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber(Observer_1.empty);
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(92);
	var Subscription_1 = __webpack_require__(93);
	var Observer_1 = __webpack_require__(99);
	var rxSubscriber_1 = __webpack_require__(100);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 92 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(94);
	var isObject_1 = __webpack_require__(95);
	var isFunction_1 = __webpack_require__(92);
	var tryCatch_1 = __webpack_require__(96);
	var errorObject_1 = __webpack_require__(97);
	var UnsubscriptionError_1 = __webpack_require__(98);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?
	                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    return sub;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                    return sub;
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        var childSub = new ChildSubscription(sub, this);
	        this._subscriptions = this._subscriptions || [];
	        this._subscriptions.push(childSub);
	        return childSub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	var ChildSubscription = (function (_super) {
	    __extends(ChildSubscription, _super);
	    function ChildSubscription(_innerSub, _parent) {
	        _super.call(this);
	        this._innerSub = _innerSub;
	        this._parent = _parent;
	    }
	    ChildSubscription.prototype._unsubscribe = function () {
	        var _a = this, _innerSub = _a._innerSub, _parent = _a._parent;
	        _parent.remove(this);
	        _innerSub.unsubscribe();
	    };
	    return ChildSubscription;
	}(Subscription));
	exports.ChildSubscription = ChildSubscription;
	function flattenUnsubscriptionErrors(errors) {
	    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);
	}
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 94 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 95 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(97);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 97 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 98 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 99 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(89);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(89);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 102 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(93);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.5
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(105), __webpack_require__(86)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, function (exports,_angular_common,core) { 'use strict';

	    var /** @type {?} */ DebugDomRootRenderer = core.__core_private__.DebugDomRootRenderer;
	    var /** @type {?} */ NoOpAnimationPlayer = core.__core_private__.NoOpAnimationPlayer;

	    /**
	     * \@experimental
	     */
	    var NoOpAnimationDriver = (function () {
	        function NoOpAnimationDriver() {
	        }
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return new NoOpAnimationPlayer();
	        };
	        return NoOpAnimationDriver;
	    }());
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var AnimationDriver = (function () {
	        function AnimationDriver() {
	        }
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        AnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
	        AnimationDriver.NOOP = new NoOpAnimationDriver();
	        return AnimationDriver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ global$1 = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    /**
	     * @param {?} global
	     * @param {?} path
	     * @param {?} value
	     * @return {?}
	     */
	    function setValueOnPath(global, path, value) {
	        var /** @type {?} */ parts = path.split('.');
	        var /** @type {?} */ obj = global;
	        while (parts.length > 1) {
	            var /** @type {?} */ name_1 = parts.shift();
	            if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
	                obj = obj[name_1];
	            }
	            else {
	                obj = obj[name_1] = {};
	            }
	        }
	        if (obj === undefined || obj === null) {
	            obj = {};
	        }
	        obj[parts.shift()] = value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ _DOM = null;
	    /**
	     * @return {?}
	     */
	    function getDOM() {
	        return _DOM;
	    }
	    /**
	     * @param {?} adapter
	     * @return {?}
	     */
	    function setRootDomAdapter(adapter) {
	        if (!_DOM) {
	            _DOM = adapter;
	        }
	    }
	    /**
	     * Provides DOM operations in an environment-agnostic way.
	     *
	     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     * @abstract
	     */
	    var DomAdapter = (function () {
	        function DomAdapter() {
	            this.resourceLoaderType = null;
	        }
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.hasProperty = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setProperty = function (el, name, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getProperty = function (el, name) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        DomAdapter.prototype.invoke = function (el, methodName, args) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.logError = function (error) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.log = function (error) { };
	        /**
	         * @abstract
	         * @param {?} error
	         * @return {?}
	         */
	        DomAdapter.prototype.logGroup = function (error) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.logGroupEnd = function () { };
	        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	            /**
	             * Maps attribute names to their corresponding property names for cases
	             * where attribute name doesn't match property name.
	             * @return {?}
	             */
	            get: function () { return this._attrToPropMap; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { this._attrToPropMap = value; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        ;
	        /**
	         * @abstract
	         * @param {?} templateHtml
	         * @return {?}
	         */
	        DomAdapter.prototype.parse = function (templateHtml) { };
	        /**
	         * @abstract
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.query = function (selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.querySelector = function (el /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.querySelectorAll = function (el /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        DomAdapter.prototype.on = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        DomAdapter.prototype.onAndCancel = function (el /** TODO #9100 */, evt /** TODO #9100 */, listener) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.dispatchEvent = function (el /** TODO #9100 */, evt) { };
	        /**
	         * @abstract
	         * @param {?} eventType
	         * @return {?}
	         */
	        DomAdapter.prototype.createMouseEvent = function (eventType) { };
	        /**
	         * @abstract
	         * @param {?} eventType
	         * @return {?}
	         */
	        DomAdapter.prototype.createEvent = function (eventType) { };
	        /**
	         * @abstract
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.preventDefault = function (evt) { };
	        /**
	         * @abstract
	         * @param {?} evt
	         * @return {?}
	         */
	        DomAdapter.prototype.isPrevented = function (evt) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getInnerHTML = function (el) { };
	        /**
	         * Returns content if el is a <template> element, null otherwise.
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getTemplateContent = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getOuterHTML = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.nodeName = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.nodeValue = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.type = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.content = function (node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.firstChild = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.nextSibling = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.parentElement = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.childNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.childNodesAsList = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.clearNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.appendChild = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.removeChild = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} newNode
	         * @param {?} oldNode
	         * @return {?}
	         */
	        DomAdapter.prototype.replaceChild = function (el /** TODO #9100 */, newNode /** TODO #9100 */, oldNode) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.remove = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.insertBefore = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} nodes
	         * @return {?}
	         */
	        DomAdapter.prototype.insertAllBefore = function (el /** TODO #9100 */, nodes) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.insertAfter = function (el /** TODO #9100 */, node) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setInnerHTML = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getText = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setText = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getValue = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setValue = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getChecked = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setChecked = function (el /** TODO #9100 */, value) { };
	        /**
	         * @abstract
	         * @param {?} text
	         * @return {?}
	         */
	        DomAdapter.prototype.createComment = function (text) { };
	        /**
	         * @abstract
	         * @param {?} html
	         * @return {?}
	         */
	        DomAdapter.prototype.createTemplate = function (html) { };
	        /**
	         * @abstract
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createElement = function (tagName /** TODO #9100 */, doc) { };
	        /**
	         * @abstract
	         * @param {?} ns
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
	        /**
	         * @abstract
	         * @param {?} text
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createTextNode = function (text, doc) { };
	        /**
	         * @abstract
	         * @param {?} attrName
	         * @param {?} attrValue
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
	        /**
	         * @abstract
	         * @param {?} css
	         * @param {?=} doc
	         * @return {?}
	         */
	        DomAdapter.prototype.createStyleElement = function (css, doc) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.createShadowRoot = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getShadowRoot = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getHost = function (el) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getDistributedNodes = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.clone /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getElementsByClassName = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getElementsByTagName = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.classList = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.addClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.removeClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        DomAdapter.prototype.hasClass = function (element /** TODO #9100 */, className) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DomAdapter.prototype.setStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @return {?}
	         */
	        DomAdapter.prototype.removeStyle = function (element /** TODO #9100 */, styleName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @return {?}
	         */
	        DomAdapter.prototype.getStyle = function (element /** TODO #9100 */, styleName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?=} styleValue
	         * @return {?}
	         */
	        DomAdapter.prototype.hasStyle = function (element /** TODO #9100 */, styleName, styleValue) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.tagName = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.attributeMap = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.hasAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.hasAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.getAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.getAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setAttribute = function (element /** TODO #9100 */, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setAttributeNS = function (element /** TODO #9100 */, ns, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.removeAttribute = function (element /** TODO #9100 */, attribute) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        DomAdapter.prototype.removeAttributeNS = function (element /** TODO #9100 */, ns, attribute) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.templateAwareRoot = function (el) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.createHtmlDocument = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.defaultDoc = function () { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.getBoundingClientRect = function (el) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getTitle = function () { };
	        /**
	         * @abstract
	         * @param {?} newTitle
	         * @return {?}
	         */
	        DomAdapter.prototype.setTitle = function (newTitle) { };
	        /**
	         * @abstract
	         * @param {?} n
	         * @param {?} selector
	         * @return {?}
	         */
	        DomAdapter.prototype.elementMatches = function (n /** TODO #9100 */, selector) { };
	        /**
	         * @abstract
	         * @param {?} el
	         * @return {?}
	         */
	        DomAdapter.prototype.isTemplateElement = function (el) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isTextNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isCommentNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isElementNode = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.hasShadowRoot = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.isShadowRoot = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.importIntoDoc /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} node
	         * @return {?}
	         */
	        DomAdapter.prototype.adoptNode /*<T extends Node>*/ = function (node) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.getHref = function (element) { };
	        /**
	         * @abstract
	         * @param {?} event
	         * @return {?}
	         */
	        DomAdapter.prototype.getEventKey = function (event) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} baseUrl
	         * @param {?} href
	         * @return {?}
	         */
	        DomAdapter.prototype.resolveAndSetHref = function (element /** TODO #9100 */, baseUrl, href) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsDOMEvents = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsNativeShadowDOM = function () { };
	        /**
	         * @abstract
	         * @param {?} target
	         * @return {?}
	         */
	        DomAdapter.prototype.getGlobalEventTarget = function (target) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getHistory = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getLocation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getBaseHref = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.resetBaseElement = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getUserAgent = function () { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setData = function (element /** TODO #9100 */, name, value) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @return {?}
	         */
	        DomAdapter.prototype.getComputedStyle = function (element) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getData = function (element /** TODO #9100 */, name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setGlobalVar = function (name, value) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsWebAnimation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.performanceNow = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getAnimationPrefix = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.getTransitionEnd = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsAnimation = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        DomAdapter.prototype.supportsCookies = function () { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @return {?}
	         */
	        DomAdapter.prototype.getCookie = function (name) { };
	        /**
	         * @abstract
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        DomAdapter.prototype.setCookie = function (name, value) { };
	        return DomAdapter;
	    }());

	    var WebAnimationsPlayer = (function () {
	        /**
	         * @param {?} element
	         * @param {?} keyframes
	         * @param {?} options
	         * @param {?=} previousPlayers
	         */
	        function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
	            var _this = this;
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            this.element = element;
	            this.keyframes = keyframes;
	            this.options = options;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._initialized = false;
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._duration = options['duration'];
	            this.previousStyles = {};
	            previousPlayers.forEach(function (player) {
	                var styles = player._captureStyles();
	                Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
	            });
	        }
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.init = function () {
	            var _this = this;
	            if (this._initialized)
	                return;
	            this._initialized = true;
	            var /** @type {?} */ keyframes = this.keyframes.map(function (styles) {
	                var /** @type {?} */ formattedKeyframe = {};
	                Object.keys(styles).forEach(function (prop, index) {
	                    var /** @type {?} */ value = styles[prop];
	                    if (value == core.AUTO_STYLE) {
	                        value = _computeStyle(_this.element, prop);
	                    }
	                    if (value != undefined) {
	                        formattedKeyframe[prop] = value;
	                    }
	                });
	                return formattedKeyframe;
	            });
	            var /** @type {?} */ previousStyleProps = Object.keys(this.previousStyles);
	            if (previousStyleProps.length) {
	                var /** @type {?} */ startingKeyframe_1 = keyframes[0];
	                var /** @type {?} */ missingStyleProps_1 = [];
	                previousStyleProps.forEach(function (prop) {
	                    if (!isPresent(startingKeyframe_1[prop])) {
	                        missingStyleProps_1.push(prop);
	                    }
	                    startingKeyframe_1[prop] = _this.previousStyles[prop];
	                });
	                if (missingStyleProps_1.length) {
	                    var _loop_1 = function(i) {
	                        var /** @type {?} */ kf = keyframes[i];
	                        missingStyleProps_1.forEach(function (prop) { kf[prop] = _computeStyle(_this.element, prop); });
	                    };
	                    for (var /** @type {?} */ i = 1; i < keyframes.length; i++) {
	                        _loop_1(i);
	                    }
	                }
	            }
	            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
	            this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
	            // this is required so that the player doesn't start to animate right away
	            this._resetDomPlayerState();
	            this._player.addEventListener('finish', function () { return _this._onFinish(); });
	        };
	        /**
	         * \@internal
	         * @param {?} element
	         * @param {?} keyframes
	         * @param {?} options
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	            // jscompiler doesn't seem to know animate is a native property because it's not fully
	            // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
	            return (element['animate'](keyframes, options));
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._player; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.play = function () {
	            this.init();
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._player.play();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.pause = function () {
	            this.init();
	            this._player.pause();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.finish = function () {
	            this.init();
	            this._onFinish();
	            this._player.finish();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.reset = function () {
	            this._resetDomPlayerState();
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._resetDomPlayerState = function () {
	            if (this._player) {
	                this._player.cancel();
	            }
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.restart = function () {
	            this.reset();
	            this.play();
	        };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._resetDomPlayerState();
	                this._onFinish();
	                this._destroyed = true;
	            }
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._duration; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} p
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
	        /**
	         * @return {?}
	         */
	        WebAnimationsPlayer.prototype._captureStyles = function () {
	            var _this = this;
	            var /** @type {?} */ styles = {};
	            if (this.hasStarted()) {
	                Object.keys(this._finalKeyframe).forEach(function (prop) {
	                    if (prop != 'offset') {
	                        styles[prop] =
	                            _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
	                    }
	                });
	            }
	            return styles;
	        };
	        return WebAnimationsPlayer;
	    }());
	    /**
	     * @param {?} element
	     * @param {?} prop
	     * @return {?}
	     */
	    function _computeStyle(element, prop) {
	        return getDOM().getComputedStyle(element)[prop];
	    }
	    /**
	     * @param {?} styles
	     * @return {?}
	     */
	    function _copyKeyframeStyles(styles) {
	        var /** @type {?} */ newStyles = {};
	        Object.keys(styles).forEach(function (prop) {
	            if (prop != 'offset') {
	                newStyles[prop] = styles[prop];
	            }
	        });
	        return newStyles;
	    }

	    var WebAnimationsDriver = (function () {
	        function WebAnimationsDriver() {
	        }
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            var /** @type {?} */ formattedSteps = [];
	            var /** @type {?} */ startingStyleLookup = {};
	            if (isPresent(startingStyles)) {
	                startingStyleLookup = _populateStyles(startingStyles, {});
	            }
	            keyframes.forEach(function (keyframe) {
	                var /** @type {?} */ data = _populateStyles(keyframe.styles, startingStyleLookup);
	                data['offset'] = Math.max(0, Math.min(1, keyframe.offset));
	                formattedSteps.push(data);
	            });
	            // Styling passed into element.animate() must always be balanced.
	            // The special cases below can occur if only style() calls exist
	            // within an animation or when a style() calls are used prior
	            // to a group() animation being issued or if the renderer is
	            // invoked by the user directly.
	            if (formattedSteps.length == 0) {
	                formattedSteps = [startingStyleLookup, startingStyleLookup];
	            }
	            else if (formattedSteps.length == 1) {
	                var /** @type {?} */ start = startingStyleLookup;
	                var /** @type {?} */ end = formattedSteps[0];
	                end['offset'] = null;
	                formattedSteps = [start, end];
	            }
	            var /** @type {?} */ playerOptions = {
	                'duration': duration,
	                'delay': delay,
	                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
	            };
	            // we check for this to avoid having a null|undefined value be present
	            // for the easing (which results in an error for certain browsers #9752)
	            if (easing) {
	                playerOptions['easing'] = easing;
	            }
	            // there may be a chance a NoOp player is returned depending
	            // on when the previous animation was cancelled
	            previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
	            return new WebAnimationsPlayer(element, formattedSteps, playerOptions, /** @type {?} */ (previousPlayers));
	        };
	        return WebAnimationsDriver;
	    }());
	    /**
	     * @param {?} styles
	     * @param {?} defaultStyles
	     * @return {?}
	     */
	    function _populateStyles(styles, defaultStyles) {
	        var /** @type {?} */ data = {};
	        styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
	        Object.keys(defaultStyles).forEach(function (prop) {
	            if (!isPresent(data[prop])) {
	                data[prop] = defaultStyles[prop];
	            }
	        });
	        return data;
	    }
	    /**
	     * @param {?} player
	     * @return {?}
	     */
	    function filterWebAnimationPlayerFn(player) {
	        return player instanceof WebAnimationsPlayer;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides DOM operations in any browser environment.
	     *
	     * \@security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     * @abstract
	     */
	    var GenericBrowserDomAdapter = (function (_super) {
	        __extends$1(GenericBrowserDomAdapter, _super);
	        function GenericBrowserDomAdapter() {
	            var _this = this;
	            _super.call(this);
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	            try {
	                var element_1 = this.createElement('div', this.defaultDoc());
	                if (isPresent(this.getStyle(element_1, 'animationName'))) {
	                    this._animationPrefix = '';
	                }
	                else {
	                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                    for (var i = 0; i < domPrefixes.length; i++) {
	                        if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
	                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                            break;
	                        }
	                    }
	                }
	                var transEndEventNames_1 = {
	                    WebkitTransition: 'webkitTransitionEnd',
	                    MozTransition: 'transitionend',
	                    OTransition: 'oTransitionEnd otransitionend',
	                    transition: 'transitionend'
	                };
	                Object.keys(transEndEventNames_1).forEach(function (key) {
	                    if (isPresent(_this.getStyle(element_1, key))) {
	                        _this._transitionEnd = transEndEventNames_1[key];
	                    }
	                });
	            }
	            catch (e) {
	                this._animationPrefix = null;
	                this._transitionEnd = null;
	            }
	        }
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
	        /**
	         * @param {?} el
	         * @param {?} baseUrl
	         * @param {?} href
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	        };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	            return typeof ((this.defaultDoc().body)).createShadowRoot === 'function';
	        };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	        /**
	         * @return {?}
	         */
	        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	            return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
	        };
	        return GenericBrowserDomAdapter;
	    }(DomAdapter));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ _attrToPropMap = {
	        'class': 'className',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex',
	    };
	    var /** @type {?} */ DOM_KEY_LOCATION_NUMPAD = 3;
	    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	    var /** @type {?} */ _keyMap = {
	        // The following values are here for cross-browser compatibility and to match the W3C standard
	        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	        '\b': 'Backspace',
	        '\t': 'Tab',
	        '\x7F': 'Delete',
	        '\x1B': 'Escape',
	        'Del': 'Delete',
	        'Esc': 'Escape',
	        'Left': 'ArrowLeft',
	        'Right': 'ArrowRight',
	        'Up': 'ArrowUp',
	        'Down': 'ArrowDown',
	        'Menu': 'ContextMenu',
	        'Scroll': 'ScrollLock',
	        'Win': 'OS'
	    };
	    // There is a bug in Chrome for numeric keypad keys:
	    // https://code.google.com/p/chromium/issues/detail?id=155654
	    // 1, 2, 3 ... are reported as A, B, C ...
	    var /** @type {?} */ _chromeNumKeyPadMap = {
	        'A': '1',
	        'B': '2',
	        'C': '3',
	        'D': '4',
	        'E': '5',
	        'F': '6',
	        'G': '7',
	        'H': '8',
	        'I': '9',
	        'J': '*',
	        'K': '+',
	        'M': '-',
	        'N': '.',
	        'O': '/',
	        '\x60': '0',
	        '\x90': 'NumLock'
	    };
	    var BrowserDomAdapter = (function (_super) {
	        __extends(BrowserDomAdapter, _super);
	        function BrowserDomAdapter() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} templateHtml
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	        /**
	         * @param {?} el
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
	        /**
	         * @param {?} el
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
	        /**
	         * @param {?} el
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = ((el)))[methodName].apply(_a, args); var _a; };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logError = function (error) {
	            if (window.console) {
	                if (console.error) {
	                    console.error(error);
	                }
	                else {
	                    console.log(error);
	                }
	            }
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.log = function (error) {
	            if (window.console) {
	                window.console.log && window.console.log(error);
	            }
	        };
	        /**
	         * @param {?} error
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logGroup = function (error) {
	            if (window.console) {
	                window.console.group && window.console.group(error);
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.logGroupEnd = function () {
	            if (window.console) {
	                window.console.groupEnd && window.console.groupEnd();
	            }
	        };
	        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	            /**
	             * @return {?}
	             */
	            get: function () { return _attrToPropMap; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	        /**
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.querySelector = function (el, selector) {
	            return (el.querySelector(selector));
	        };
	        /**
	         * @param {?} el
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @param {?} listener
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	            el.addEventListener(evt, listener, false);
	            // Needed to follow Dart's subscription semantic, until fix of
	            // https://code.google.com/p/dart/issues/detail?id=17406
	            return function () { el.removeEventListener(evt, listener, false); };
	        };
	        /**
	         * @param {?} el
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	        /**
	         * @param {?} eventType
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	            var /** @type {?} */ evt = document.createEvent('MouseEvent');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        /**
	         * @param {?} eventType
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createEvent = function (eventType) {
	            var /** @type {?} */ evt = document.createEvent('Event');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        /**
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.preventDefault = function (evt) {
	            evt.preventDefault();
	            evt.returnValue = false;
	        };
	        /**
	         * @param {?} evt
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isPrevented = function (evt) {
	            return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.content = function (node) {
	            if (this.hasProperty(node, 'content')) {
	                return ((node)).content;
	            }
	            else {
	                return node;
	            }
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	            var /** @type {?} */ childNodes = el.childNodes;
	            var /** @type {?} */ res = new Array(childNodes.length);
	            for (var /** @type {?} */ i = 0; i < childNodes.length; i++) {
	                res[i] = childNodes[i];
	            }
	            return res;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.clearNodes = function (el) {
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	        /**
	         * @param {?} el
	         * @param {?} newChild
	         * @param {?} oldChild
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.remove = function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	            return node;
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	        /**
	         * @param {?} el
	         * @param {?} nodes
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	            nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
	        };
	        /**
	         * @param {?} el
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	        /**
	         * @param {?} el
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	        /**
	         * @param {?} html
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createTemplate = function (html) {
	            var /** @type {?} */ t = document.createElement('template');
	            t.innerHTML = html;
	            return t;
	        };
	        /**
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElement(tagName);
	        };
	        /**
	         * @param {?} ns
	         * @param {?} tagName
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElementNS(ns, tagName);
	        };
	        /**
	         * @param {?} text
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createTextNode(text);
	        };
	        /**
	         * @param {?} attrName
	         * @param {?} attrValue
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	            if (doc === void 0) { doc = document; }
	            var /** @type {?} */ el = (doc.createElement('SCRIPT'));
	            el.setAttribute(attrName, attrValue);
	            return el;
	        };
	        /**
	         * @param {?} css
	         * @param {?=} doc
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	            if (doc === void 0) { doc = document; }
	            var /** @type {?} */ style = (doc.createElement('style'));
	            this.appendChild(style, this.createTextNode(css));
	            return style;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	            return element.getElementsByClassName(name);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	            return element.getElementsByTagName(name);
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	        /**
	         * @param {?} element
	         * @param {?} className
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasClass = function (element, className) {
	            return element.classList.contains(className);
	        };
	        /**
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	            element.style[styleName] = styleValue;
	        };
	        /**
	         * @param {?} element
	         * @param {?} stylename
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            element.style[stylename] = '';
	        };
	        /**
	         * @param {?} element
	         * @param {?} stylename
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	        /**
	         * @param {?} element
	         * @param {?} styleName
	         * @param {?=} styleValue
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	            if (styleValue === void 0) { styleValue = null; }
	            var /** @type {?} */ value = this.getStyle(element, styleName) || '';
	            return styleValue ? value == styleValue : value.length > 0;
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.attributeMap = function (element) {
	            var /** @type {?} */ res = new Map();
	            var /** @type {?} */ elAttrs = element.attributes;
	            for (var /** @type {?} */ i = 0; i < elAttrs.length; i++) {
	                var /** @type {?} */ attrib = elAttrs[i];
	                res.set(attrib.name, attrib.value);
	            }
	            return res;
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	            return element.hasAttribute(attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	            return element.hasAttributeNS(ns, attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	            return element.getAttribute(attribute);
	        };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	            return element.getAttributeNS(ns, name);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	            element.setAttributeNS(ns, name, value);
	        };
	        /**
	         * @param {?} element
	         * @param {?} attribute
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	        /**
	         * @param {?} element
	         * @param {?} ns
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	            element.removeAttributeNS(ns, name);
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.createHtmlDocument = function () {
	            return document.implementation.createHTMLDocument('fakeTitle');
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	            try {
	                return el.getBoundingClientRect();
	            }
	            catch (e) {
	                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	        /**
	         * @param {?} newTitle
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	        /**
	         * @param {?} n
	         * @param {?} selector
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	            if (n instanceof HTMLElement) {
	                return n.matches && n.matches(selector) ||
	                    n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	            }
	            return false;
	        };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	            return isPresent(node.shadowRoot) && node instanceof HTMLElement;
	        };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
	        /**
	         * @param {?} event
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getEventKey = function (event) {
	            var /** @type {?} */ key = event.key;
	            if (isBlank(key)) {
	                key = event.keyIdentifier;
	                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	                // Safari cf
	                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	                if (isBlank(key)) {
	                    return 'Unidentified';
	                }
	                if (key.startsWith('U+')) {
	                    key = String.fromCharCode(parseInt(key.substring(2), 16));
	                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                        // There is a bug in Chrome for numeric keypad keys:
	                        // https://code.google.com/p/chromium/issues/detail?id=155654
	                        // 1, 2, 3 ... are reported as A, B, C ...
	                        key = ((_chromeNumKeyPadMap))[key];
	                    }
	                }
	            }
	            return _keyMap[key] || key;
	        };
	        /**
	         * @param {?} target
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	            if (target === 'window') {
	                return window;
	            }
	            if (target === 'document') {
	                return document;
	            }
	            if (target === 'body') {
	                return document.body;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getBaseHref = function () {
	            var /** @type {?} */ href = getBaseElementHref();
	            return isBlank(href) ? null : relativePath(href);
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setData = function (element, name, value) {
	            this.setAttribute(element, 'data-' + name, value);
	        };
	        /**
	         * @param {?} element
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getData = function (element, name) {
	            return this.getAttribute(element, 'data-' + name);
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	        /**
	         * @param {?} path
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	            return typeof ((Element)).prototype['animate'] === 'function';
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.performanceNow = function () {
	            // performance.now() is not available in all browsers, see
	            // http://caniuse.com/#search=performance.now
	            return window.performance && window.performance.now ? window.performance.now() :
	                new Date().getTime();
	        };
	        /**
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	        /**
	         * @param {?} name
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	        /**
	         * @param {?} name
	         * @param {?} value
	         * @return {?}
	         */
	        BrowserDomAdapter.prototype.setCookie = function (name, value) {
	            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	            // not clear other cookies.
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	        };
	        return BrowserDomAdapter;
	    }(GenericBrowserDomAdapter));
	    var /** @type {?} */ baseElement = null;
	    /**
	     * @return {?}
	     */
	    function getBaseElementHref() {
	        if (!baseElement) {
	            baseElement = document.querySelector('base');
	            if (!baseElement) {
	                return null;
	            }
	        }
	        return baseElement.getAttribute('href');
	    }
	    // based on urlUtils.js in AngularJS 1
	    var /** @type {?} */ urlParsingNode;
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function relativePath(url) {
	        if (!urlParsingNode) {
	            urlParsingNode = document.createElement('a');
	        }
	        urlParsingNode.setAttribute('href', url);
	        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname;
	    }
	    /**
	     * @param {?} cookieStr
	     * @param {?} name
	     * @return {?}
	     */
	    function parseCookieValue(cookieStr, name) {
	        name = encodeURIComponent(name);
	        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	            var cookie = _a[_i];
	            var /** @type {?} */ eqIndex = cookie.indexOf('=');
	            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	            if (cookieName.trim() === name) {
	                return decodeURIComponent(cookieValue);
	            }
	        }
	        return null;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     * @return {?}
	     */
	    function supportsState() {
	        return !!window.history.pushState;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	     * This class should not be used directly by an application developer. Instead, use
	     * {\@link Location}.
	     */
	    var BrowserPlatformLocation = (function (_super) {
	        __extends$2(BrowserPlatformLocation, _super);
	        function BrowserPlatformLocation() {
	            _super.call(this);
	            this._init();
	        }
	        /**
	         * \@internal
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype._init = function () {
	            this._location = getDOM().getLocation();
	            this._history = getDOM().getHistory();
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.onPopState = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	        };
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.pathname; },
	            /**
	             * @param {?} newPath
	             * @return {?}
	             */
	            set: function (newPath) { this._location.pathname = newPath; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.search; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._location.hash; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.pushState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.replaceState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	        /**
	         * @return {?}
	         */
	        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	        BrowserPlatformLocation.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserPlatformLocation.ctorParameters = function () { return []; };
	        return BrowserPlatformLocation;
	    }(_angular_common.PlatformLocation));

	    var BrowserGetTestability = (function () {
	        function BrowserGetTestability() {
	        }
	        /**
	         * @return {?}
	         */
	        BrowserGetTestability.init = function () { core.setTestabilityGetter(new BrowserGetTestability()); };
	        /**
	         * @param {?} registry
	         * @return {?}
	         */
	        BrowserGetTestability.prototype.addToWindow = function (registry) {
	            global$1.getAngularTestability = function (elem, findInAncestors) {
	                if (findInAncestors === void 0) { findInAncestors = true; }
	                var /** @type {?} */ testability = registry.findTestabilityInTree(elem, findInAncestors);
	                if (testability == null) {
	                    throw new Error('Could not find testability for element.');
	                }
	                return testability;
	            };
	            global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
	            global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
	            var /** @type {?} */ whenAllStable = function (callback /** TODO #9100 */) {
	                var /** @type {?} */ testabilities = global$1.getAllAngularTestabilities();
	                var /** @type {?} */ count = testabilities.length;
	                var /** @type {?} */ didWork = false;
	                var /** @type {?} */ decrement = function (didWork_ /** TODO #9100 */) {
	                    didWork = didWork || didWork_;
	                    count--;
	                    if (count == 0) {
	                        callback(didWork);
	                    }
	                };
	                testabilities.forEach(function (testability /** TODO #9100 */) {
	                    testability.whenStable(decrement);
	                });
	            };
	            if (!global$1['frameworkStabilizers']) {
	                global$1['frameworkStabilizers'] = [];
	            }
	            global$1['frameworkStabilizers'].push(whenAllStable);
	        };
	        /**
	         * @param {?} registry
	         * @param {?} elem
	         * @param {?} findInAncestors
	         * @return {?}
	         */
	        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            if (elem == null) {
	                return null;
	            }
	            var /** @type {?} */ t = registry.getTestability(elem);
	            if (isPresent(t)) {
	                return t;
	            }
	            else if (!findInAncestors) {
	                return null;
	            }
	            if (getDOM().isShadowRoot(elem)) {
	                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	            }
	            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	        };
	        return BrowserGetTestability;
	    }());

	    /**
	     * A service that can be used to get and set the title of a current HTML document.
	     *
	     * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	     * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	     * title value.
	     *
	     * \@experimental
	     */
	    var Title = (function () {
	        function Title() {
	        }
	        /**
	         * Get the title of the current HTML document.
	         * @return {?}
	         */
	        Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	        /**
	         * Set the title of the current HTML document.
	         * @param {?} newTitle
	         * @return {?}
	         */
	        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	        return Title;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.merge = function (m1, m2) {
	            var /** @type {?} */ m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        /**
	         * @param {?} m1
	         * @param {?} m2
	         * @return {?}
	         */
	        StringMapWrapper.equals = function (m1, m2) {
	            var /** @type {?} */ k1 = Object.keys(m1);
	            var /** @type {?} */ k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var /** @type {?} */ i = 0; i < k1.length; i++) {
	                var /** @type {?} */ key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());

	    /**
	     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	     *
	     * Note: Document might not be available in the Application Context when Application and Rendering
	     * Contexts are not the same (e.g. when running the application into a Web Worker).
	     *
	     * @stable
	     */
	    var /** @type {?} */ DOCUMENT = new core.OpaqueToken('DocumentToken');

	    /**
	     * @stable
	     */
	    var /** @type {?} */ EVENT_MANAGER_PLUGINS = new core.OpaqueToken('EventManagerPlugins');
	    /**
	     * \@stable
	     */
	    var EventManager = (function () {
	        /**
	         * @param {?} plugins
	         * @param {?} _zone
	         */
	        function EventManager(plugins, _zone) {
	            var _this = this;
	            this._zone = _zone;
	            this._eventNameToPlugin = new Map();
	            plugins.forEach(function (p) { return p.manager = _this; });
	            this._plugins = plugins.slice().reverse();
	        }
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManager.prototype.addEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ plugin = this._findPluginFor(eventName);
	            return plugin.addEventListener(element, eventName, handler);
	        };
	        /**
	         * @param {?} target
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	            var /** @type {?} */ plugin = this._findPluginFor(eventName);
	            return plugin.addGlobalEventListener(target, eventName, handler);
	        };
	        /**
	         * @return {?}
	         */
	        EventManager.prototype.getZone = function () { return this._zone; };
	        /**
	         * \@internal
	         * @param {?} eventName
	         * @return {?}
	         */
	        EventManager.prototype._findPluginFor = function (eventName) {
	            var /** @type {?} */ plugin = this._eventNameToPlugin.get(eventName);
	            if (plugin) {
	                return plugin;
	            }
	            var /** @type {?} */ plugins = this._plugins;
	            for (var /** @type {?} */ i = 0; i < plugins.length; i++) {
	                var /** @type {?} */ plugin_1 = plugins[i];
	                if (plugin_1.supports(eventName)) {
	                    this._eventNameToPlugin.set(eventName, plugin_1);
	                    return plugin_1;
	                }
	            }
	            throw new Error("No event manager plugin found for event " + eventName);
	        };
	        EventManager.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        EventManager.ctorParameters = function () { return [
	            { type: Array, decorators: [{ type: core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	            { type: core.NgZone, },
	        ]; };
	        return EventManager;
	    }());
	    /**
	     * @abstract
	     */
	    var EventManagerPlugin = (function () {
	        function EventManagerPlugin() {
	        }
	        /**
	         * @abstract
	         * @param {?} eventName
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.supports = function (eventName) { };
	        /**
	         * @abstract
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ target = getDOM().getGlobalEventTarget(element);
	            if (!target) {
	                throw new Error("Unsupported event target " + target + " for event " + eventName);
	            }
	            return this.addEventListener(target, eventName, handler);
	        };
	        ;
	        return EventManagerPlugin;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var SharedStylesHost = (function () {
	        function SharedStylesHost() {
	            /** @internal */
	            this._styles = [];
	            /** @internal */
	            this._stylesSet = new Set();
	        }
	        /**
	         * @param {?} styles
	         * @return {?}
	         */
	        SharedStylesHost.prototype.addStyles = function (styles) {
	            var _this = this;
	            var /** @type {?} */ additions = [];
	            styles.forEach(function (style) {
	                if (!_this._stylesSet.has(style)) {
	                    _this._stylesSet.add(style);
	                    _this._styles.push(style);
	                    additions.push(style);
	                }
	            });
	            this.onStylesAdded(additions);
	        };
	        /**
	         * @param {?} additions
	         * @return {?}
	         */
	        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	        /**
	         * @return {?}
	         */
	        SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	        SharedStylesHost.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        SharedStylesHost.ctorParameters = function () { return []; };
	        return SharedStylesHost;
	    }());
	    var DomSharedStylesHost = (function (_super) {
	        __extends$4(DomSharedStylesHost, _super);
	        /**
	         * @param {?} doc
	         */
	        function DomSharedStylesHost(doc) {
	            _super.call(this);
	            this._hostNodes = new Set();
	            this._hostNodes.add(doc.head);
	        }
	        /**
	         * \@internal
	         * @param {?} styles
	         * @param {?} host
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	            for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	                var /** @type {?} */ styleEl = document.createElement('style');
	                styleEl.textContent = styles[i];
	                host.appendChild(styleEl);
	            }
	        };
	        /**
	         * @param {?} hostNode
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.addHost = function (hostNode) {
	            this._addStylesToHost(this._styles, hostNode);
	            this._hostNodes.add(hostNode);
	        };
	        /**
	         * @param {?} hostNode
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	        /**
	         * @param {?} additions
	         * @return {?}
	         */
	        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	            var _this = this;
	            this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	        };
	        DomSharedStylesHost.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSharedStylesHost.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	        ]; };
	        return DomSharedStylesHost;
	    }(SharedStylesHost));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ NAMESPACE_URIS = {
	        'xlink': 'http://www.w3.org/1999/xlink',
	        'svg': 'http://www.w3.org/2000/svg',
	        'xhtml': 'http://www.w3.org/1999/xhtml'
	    };
	    var /** @type {?} */ TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	    var /** @type {?} */ TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	    /**
	     * @abstract
	     */
	    var DomRootRenderer = (function () {
	        /**
	         * @param {?} document
	         * @param {?} eventManager
	         * @param {?} sharedStylesHost
	         * @param {?} animationDriver
	         * @param {?} appId
	         */
	        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
	            this.document = document;
	            this.eventManager = eventManager;
	            this.sharedStylesHost = sharedStylesHost;
	            this.animationDriver = animationDriver;
	            this.appId = appId;
	            this.registeredComponents = new Map();
	        }
	        /**
	         * @param {?} componentProto
	         * @return {?}
	         */
	        DomRootRenderer.prototype.renderComponent = function (componentProto) {
	            var /** @type {?} */ renderer = this.registeredComponents.get(componentProto.id);
	            if (!renderer) {
	                renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
	                this.registeredComponents.set(componentProto.id, renderer);
	            }
	            return renderer;
	        };
	        return DomRootRenderer;
	    }());
	    var DomRootRenderer_ = (function (_super) {
	        __extends$3(DomRootRenderer_, _super);
	        /**
	         * @param {?} _document
	         * @param {?} _eventManager
	         * @param {?} sharedStylesHost
	         * @param {?} animationDriver
	         * @param {?} appId
	         */
	        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
	            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
	        }
	        DomRootRenderer_.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomRootRenderer_.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: core.Inject, args: [DOCUMENT,] },] },
	            { type: EventManager, },
	            { type: DomSharedStylesHost, },
	            { type: AnimationDriver, },
	            { type: undefined, decorators: [{ type: core.Inject, args: [core.APP_ID,] },] },
	        ]; };
	        return DomRootRenderer_;
	    }(DomRootRenderer));
	    var /** @type {?} */ DIRECT_DOM_RENDERER = {
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        remove: function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	        },
	        /**
	         * @param {?} node
	         * @param {?} parent
	         * @return {?}
	         */
	        appendChild: function (node, parent) { parent.appendChild(node); },
	        /**
	         * @param {?} node
	         * @param {?} refNode
	         * @return {?}
	         */
	        insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        nextSibling: function (node) { return node.nextSibling; },
	        /**
	         * @param {?} node
	         * @return {?}
	         */
	        parentElement: function (node) { return (node.parentNode); }
	    };
	    var DomRenderer = (function () {
	        /**
	         * @param {?} _rootRenderer
	         * @param {?} componentProto
	         * @param {?} _animationDriver
	         * @param {?} styleShimId
	         */
	        function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
	            this._rootRenderer = _rootRenderer;
	            this.componentProto = componentProto;
	            this._animationDriver = _animationDriver;
	            this.directRenderer = DIRECT_DOM_RENDERER;
	            this._styles = flattenStyles(styleShimId, componentProto.styles, []);
	            if (componentProto.encapsulation !== core.ViewEncapsulation.Native) {
	                this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	            }
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Emulated) {
	                this._contentAttr = shimContentAttribute(styleShimId);
	                this._hostAttr = shimHostAttribute(styleShimId);
	            }
	            else {
	                this._contentAttr = null;
	                this._hostAttr = null;
	            }
	        }
	        /**
	         * @param {?} selectorOrNode
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var /** @type {?} */ el;
	            if (typeof selectorOrNode === 'string') {
	                el = this._rootRenderer.document.querySelector(selectorOrNode);
	                if (!el) {
	                    throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	                }
	            }
	            else {
	                el = selectorOrNode;
	            }
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	            return el;
	        };
	        /**
	         * @param {?} parent
	         * @param {?} name
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	            var /** @type {?} */ el;
	            if (isNamespaced(name)) {
	                var /** @type {?} */ nsAndName = splitNamespace(name);
	                el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
	            }
	            else {
	                el = document.createElement(name);
	            }
	            if (this._contentAttr) {
	                el.setAttribute(this._contentAttr, '');
	            }
	            if (parent) {
	                parent.appendChild(el);
	            }
	            return el;
	        };
	        /**
	         * @param {?} hostElement
	         * @return {?}
	         */
	        DomRenderer.prototype.createViewRoot = function (hostElement) {
	            var /** @type {?} */ nodesParent;
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Native) {
	                nodesParent = ((hostElement)).createShadowRoot();
	                this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	                for (var /** @type {?} */ i = 0; i < this._styles.length; i++) {
	                    var /** @type {?} */ styleEl = document.createElement('style');
	                    styleEl.textContent = this._styles[i];
	                    nodesParent.appendChild(styleEl);
	                }
	            }
	            else {
	                if (this._hostAttr) {
	                    hostElement.setAttribute(this._hostAttr, '');
	                }
	                nodesParent = hostElement;
	            }
	            return nodesParent;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var /** @type {?} */ comment = document.createComment(TEMPLATE_COMMENT_TEXT);
	            if (parentElement) {
	                parentElement.appendChild(comment);
	            }
	            return comment;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} value
	         * @param {?} debugInfo
	         * @return {?}
	         */
	        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var /** @type {?} */ node = document.createTextNode(value);
	            if (parentElement) {
	                parentElement.appendChild(node);
	            }
	            return node;
	        };
	        /**
	         * @param {?} parentElement
	         * @param {?} nodes
	         * @return {?}
	         */
	        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            if (!parentElement)
	                return;
	            appendNodes(parentElement, nodes);
	        };
	        /**
	         * @param {?} node
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	        /**
	         * @param {?} viewRootNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.detachView = function (viewRootNodes) {
	            for (var /** @type {?} */ i = 0; i < viewRootNodes.length; i++) {
	                var /** @type {?} */ node = viewRootNodes[i];
	                if (node.parentNode) {
	                    node.parentNode.removeChild(node);
	                }
	            }
	        };
	        /**
	         * @param {?} hostElement
	         * @param {?} viewAllNodes
	         * @return {?}
	         */
	        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            if (this.componentProto.encapsulation === core.ViewEncapsulation.Native && hostElement) {
	                this._rootRenderer.sharedStylesHost.removeHost(((hostElement)).shadowRoot);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DomRenderer.prototype.listen = function (renderElement, name, callback) {
	            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	        };
	        /**
	         * @param {?} target
	         * @param {?} name
	         * @param {?} callback
	         * @return {?}
	         */
	        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            ((renderElement))[propertyName] = propertyValue;
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} attributeName
	         * @param {?} attributeValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var /** @type {?} */ attrNs;
	            var /** @type {?} */ attrNameWithoutNs = attributeName;
	            if (isNamespaced(attributeName)) {
	                var /** @type {?} */ nsAndName = splitNamespace(attributeName);
	                attrNameWithoutNs = nsAndName[1];
	                attributeName = nsAndName[0] + ':' + nsAndName[1];
	                attrNs = NAMESPACE_URIS[nsAndName[0]];
	            }
	            if (isPresent(attributeValue)) {
	                if (attrNs) {
	                    renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
	                }
	                else {
	                    renderElement.setAttribute(attributeName, attributeValue);
	                }
	            }
	            else {
	                if (isPresent(attrNs)) {
	                    renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
	                }
	                else {
	                    renderElement.removeAttribute(attributeName);
	                }
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} propertyName
	         * @param {?} propertyValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            if (renderElement.nodeType === Node.COMMENT_NODE) {
	                var /** @type {?} */ existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
	                var /** @type {?} */ parsedBindings = JSON.parse(existingBindings[1]);
	                parsedBindings[propertyName] = propertyValue;
	                renderElement.nodeValue =
	                    TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
	            }
	            else {
	                this.setElementAttribute(renderElement, propertyName, propertyValue);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} className
	         * @param {?} isAdd
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            if (isAdd) {
	                renderElement.classList.add(className);
	            }
	            else {
	                renderElement.classList.remove(className);
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} styleName
	         * @param {?} styleValue
	         * @return {?}
	         */
	        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            if (isPresent(styleValue)) {
	                ((renderElement.style))[styleName] = stringify(styleValue);
	            }
	            else {
	                // IE requires '' instead of null
	                // see https://github.com/angular/angular/issues/7916
	                ((renderElement.style))[styleName] = '';
	            }
	        };
	        /**
	         * @param {?} renderElement
	         * @param {?} methodName
	         * @param {?} args
	         * @return {?}
	         */
	        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            ((renderElement))[methodName].apply(renderElement, args);
	        };
	        /**
	         * @param {?} renderNode
	         * @param {?} text
	         * @return {?}
	         */
	        DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
	        /**
	         * @param {?} element
	         * @param {?} startingStyles
	         * @param {?} keyframes
	         * @param {?} duration
	         * @param {?} delay
	         * @param {?} easing
	         * @param {?=} previousPlayers
	         * @return {?}
	         */
	        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            if (this._rootRenderer.document.body.contains(element)) {
	                return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	            }
	            return new NoOpAnimationPlayer();
	        };
	        return DomRenderer;
	    }());
	    /**
	     * @param {?} sibling
	     * @param {?} nodes
	     * @return {?}
	     */
	    function moveNodesAfterSibling(sibling, nodes) {
	        var /** @type {?} */ parent = sibling.parentNode;
	        if (nodes.length > 0 && parent) {
	            var /** @type {?} */ nextSibling = sibling.nextSibling;
	            if (nextSibling) {
	                for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                    parent.insertBefore(nodes[i], nextSibling);
	                }
	            }
	            else {
	                for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	                    parent.appendChild(nodes[i]);
	                }
	            }
	        }
	    }
	    /**
	     * @param {?} parent
	     * @param {?} nodes
	     * @return {?}
	     */
	    function appendNodes(parent, nodes) {
	        for (var /** @type {?} */ i = 0; i < nodes.length; i++) {
	            parent.appendChild(nodes[i]);
	        }
	    }
	    /**
	     * @param {?} eventHandler
	     * @return {?}
	     */
	    function decoratePreventDefault(eventHandler) {
	        return function (event) {
	            var /** @type {?} */ allowDefaultBehavior = eventHandler(event);
	            if (allowDefaultBehavior === false) {
	                // TODO(tbosch): move preventDefault into event plugins...
	                event.preventDefault();
	                event.returnValue = false;
	            }
	        };
	    }
	    var /** @type {?} */ COMPONENT_REGEX = /%COMP%/g;
	    var /** @type {?} */ COMPONENT_VARIABLE = '%COMP%';
	    var /** @type {?} */ HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var /** @type {?} */ CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    /**
	     * @param {?} componentShortId
	     * @return {?}
	     */
	    function shimContentAttribute(componentShortId) {
	        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    /**
	     * @param {?} componentShortId
	     * @return {?}
	     */
	    function shimHostAttribute(componentShortId) {
	        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    /**
	     * @param {?} compId
	     * @param {?} styles
	     * @param {?} target
	     * @return {?}
	     */
	    function flattenStyles(compId, styles, target) {
	        for (var /** @type {?} */ i = 0; i < styles.length; i++) {
	            var /** @type {?} */ style = styles[i];
	            if (Array.isArray(style)) {
	                flattenStyles(compId, style, target);
	            }
	            else {
	                style = style.replace(COMPONENT_REGEX, compId);
	                target.push(style);
	            }
	        }
	        return target;
	    }
	    var /** @type {?} */ NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function isNamespaced(name) {
	        return name[0] === ':';
	    }
	    /**
	     * @param {?} name
	     * @return {?}
	     */
	    function splitNamespace(name) {
	        var /** @type {?} */ match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }

	    var /** @type {?} */ CORE_TOKENS = {
	        'ApplicationRef': core.ApplicationRef,
	        'NgZone': core.NgZone,
	    };
	    var /** @type {?} */ INSPECT_GLOBAL_NAME = 'ng.probe';
	    var /** @type {?} */ CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	    /**
	     * Returns a {\@link DebugElement} for the given native DOM element, or
	     * null if the given native element does not have an Angular view associated
	     * with it.
	     * @param {?} element
	     * @return {?}
	     */
	    function inspectNativeElement(element) {
	        return core.getDebugNode(element);
	    }
	    /**
	     * Deprecated. Use the one from '\@angular/core'.
	     * @deprecated
	     */
	    var NgProbeToken = (function () {
	        /**
	         * @param {?} name
	         * @param {?} token
	         */
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    /**
	     * @param {?} rootRenderer
	     * @param {?} extraTokens
	     * @param {?} coreTokens
	     * @return {?}
	     */
	    function _createConditionalRootRenderer(rootRenderer, extraTokens, coreTokens) {
	        return core.isDevMode() ?
	            _createRootRenderer(rootRenderer, (extraTokens || []).concat(coreTokens || [])) :
	            rootRenderer;
	    }
	    /**
	     * @param {?} rootRenderer
	     * @param {?} extraTokens
	     * @return {?}
	     */
	    function _createRootRenderer(rootRenderer, extraTokens) {
	        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	        return new DebugDomRootRenderer(rootRenderer);
	    }
	    /**
	     * @param {?} tokens
	     * @return {?}
	     */
	    function _ngProbeTokensToMap(tokens) {
	        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	    }
	    /**
	     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	     */
	    var /** @type {?} */ ELEMENT_PROBE_PROVIDERS = [{
	            provide: core.RootRenderer,
	            useFactory: _createConditionalRootRenderer,
	            deps: [
	                DomRootRenderer, [NgProbeToken, new core.Optional()],
	                [core.NgProbeToken, new core.Optional()]
	            ]
	        }];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var DomEventsPlugin = (function (_super) {
	        __extends$5(DomEventsPlugin, _super);
	        function DomEventsPlugin() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            element.addEventListener(eventName, /** @type {?} */ (handler), false);
	            return function () { return element.removeEventListener(eventName, /** @type {?} */ (handler), false); };
	        };
	        DomEventsPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomEventsPlugin.ctorParameters = function () { return []; };
	        return DomEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ EVENT_NAMES = {
	        // pan
	        'pan': true,
	        'panstart': true,
	        'panmove': true,
	        'panend': true,
	        'pancancel': true,
	        'panleft': true,
	        'panright': true,
	        'panup': true,
	        'pandown': true,
	        // pinch
	        'pinch': true,
	        'pinchstart': true,
	        'pinchmove': true,
	        'pinchend': true,
	        'pinchcancel': true,
	        'pinchin': true,
	        'pinchout': true,
	        // press
	        'press': true,
	        'pressup': true,
	        // rotate
	        'rotate': true,
	        'rotatestart': true,
	        'rotatemove': true,
	        'rotateend': true,
	        'rotatecancel': true,
	        // swipe
	        'swipe': true,
	        'swipeleft': true,
	        'swiperight': true,
	        'swipeup': true,
	        'swipedown': true,
	        // tap
	        'tap': true,
	    };
	    /**
	     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	     * Hammer gestures.
	     *
	     * @experimental
	     */
	    var /** @type {?} */ HAMMER_GESTURE_CONFIG = new core.OpaqueToken('HammerGestureConfig');
	    /**
	     * \@experimental
	     */
	    var HammerGestureConfig = (function () {
	        function HammerGestureConfig() {
	            this.events = [];
	            this.overrides = {};
	        }
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        HammerGestureConfig.prototype.buildHammer = function (element) {
	            var /** @type {?} */ mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            for (var eventName in this.overrides) {
	                mc.get(eventName).set(this.overrides[eventName]);
	            }
	            return mc;
	        };
	        HammerGestureConfig.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGestureConfig.ctorParameters = function () { return []; };
	        return HammerGestureConfig;
	    }());
	    var HammerGesturesPlugin = (function (_super) {
	        __extends$6(HammerGesturesPlugin, _super);
	        /**
	         * @param {?} _config
	         */
	        function HammerGesturesPlugin(_config) {
	            _super.call(this);
	            this._config = _config;
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.supports = function (eventName) {
	            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	                return false;
	            }
	            if (!((window)).Hammer) {
	                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	            }
	            return true;
	        };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var _this = this;
	            var /** @type {?} */ zone = this.manager.getZone();
	            eventName = eventName.toLowerCase();
	            return zone.runOutsideAngular(function () {
	                // Creating the manager bind events, must be done outside of angular
	                var /** @type {?} */ mc = _this._config.buildHammer(element);
	                var /** @type {?} */ callback = function (eventObj) {
	                    zone.runGuarded(function () { handler(eventObj); });
	                };
	                mc.on(eventName, callback);
	                return function () { return mc.off(eventName, callback); };
	            });
	        };
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	        HammerGesturesPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGesturesPlugin.ctorParameters = function () { return [
	            { type: HammerGestureConfig, decorators: [{ type: core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	        ]; };
	        return HammerGesturesPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var /** @type {?} */ MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	    var /** @type {?} */ MODIFIER_KEY_GETTERS = {
	        'alt': function (event) { return event.altKey; },
	        'control': function (event) { return event.ctrlKey; },
	        'meta': function (event) { return event.metaKey; },
	        'shift': function (event) { return event.shiftKey; }
	    };
	    /**
	     * \@experimental
	     */
	    var KeyEventsPlugin = (function (_super) {
	        __extends$7(KeyEventsPlugin, _super);
	        function KeyEventsPlugin() {
	            _super.call(this);
	        }
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	        /**
	         * @param {?} element
	         * @param {?} eventName
	         * @param {?} handler
	         * @return {?}
	         */
	        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var /** @type {?} */ parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	            var /** @type {?} */ outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	            return this.manager.getZone().runOutsideAngular(function () {
	                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	            });
	        };
	        /**
	         * @param {?} eventName
	         * @return {?}
	         */
	        KeyEventsPlugin.parseEventName = function (eventName) {
	            var /** @type {?} */ parts = eventName.toLowerCase().split('.');
	            var /** @type {?} */ domEventName = parts.shift();
	            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	                return null;
	            }
	            var /** @type {?} */ key = KeyEventsPlugin._normalizeKey(parts.pop());
	            var /** @type {?} */ fullKey = '';
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                var /** @type {?} */ index = parts.indexOf(modifierName);
	                if (index > -1) {
	                    parts.splice(index, 1);
	                    fullKey += modifierName + '.';
	                }
	            });
	            fullKey += key;
	            if (parts.length != 0 || key.length === 0) {
	                // returning null instead of throwing to let another plugin process the event
	                return null;
	            }
	            var /** @type {?} */ result = {};
	            result['domEventName'] = domEventName;
	            result['fullKey'] = fullKey;
	            return result;
	        };
	        /**
	         * @param {?} event
	         * @return {?}
	         */
	        KeyEventsPlugin.getEventFullKey = function (event) {
	            var /** @type {?} */ fullKey = '';
	            var /** @type {?} */ key = getDOM().getEventKey(event);
	            key = key.toLowerCase();
	            if (key === ' ') {
	                key = 'space'; // for readability
	            }
	            else if (key === '.') {
	                key = 'dot'; // because '.' is used as a separator in event names
	            }
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                if (modifierName != key) {
	                    var /** @type {?} */ modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                    if (modifierGetter(event)) {
	                        fullKey += modifierName + '.';
	                    }
	                }
	            });
	            fullKey += key;
	            return fullKey;
	        };
	        /**
	         * @param {?} fullKey
	         * @param {?} handler
	         * @param {?} zone
	         * @return {?}
	         */
	        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	            return function (event /** TODO #9100 */) {
	                if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                    zone.runGuarded(function () { return handler(event); });
	                }
	            };
	        };
	        /**
	         * \@internal
	         * @param {?} keyName
	         * @return {?}
	         */
	        KeyEventsPlugin._normalizeKey = function (keyName) {
	            // TODO: switch to a Map if the mapping grows too much
	            switch (keyName) {
	                case 'esc':
	                    return 'escape';
	                default:
	                    return keyName;
	            }
	        };
	        KeyEventsPlugin.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        KeyEventsPlugin.ctorParameters = function () { return []; };
	        return KeyEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * A pattern that recognizes a commonly useful subset of URLs that are safe.
	     *
	     * This regular expression matches a subset of URLs that will not cause script
	     * execution if used in URL context within a HTML document. Specifically, this
	     * regular expression matches if (comment from here on and regex copied from
	     * Soy's EscapingConventions):
	     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	     * (2) or no protocol.  A protocol must be followed by a colon. The below
	     *     allows that by allowing colons only after one of the characters [/?#].
	     *     A colon after a hash (#) must be in the fragment.
	     *     Otherwise, a colon after a (?) must be in a query.
	     *     Otherwise, a colon after a single solidus (/) must be in a path.
	     *     Otherwise, a colon after a double solidus (//) must be in the authority
	     *     (before port).
	     *
	     * The pattern disallows &, used in HTML entity declarations before
	     * one of the characters in [/?#]. This disallows HTML entities used in the
	     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	     * It also disallows HTML entities in the first path part of a relative path,
	     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	     * that. More importantly, it disallows masking of a colon,
	     * e.g. "javascript&#58;...".
	     *
	     * This regular expression was taken from the Closure sanitization library.
	     */
	    var /** @type {?} */ SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	    var /** @type {?} */ DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function sanitizeUrl(url) {
	        url = String(url);
	        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	            return url;
	        if (core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	        }
	        return 'unsafe:' + url;
	    }
	    /**
	     * @param {?} srcset
	     * @return {?}
	     */
	    function sanitizeSrcset(srcset) {
	        srcset = String(srcset);
	        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	    }

	    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	    var /** @type {?} */ inertElement = null;
	    /** Lazily initialized to make sure the DOM adapter gets set before use. */
	    var /** @type {?} */ DOM = null;
	    /**
	     * Returns an HTML element that is guaranteed to not execute code when creating elements in it.
	     * @return {?}
	     */
	    function getInertElement() {
	        if (inertElement)
	            return inertElement;
	        DOM = getDOM();
	        // Prefer using <template> element if supported.
	        var /** @type {?} */ templateEl = DOM.createElement('template');
	        if ('content' in templateEl)
	            return templateEl;
	        var /** @type {?} */ doc = DOM.createHtmlDocument();
	        inertElement = DOM.querySelector(doc, 'body');
	        if (inertElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so we
	            // need to create one.
	            var /** @type {?} */ html = DOM.createElement('html', doc);
	            inertElement = DOM.createElement('body', doc);
	            DOM.appendChild(html, inertElement);
	            DOM.appendChild(doc, html);
	        }
	        return inertElement;
	    }
	    /**
	     * @param {?} tags
	     * @return {?}
	     */
	    function tagSet(tags) {
	        var /** @type {?} */ res = {};
	        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	            var t = _a[_i];
	            res[t] = true;
	        }
	        return res;
	    }
	    /**
	     * @param {...?} sets
	     * @return {?}
	     */
	    function merge() {
	        var sets = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sets[_i - 0] = arguments[_i];
	        }
	        var /** @type {?} */ res = {};
	        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	            var s = sets_1[_a];
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	        return res;
	    }
	    // Good source of info about elements and attributes
	    // http://dev.w3.org/html5/spec/Overview.html#semantics
	    // http://simon.html5.org/html-elements
	    // Safe Void Elements - HTML5
	    // http://dev.w3.org/html5/spec/Overview.html#void-elements
	    var /** @type {?} */ VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	    // Elements that you can, intentionally, leave open (and which close themselves)
	    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	    var /** @type {?} */ OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	    var /** @type {?} */ OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	    var /** @type {?} */ OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	    // Safe Block Elements - HTML5
	    var /** @type {?} */ BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	    // Inline Elements - HTML5
	    var /** @type {?} */ INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	    var /** @type {?} */ VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	    // Attributes that have href and hence need to be sanitized
	    var /** @type {?} */ URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	    // Attributes that have special href set hence need to be sanitized
	    var /** @type {?} */ SRCSET_ATTRS = tagSet('srcset');
	    var /** @type {?} */ HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	        'valign,value,vspace,width');
	    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	    // innerHTML is required, SVG attributes should be added here.
	    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	    // can be sanitized, but they increase security surface area without a legitimate use case, so they
	    // are left out here.
	    var /** @type {?} */ VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	    /**
	     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	     * attributes.
	     */
	    var SanitizingHtmlSerializer = (function () {
	        function SanitizingHtmlSerializer() {
	            this.sanitizedSomething = false;
	            this.buf = [];
	        }
	        /**
	         * @param {?} el
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	            // However this code never accesses properties off of `document` before deleting its contents
	            // again, so it shouldn't be vulnerable to DOM clobbering.
	            var /** @type {?} */ current = el.firstChild;
	            while (current) {
	                if (DOM.isElementNode(current)) {
	                    this.startElement(/** @type {?} */ (current));
	                }
	                else if (DOM.isTextNode(current)) {
	                    this.chars(DOM.nodeValue(current));
	                }
	                else {
	                    // Strip non-element, non-text nodes.
	                    this.sanitizedSomething = true;
	                }
	                if (DOM.firstChild(current)) {
	                    current = DOM.firstChild(current);
	                    continue;
	                }
	                while (current) {
	                    // Leaving the element. Walk up and to the right, closing tags as we go.
	                    if (DOM.isElementNode(current)) {
	                        this.endElement(/** @type {?} */ (current));
	                    }
	                    if (DOM.nextSibling(current)) {
	                        current = DOM.nextSibling(current);
	                        break;
	                    }
	                    current = DOM.parentElement(current);
	                }
	            }
	            return this.buf.join('');
	        };
	        /**
	         * @param {?} element
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.startElement = function (element) {
	            var _this = this;
	            var /** @type {?} */ tagName = DOM.nodeName(element).toLowerCase();
	            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.sanitizedSomething = true;
	                return;
	            }
	            this.buf.push('<');
	            this.buf.push(tagName);
	            DOM.attributeMap(element).forEach(function (value, attrName) {
	                var /** @type {?} */ lower = attrName.toLowerCase();
	                if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                    _this.sanitizedSomething = true;
	                    return;
	                }
	                // TODO(martinprobst): Special case image URIs for data:image/...
	                if (URI_ATTRS[lower])
	                    value = sanitizeUrl(value);
	                if (SRCSET_ATTRS[lower])
	                    value = sanitizeSrcset(value);
	                _this.buf.push(' ');
	                _this.buf.push(attrName);
	                _this.buf.push('="');
	                _this.buf.push(encodeEntities(value));
	                _this.buf.push('"');
	            });
	            this.buf.push('>');
	        };
	        /**
	         * @param {?} current
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.endElement = function (current) {
	            var /** @type {?} */ tagName = DOM.nodeName(current).toLowerCase();
	            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.buf.push('</');
	                this.buf.push(tagName);
	                this.buf.push('>');
	            }
	        };
	        /**
	         * @param {?} chars
	         * @return {?}
	         */
	        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
	        return SanitizingHtmlSerializer;
	    }());
	    // Regular Expressions for parsing tags and attributes
	    var /** @type {?} */ SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	    // ! to ~ is the ASCII range.
	    var /** @type {?} */ NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	    /**
	     * Escapes all potentially dangerous characters, so that the
	     * resulting string can be safely inserted into attribute or
	     * element text.
	     * @param {?} value
	     * @return {?}
	     */
	    function encodeEntities(value) {
	        return value.replace(/&/g, '&amp;')
	            .replace(SURROGATE_PAIR_REGEXP, function (match) {
	            var /** @type {?} */ hi = match.charCodeAt(0);
	            var /** @type {?} */ low = match.charCodeAt(1);
	            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	        })
	            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;');
	    }
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     * @param {?} el
	     * @return {?}
	     */
	    function stripCustomNsAttrs(el) {
	        DOM.attributeMap(el).forEach(function (_, attrName) {
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                DOM.removeAttribute(el, attrName);
	            }
	        });
	        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	            var n = _a[_i];
	            if (DOM.isElementNode(n))
	                stripCustomNsAttrs(/** @type {?} */ (n));
	        }
	    }
	    /**
	     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	     * the DOM in a browser environment.
	     * @param {?} unsafeHtmlInput
	     * @return {?}
	     */
	    function sanitizeHtml(unsafeHtmlInput) {
	        try {
	            var /** @type {?} */ containerEl = getInertElement();
	            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	            var /** @type {?} */ unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	            var /** @type {?} */ mXSSAttempts = 5;
	            var /** @type {?} */ parsedHtml = unsafeHtml;
	            do {
	                if (mXSSAttempts === 0) {
	                    throw new Error('Failed to sanitize html because the input is unstable');
	                }
	                mXSSAttempts--;
	                unsafeHtml = parsedHtml;
	                DOM.setInnerHTML(containerEl, unsafeHtml);
	                if (((DOM.defaultDoc())).documentMode) {
	                    // strip custom-namespaced attributes on IE<=11
	                    stripCustomNsAttrs(containerEl);
	                }
	                parsedHtml = DOM.getInnerHTML(containerEl);
	            } while (unsafeHtml !== parsedHtml);
	            var /** @type {?} */ sanitizer = new SanitizingHtmlSerializer();
	            var /** @type {?} */ safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	            // Clear out the body element.
	            var /** @type {?} */ parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
	            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
	                var child = _a[_i];
	                DOM.removeChild(parent_1, child);
	            }
	            if (core.isDevMode() && sanitizer.sanitizedSomething) {
	                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	            }
	            return safeHtml;
	        }
	        catch (e) {
	            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	            inertElement = null;
	            throw e;
	        }
	    }

	    /**
	     * Regular expression for safe style values.
	     *
	     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	     *
	     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	     * of XSS.
	     *
	     * The function expression checks only for XSS safety, not for CSS validity.
	     *
	     * This regular expression was taken from the Closure sanitization library, and augmented for
	     * transformation values.
	     */
	    var /** @type {?} */ VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	    var /** @type {?} */ TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	    var /** @type {?} */ COLOR_FNS = '(?:rgb|hsl)a?';
	    var /** @type {?} */ GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
	    var /** @type {?} */ CSS3_FNS = '(?:calc|attr)';
	    var /** @type {?} */ FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
	    var /** @type {?} */ SAFE_STYLE_VALUE = new RegExp(("^(" + VALUES + "|") +
	        ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
	        (FN_ARGS + ")$"), 'g');
	    /**
	     * Matches a `url(...)` value with an arbitrary argument as long as it does
	     * not contain parentheses.
	     *
	     * The URL value still needs to be sanitized separately.
	     *
	     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	     * by observing whether scroll bars are displayed, or character ranges used by a font face
	     * definition.
	     *
	     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	     * binding a URL value without further cooperation from the page will cause an information leak, and
	     * if so, it is just a leak, not a full blown XSS vulnerability.
	     *
	     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	     * code is permissive and allows URLs that sanitize otherwise.
	     */
	    var /** @type {?} */ URL_RE = /^url\(([^)]+)\)$/;
	    /**
	     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	     * that neither escape (\) nor any other character that could result in
	     * breaking out of a string parsing context are allowed;
	     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	     *
	     * This code was taken from the Closure sanitization library.
	     * @param {?} value
	     * @return {?}
	     */
	    function hasBalancedQuotes(value) {
	        var /** @type {?} */ outsideSingle = true;
	        var /** @type {?} */ outsideDouble = true;
	        for (var /** @type {?} */ i = 0; i < value.length; i++) {
	            var /** @type {?} */ c = value.charAt(i);
	            if (c === '\'' && outsideDouble) {
	                outsideSingle = !outsideSingle;
	            }
	            else if (c === '"' && outsideSingle) {
	                outsideDouble = !outsideDouble;
	            }
	        }
	        return outsideSingle && outsideDouble;
	    }
	    /**
	     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	     * value) and returns a value that is safe to use in a browser environment.
	     * @param {?} value
	     * @return {?}
	     */
	    function sanitizeStyle(value) {
	        value = String(value).trim(); // Make sure it's actually a string.
	        if (!value)
	            return '';
	        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	        // reasoning behind this.
	        var /** @type {?} */ urlMatch = value.match(URL_RE);
	        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	            return value; // Safe style values.
	        }
	        if (core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	        }
	        return 'unsafe';
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	     * values to be safe to use in the different DOM contexts.
	     *
	     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	     * the website.
	     *
	     * In specific situations, it might be necessary to disable sanitization, for example if the
	     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	     * methods, and then binding to that value from the template.
	     *
	     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	     * Cross Site Scripting (XSS) security bug!
	     *
	     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	     * close as possible to the source of the value, to make it easy to verify no security bug is
	     * created by its use.
	     *
	     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	     * code. The sanitizer leaves safe values intact.
	     *
	     * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	     * sanitization for the value passed in. Carefully check and audit all values and code paths going
	     * into this call. Make sure any user data is appropriately escaped for this security context.
	     * For more detail, see the [Security Guide](http://g.co/ng/security).
	     *
	     * \@stable
	     * @abstract
	     */
	    var DomSanitizer = (function () {
	        function DomSanitizer() {
	        }
	        /**
	         * Sanitizes a value for use in the given SecurityContext.
	         *
	         * If value is trusted for the context, this method will unwrap the contained safe value and use
	         * it directly. Otherwise, value will be sanitized to be safe in the given context, for example
	         * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation
	         * is responsible to make sure that the value can definitely be safely used in the given context.
	         * @abstract
	         * @param {?} context
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.sanitize = function (context, value) { };
	        /**
	         * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML
	         * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will
	         * leave safe HTML intact, so in most situations this method should not be used.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
	        /**
	         * Bypass security and trust the given value to be safe style value (CSS).
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
	        /**
	         * Bypass security and trust the given value to be safe JavaScript.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
	        /**
	         * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used
	         * in hyperlinks or `<img src>`.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
	        /**
	         * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may
	         * be used to load executable code from, like `<script src>`, or `<iframe src>`.
	         *
	         * **WARNING:** calling this method with untrusted user data exposes your application to XSS
	         * security risks!
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
	        return DomSanitizer;
	    }());
	    var DomSanitizerImpl = (function (_super) {
	        __extends$8(DomSanitizerImpl, _super);
	        function DomSanitizerImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @param {?} ctx
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	            if (value == null)
	                return null;
	            switch (ctx) {
	                case core.SecurityContext.NONE:
	                    return value;
	                case core.SecurityContext.HTML:
	                    if (value instanceof SafeHtmlImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'HTML');
	                    return sanitizeHtml(String(value));
	                case core.SecurityContext.STYLE:
	                    if (value instanceof SafeStyleImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Style');
	                    return sanitizeStyle(value);
	                case core.SecurityContext.SCRIPT:
	                    if (value instanceof SafeScriptImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Script');
	                    throw new Error('unsafe value used in a script context');
	                case core.SecurityContext.URL:
	                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                        // Allow resource URLs in URL contexts, they are strictly more trusted.
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'URL');
	                    return sanitizeUrl(String(value));
	                case core.SecurityContext.RESOURCE_URL:
	                    if (value instanceof SafeResourceUrlImpl) {
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'ResourceURL');
	                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	                default:
	                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	            }
	        };
	        /**
	         * @param {?} value
	         * @param {?} expectedType
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	            if (value instanceof SafeValueImpl) {
	                throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                    "(see http://g.co/ng/security#xss)");
	            }
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	            return new SafeResourceUrlImpl(value);
	        };
	        DomSanitizerImpl.decorators = [
	            { type: core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSanitizerImpl.ctorParameters = function () { return []; };
	        return DomSanitizerImpl;
	    }(DomSanitizer));
	    /**
	     * @abstract
	     */
	    var SafeValueImpl = (function () {
	        /**
	         * @param {?} changingThisBreaksApplicationSecurity
	         */
	        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	            // empty
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        SafeValueImpl.prototype.getTypeName = function () { };
	        /**
	         * @return {?}
	         */
	        SafeValueImpl.prototype.toString = function () {
	            return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	                " (see http://g.co/ng/security#xss)";
	        };
	        return SafeValueImpl;
	    }());
	    var SafeHtmlImpl = (function (_super) {
	        __extends$8(SafeHtmlImpl, _super);
	        function SafeHtmlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	        return SafeHtmlImpl;
	    }(SafeValueImpl));
	    var SafeStyleImpl = (function (_super) {
	        __extends$8(SafeStyleImpl, _super);
	        function SafeStyleImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	        return SafeStyleImpl;
	    }(SafeValueImpl));
	    var SafeScriptImpl = (function (_super) {
	        __extends$8(SafeScriptImpl, _super);
	        function SafeScriptImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	        return SafeScriptImpl;
	    }(SafeValueImpl));
	    var SafeUrlImpl = (function (_super) {
	        __extends$8(SafeUrlImpl, _super);
	        function SafeUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	        return SafeUrlImpl;
	    }(SafeValueImpl));
	    var SafeResourceUrlImpl = (function (_super) {
	        __extends$8(SafeResourceUrlImpl, _super);
	        function SafeResourceUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        /**
	         * @return {?}
	         */
	        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	        return SafeResourceUrlImpl;
	    }(SafeValueImpl));

	    var /** @type {?} */ INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	        { provide: core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	        { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
	    ];
	    /**
	     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	     * Attacker-controlled data introduced by an unsanitized provider could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     * @experimental
	     */
	    var /** @type {?} */ BROWSER_SANITIZATION_PROVIDERS = [
	        { provide: core.Sanitizer, useExisting: DomSanitizer },
	        { provide: DomSanitizer, useClass: DomSanitizerImpl },
	    ];
	    /**
	     * @stable
	     */
	    var /** @type {?} */ platformBrowser = core.createPlatformFactory(core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	    /**
	     * @return {?}
	     */
	    function initDomAdapter() {
	        BrowserDomAdapter.makeCurrent();
	        BrowserGetTestability.init();
	    }
	    /**
	     * @return {?}
	     */
	    function errorHandler() {
	        return new core.ErrorHandler();
	    }
	    /**
	     * @return {?}
	     */
	    function _document() {
	        return getDOM().defaultDoc();
	    }
	    /**
	     * @return {?}
	     */
	    function _resolveDefaultAnimationDriver() {
	        if (getDOM().supportsWebAnimation()) {
	            return new WebAnimationsDriver();
	        }
	        return AnimationDriver.NOOP;
	    }
	    /**
	     * The ng module for the browser.
	     *
	     * \@stable
	     */
	    var BrowserModule = (function () {
	        /**
	         * @param {?} parentModule
	         */
	        function BrowserModule(parentModule) {
	            if (parentModule) {
	                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	            }
	        }
	        BrowserModule.decorators = [
	            { type: core.NgModule, args: [{
	                        providers: [
	                            BROWSER_SANITIZATION_PROVIDERS, { provide: core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                            { provide: DOCUMENT, useFactory: _document, deps: [] },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                            { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                            { provide: core.RootRenderer, useExisting: DomRootRenderer },
	                            { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                            { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                            core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                        ],
	                        exports: [_angular_common.CommonModule, core.ApplicationModule]
	                    },] },
	        ];
	        /** @nocollapse */
	        BrowserModule.ctorParameters = function () { return [
	            { type: BrowserModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf },] },
	        ]; };
	        return BrowserModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * JS version of browser APIs. This library can only run in the browser.
	     */
	    var /** @type {?} */ win = typeof window !== 'undefined' && window || ({});

	    var ChangeDetectionPerfRecord = (function () {
	        /**
	         * @param {?} msPerTick
	         * @param {?} numTicks
	         */
	        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	            this.msPerTick = msPerTick;
	            this.numTicks = numTicks;
	        }
	        return ChangeDetectionPerfRecord;
	    }());
	    /**
	     * Entry point for all Angular debug tools. This object corresponds to the `ng`
	     * global variable accessible in the dev console.
	     */
	    var AngularTools = (function () {
	        /**
	         * @param {?} ref
	         */
	        function AngularTools(ref) {
	            this.profiler = new AngularProfiler(ref);
	        }
	        return AngularTools;
	    }());
	    /**
	     * Entry point for all Angular profiling-related debug tools. This object
	     * corresponds to the `ng.profiler` in the dev console.
	     */
	    var AngularProfiler = (function () {
	        /**
	         * @param {?} ref
	         */
	        function AngularProfiler(ref) {
	            this.appRef = ref.injector.get(core.ApplicationRef);
	        }
	        /**
	         * Exercises change detection in a loop and then prints the average amount of
	         * time in milliseconds how long a single round of change detection takes for
	         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	         * of 500 milliseconds.
	         *
	         * Optionally, a user may pass a `config` parameter containing a map of
	         * options. Supported options are:
	         *
	         * `record` (boolean) - causes the profiler to record a CPU profile while
	         * it exercises the change detector. Example:
	         *
	         * ```
	         * ng.profiler.timeChangeDetection({record: true})
	         * ```
	         * @param {?} config
	         * @return {?}
	         */
	        AngularProfiler.prototype.timeChangeDetection = function (config) {
	            var /** @type {?} */ record = config && config['record'];
	            var /** @type {?} */ profileName = 'Change Detection';
	            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	            var /** @type {?} */ isProfilerAvailable = isPresent(win.console.profile);
	            if (record && isProfilerAvailable) {
	                win.console.profile(profileName);
	            }
	            var /** @type {?} */ start = getDOM().performanceNow();
	            var /** @type {?} */ numTicks = 0;
	            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	                this.appRef.tick();
	                numTicks++;
	            }
	            var /** @type {?} */ end = getDOM().performanceNow();
	            if (record && isProfilerAvailable) {
	                // need to cast to <any> because type checker thinks there's no argument
	                // while in fact there is:
	                //
	                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	                ((win.console.profileEnd))(profileName);
	            }
	            var /** @type {?} */ msPerTick = (end - start) / numTicks;
	            win.console.log("ran " + numTicks + " change detection cycles");
	            win.console.log(msPerTick.toFixed(2) + " ms per check");
	            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	        };
	        return AngularProfiler;
	    }());

	    var /** @type {?} */ context = (global$1);
	    /**
	     * Enabled Angular 2 debug tools that are accessible via your browser's
	     * developer console.
	     *
	     * Usage:
	     *
	     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	     *    then hit Enter.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     * @param {?} ref
	     * @return {?}
	     */
	    function enableDebugTools(ref) {
	        ((Object)).assign(context.ng, new AngularTools(ref));
	        return ref;
	    }
	    /**
	     * Disables Angular 2 tools.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     * @return {?}
	     */
	    function disableDebugTools() {
	        if (context.ng) {
	            delete context.ng.profiler;
	        }
	    }

	    /**
	     * Predicates for use with {\@link DebugElement}'s query functions.
	     *
	     * \@experimental All debugging apis are currently experimental.
	     */
	    var By = (function () {
	        function By() {
	        }
	        /**
	         * Match all elements.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	         * @return {?}
	         */
	        By.all = function () { return function (debugElement) { return true; }; };
	        /**
	         * Match elements by the given CSS selector.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	         * @param {?} selector
	         * @return {?}
	         */
	        By.css = function (selector) {
	            return function (debugElement) {
	                return isPresent(debugElement.nativeElement) ?
	                    getDOM().elementMatches(debugElement.nativeElement, selector) :
	                    false;
	            };
	        };
	        /**
	         * Match elements that have the given directive present.
	         *
	         * ## Example
	         *
	         * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	         * @param {?} type
	         * @return {?}
	         */
	        By.directive = function (type) {
	            return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	        };
	        return By;
	    }());

	    var /** @type {?} */ __platform_browser_private__ = {
	        BrowserPlatformLocation: BrowserPlatformLocation,
	        DomAdapter: DomAdapter,
	        BrowserDomAdapter: BrowserDomAdapter,
	        BrowserGetTestability: BrowserGetTestability,
	        getDOM: getDOM,
	        setRootDomAdapter: setRootDomAdapter,
	        DomRootRenderer_: DomRootRenderer_,
	        DomRootRenderer: DomRootRenderer,
	        NAMESPACE_URIS: NAMESPACE_URIS,
	        shimContentAttribute: shimContentAttribute,
	        shimHostAttribute: shimHostAttribute,
	        flattenStyles: flattenStyles,
	        splitNamespace: splitNamespace,
	        isNamespaced: isNamespaced,
	        DomSharedStylesHost: DomSharedStylesHost,
	        SharedStylesHost: SharedStylesHost,
	        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
	        DomEventsPlugin: DomEventsPlugin,
	        KeyEventsPlugin: KeyEventsPlugin,
	        HammerGesturesPlugin: HammerGesturesPlugin,
	        initDomAdapter: initDomAdapter,
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
	        WebAnimationsDriver: WebAnimationsDriver
	    };

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new core.Version('2.4.5');

	    exports.BrowserModule = BrowserModule;
	    exports.platformBrowser = platformBrowser;
	    exports.Title = Title;
	    exports.disableDebugTools = disableDebugTools;
	    exports.enableDebugTools = enableDebugTools;
	    exports.AnimationDriver = AnimationDriver;
	    exports.By = By;
	    exports.NgProbeToken = NgProbeToken;
	    exports.DOCUMENT = DOCUMENT;
	    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	    exports.EventManager = EventManager;
	    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	    exports.HammerGestureConfig = HammerGestureConfig;
	    exports.DomSanitizer = DomSanitizer;
	    exports.VERSION = VERSION;
	    exports.__platform_browser_private__ = __platform_browser_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.4.5
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(86)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * This class should not be used directly by an application developer. Instead, use
	     * {\@link Location}.
	     *
	     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	     * agnostic.
	     * This means that we can have different implementation of `PlatformLocation` for the different
	     * platforms
	     * that angular supports. For example, the default `PlatformLocation` is {\@link
	     * BrowserPlatformLocation},
	     * however when you run your app in a WebWorker you use {\@link WebWorkerPlatformLocation}.
	     *
	     * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
	     * when
	     * they need to interact with the DOM apis like pushState, popState, etc...
	     *
	     * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
	     * by
	     * the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
	     * Router} /
	     * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	     * class
	     * they are all platform independent.
	     *
	     * \@stable
	     * @abstract
	     */
	    var PlatformLocation = (function () {
	        function PlatformLocation() {
	        }
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        PlatformLocation.prototype.onHashChange = function (fn) { };
	        Object.defineProperty(PlatformLocation.prototype, "pathname", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "search", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "hash", {
	            /**
	             * @return {?}
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.replaceState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @return {?}
	         */
	        PlatformLocation.prototype.pushState = function (state, title, url) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        PlatformLocation.prototype.back = function () { };
	        return PlatformLocation;
	    }());

	    /**
	     * `LocationStrategy` is responsible for representing and reading route state
	     * from the browser's URL. Angular provides two strategies:
	     * {\@link HashLocationStrategy} and {\@link PathLocationStrategy}.
	     *
	     * This is used under the hood of the {\@link Location} service.
	     *
	     * Applications should use the {\@link Router} or {\@link Location} services to
	     * interact with application route state.
	     *
	     * For instance, {\@link HashLocationStrategy} produces URLs like
	     * `http://example.com#/foo`, and {\@link PathLocationStrategy} produces
	     * `http://example.com/foo` as an equivalent URL.
	     *
	     * See these two classes for more.
	     *
	     * \@stable
	     * @abstract
	     */
	    var LocationStrategy = (function () {
	        function LocationStrategy() {
	        }
	        /**
	         * @abstract
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        LocationStrategy.prototype.path = function (includeHash) { };
	        /**
	         * @abstract
	         * @param {?} internal
	         * @return {?}
	         */
	        LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.pushState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        LocationStrategy.prototype.replaceState = function (state, title, url, queryParams) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.forward = function () { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.back = function () { };
	        /**
	         * @abstract
	         * @param {?} fn
	         * @return {?}
	         */
	        LocationStrategy.prototype.onPopState = function (fn) { };
	        /**
	         * @abstract
	         * @return {?}
	         */
	        LocationStrategy.prototype.getBaseHref = function () { };
	        return LocationStrategy;
	    }());
	    /**
	     * The `APP_BASE_HREF` token represents the base href to be used with the
	     * {@link PathLocationStrategy}.
	     *
	     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	     * representing the URL prefix that should be preserved when generating and recognizing
	     * URLs.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Component, NgModule} from '@angular/core';
	     * import {APP_BASE_HREF} from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var /** @type {?} */ APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var /** @type {?} */ globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = (self);
	        }
	        else {
	            globalScope = (global);
	        }
	    }
	    else {
	        globalScope = (window);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var /** @type {?} */ _global = globalScope;
	    /**
	     * @param {?} type
	     * @return {?}
	     */
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isPresent(obj) {
	        return obj != null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank(obj) {
	        return obj == null;
	    }
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isDate(obj) {
	        return obj instanceof Date && !isNaN(obj.valueOf());
	    }
	    /**
	     * @param {?} token
	     * @return {?}
	     */
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return "" + token.overriddenName;
	        }
	        if (token.name) {
	            return "" + token.name;
	        }
	        var /** @type {?} */ res = token.toString();
	        var /** @type {?} */ newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        /**
	         * @param {?} text
	         * @return {?}
	         */
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var /** @type {?} */ result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    /**
	     * @param {?} o
	     * @return {?}
	     */
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    var /** @type {?} */ _symbolIterator = null;
	    /**
	     * @return {?}
	     */
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (((globalScope)).Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var /** @type {?} */ keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var /** @type {?} */ i = 0; i < keys.length; ++i) {
	                    var /** @type {?} */ key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        ((Map)).prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }

	    /**
	     * \@whatItDoes `Location` is a service that applications can use to interact with a browser's URL.
	     * \@description
	     * Depending on which {\@link LocationStrategy} is used, `Location` will either persist
	     * to the URL's path or the URL's hash segment.
	     *
	     * Note: it's better to use {\@link Router#navigate} service to trigger route changes. Use
	     * `Location` only if you need to interact with or create normalized URLs outside of
	     * routing.
	     *
	     * `Location` is responsible for normalizing the URL against the application's base href.
	     * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	     * trailing slash:
	     * - `/my/app/user/123` is normalized
	     * - `my/app/user/123` **is not** normalized
	     * - `/my/app/user/123/` **is not** normalized
	     *
	     * ### Example
	     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	     * \@stable
	     */
	    var Location = (function () {
	        /**
	         * @param {?} platformStrategy
	         */
	        function Location(platformStrategy) {
	            var _this = this;
	            /** @internal */
	            this._subject = new _angular_core.EventEmitter();
	            this._platformStrategy = platformStrategy;
	            var browserBaseHref = this._platformStrategy.getBaseHref();
	            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	            this._platformStrategy.onPopState(function (ev) {
	                _this._subject.emit({
	                    'url': _this.path(true),
	                    'pop': true,
	                    'type': ev.type,
	                });
	            });
	        }
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        Location.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            return this.normalize(this._platformStrategy.path(includeHash));
	        };
	        /**
	         * Normalizes the given path and compares to the current normalized path.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.isCurrentPathEqualTo = function (path, query) {
	            if (query === void 0) { query = ''; }
	            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	        };
	        /**
	         * Given a string representing a URL, returns the normalized URL path without leading or
	         * trailing slashes.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.normalize = function (url) {
	            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	        };
	        /**
	         * Given a string representing a URL, returns the platform-specific external URL path.
	         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.prototype.prepareExternalUrl = function (url) {
	            if (url && url[0] !== '/') {
	                url = '/' + url;
	            }
	            return this._platformStrategy.prepareExternalUrl(url);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and pushes a
	         * new item onto the platform's history.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.go = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.pushState(null, '', path, query);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and replaces
	         * the top item on the platform's history stack.
	         * @param {?} path
	         * @param {?=} query
	         * @return {?}
	         */
	        Location.prototype.replaceState = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.replaceState(null, '', path, query);
	        };
	        /**
	         * Navigates forward in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.forward = function () { this._platformStrategy.forward(); };
	        /**
	         * Navigates back in the platform's history.
	         * @return {?}
	         */
	        Location.prototype.back = function () { this._platformStrategy.back(); };
	        /**
	         * Subscribe to the platform's `popState` events.
	         * @param {?} onNext
	         * @param {?=} onThrow
	         * @param {?=} onReturn
	         * @return {?}
	         */
	        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	            if (onThrow === void 0) { onThrow = null; }
	            if (onReturn === void 0) { onReturn = null; }
	            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	        };
	        /**
	         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	         * is.
	         * @param {?} params
	         * @return {?}
	         */
	        Location.normalizeQueryParams = function (params) {
	            return params && params[0] !== '?' ? '?' + params : params;
	        };
	        /**
	         * Given 2 parts of a url, join them with a slash if needed.
	         * @param {?} start
	         * @param {?} end
	         * @return {?}
	         */
	        Location.joinWithSlash = function (start, end) {
	            if (start.length == 0) {
	                return end;
	            }
	            if (end.length == 0) {
	                return start;
	            }
	            var /** @type {?} */ slashes = 0;
	            if (start.endsWith('/')) {
	                slashes++;
	            }
	            if (end.startsWith('/')) {
	                slashes++;
	            }
	            if (slashes == 2) {
	                return start + end.substring(1);
	            }
	            if (slashes == 1) {
	                return start + end;
	            }
	            return start + '/' + end;
	        };
	        /**
	         * If url has a trailing slash, remove it, otherwise return url as is.
	         * @param {?} url
	         * @return {?}
	         */
	        Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
	        Location.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Location.ctorParameters = function () { return [
	            { type: LocationStrategy, },
	        ]; };
	        return Location;
	    }());
	    /**
	     * @param {?} baseHref
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripBaseHref(baseHref, url) {
	        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
	    }
	    /**
	     * @param {?} url
	     * @return {?}
	     */
	    function _stripIndexHtml(url) {
	        return url.replace(/\/index.html$/, '');
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@whatItDoes Use URL hash for storing application location data.
	     * \@description
	     * `HashLocationStrategy` is a {\@link LocationStrategy} used to configure the
	     * {\@link Location} service to represent its state in the
	     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	     * of the browser's URL.
	     *
	     * For instance, if you call `location.go('/foo')`, the browser's URL will become
	     * `example.com#/foo`.
	     *
	     * ### Example
	     *
	     * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
	     *
	     * \@stable
	     */
	    var HashLocationStrategy = (function (_super) {
	        __extends(HashLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} _baseHref
	         */
	        function HashLocationStrategy(_platformLocation, _baseHref) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            this._baseHref = '';
	            if (isPresent(_baseHref)) {
	                this._baseHref = _baseHref;
	            }
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            // the hash value is always prefixed with a `#`
	            // and if it is empty then it will stay empty
	            var /** @type {?} */ path = this._platformLocation.hash;
	            if (!isPresent(path))
	                path = '#';
	            return path.length > 0 ? path.substring(1) : path;
	        };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            var /** @type {?} */ url = Location.joinWithSlash(this._baseHref, internal);
	            return url.length > 0 ? ('#' + url) : url;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.pushState(state, title, url);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} path
	         * @param {?} queryParams
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	            var /** @type {?} */ url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.replaceState(state, title, url);
	        };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        HashLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HashLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return HashLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@whatItDoes Use URL for storing application location data.
	     * \@description
	     * `PathLocationStrategy` is a {\@link LocationStrategy} used to configure the
	     * {\@link Location} service to represent its state in the
	     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	     * browser's URL.
	     *
	     * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
	     * or add a base element to the document. This URL prefix that will be preserved
	     * when generating and recognizing URLs.
	     *
	     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * Similarly, if you add `<base href='/my/app'/>` to the document and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * ### Example
	     *
	     * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
	     *
	     * \@stable
	     */
	    var PathLocationStrategy = (function (_super) {
	        __extends$1(PathLocationStrategy, _super);
	        /**
	         * @param {?} _platformLocation
	         * @param {?=} href
	         */
	        function PathLocationStrategy(_platformLocation, href) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            if (isBlank(href)) {
	                href = this._platformLocation.getBaseHrefFromDOM();
	            }
	            if (isBlank(href)) {
	                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	            }
	            this._baseHref = href;
	        }
	        /**
	         * @param {?} fn
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        /**
	         * @param {?} internal
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            return Location.joinWithSlash(this._baseHref, internal);
	        };
	        /**
	         * @param {?=} includeHash
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            var /** @type {?} */ pathname = this._platformLocation.pathname +
	                Location.normalizeQueryParams(this._platformLocation.search);
	            var /** @type {?} */ hash = this._platformLocation.hash;
	            return hash && includeHash ? "" + pathname + hash : pathname;
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.pushState(state, title, externalUrl);
	        };
	        /**
	         * @param {?} state
	         * @param {?} title
	         * @param {?} url
	         * @param {?} queryParams
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	            var /** @type {?} */ externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.replaceState(state, title, externalUrl);
	        };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        /**
	         * @return {?}
	         */
	        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        PathLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        PathLocationStrategy.ctorParameters = function () { return [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ]; };
	        return PathLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@experimental
	     * @abstract
	     */
	    var NgLocalization = (function () {
	        function NgLocalization() {
	        }
	        /**
	         * @abstract
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocalization.prototype.getPluralCategory = function (value) { };
	        return NgLocalization;
	    }());
	    /**
	     * Returns the plural category for a given value.
	     * - "=value" when the case exists,
	     * - the plural category otherwise
	     *
	     * \@internal
	     * @param {?} value
	     * @param {?} cases
	     * @param {?} ngLocalization
	     * @return {?}
	     */
	    function getPluralCategory(value, cases, ngLocalization) {
	        var /** @type {?} */ key = "=" + value;
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        key = ngLocalization.getPluralCategory(value);
	        if (cases.indexOf(key) > -1) {
	            return key;
	        }
	        if (cases.indexOf('other') > -1) {
	            return 'other';
	        }
	        throw new Error("No plural message found for value \"" + value + "\"");
	    }
	    /**
	     * Returns the plural case based on the locale
	     *
	     * \@experimental
	     */
	    var NgLocaleLocalization = (function (_super) {
	        __extends$2(NgLocaleLocalization, _super);
	        /**
	         * @param {?} _locale
	         */
	        function NgLocaleLocalization(_locale) {
	            _super.call(this);
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	            var /** @type {?} */ plural = getPluralCase(this._locale, value);
	            switch (plural) {
	                case Plural.Zero:
	                    return 'zero';
	                case Plural.One:
	                    return 'one';
	                case Plural.Two:
	                    return 'two';
	                case Plural.Few:
	                    return 'few';
	                case Plural.Many:
	                    return 'many';
	                default:
	                    return 'other';
	            }
	        };
	        NgLocaleLocalization.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        NgLocaleLocalization.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return NgLocaleLocalization;
	    }(NgLocalization));
	    var Plural = {};
	    Plural.Zero = 0;
	    Plural.One = 1;
	    Plural.Two = 2;
	    Plural.Few = 3;
	    Plural.Many = 4;
	    Plural.Other = 5;
	    Plural[Plural.Zero] = "Zero";
	    Plural[Plural.One] = "One";
	    Plural[Plural.Two] = "Two";
	    Plural[Plural.Few] = "Few";
	    Plural[Plural.Many] = "Many";
	    Plural[Plural.Other] = "Other";
	    /**
	     * Returns the plural case based on the locale
	     *
	     * \@experimental
	     * @param {?} locale
	     * @param {?} nLike
	     * @return {?}
	     */
	    function getPluralCase(locale, nLike) {
	        // TODO(vicb): lazy compute
	        if (typeof nLike === 'string') {
	            nLike = parseInt(/** @type {?} */ (nLike), 10);
	        }
	        var /** @type {?} */ n = (nLike);
	        var /** @type {?} */ nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	        var /** @type {?} */ i = Math.floor(Math.abs(n));
	        var /** @type {?} */ v = nDecimal.length;
	        var /** @type {?} */ f = parseInt(nDecimal, 10);
	        var /** @type {?} */ t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	        var /** @type {?} */ lang = locale.split('-')[0].toLowerCase();
	        switch (lang) {
	            case 'af':
	            case 'asa':
	            case 'az':
	            case 'bem':
	            case 'bez':
	            case 'bg':
	            case 'brx':
	            case 'ce':
	            case 'cgg':
	            case 'chr':
	            case 'ckb':
	            case 'ee':
	            case 'el':
	            case 'eo':
	            case 'es':
	            case 'eu':
	            case 'fo':
	            case 'fur':
	            case 'gsw':
	            case 'ha':
	            case 'haw':
	            case 'hu':
	            case 'jgo':
	            case 'jmc':
	            case 'ka':
	            case 'kk':
	            case 'kkj':
	            case 'kl':
	            case 'ks':
	            case 'ksb':
	            case 'ky':
	            case 'lb':
	            case 'lg':
	            case 'mas':
	            case 'mgo':
	            case 'ml':
	            case 'mn':
	            case 'nb':
	            case 'nd':
	            case 'ne':
	            case 'nn':
	            case 'nnh':
	            case 'nyn':
	            case 'om':
	            case 'or':
	            case 'os':
	            case 'ps':
	            case 'rm':
	            case 'rof':
	            case 'rwk':
	            case 'saq':
	            case 'seh':
	            case 'sn':
	            case 'so':
	            case 'sq':
	            case 'ta':
	            case 'te':
	            case 'teo':
	            case 'tk':
	            case 'tr':
	            case 'ug':
	            case 'uz':
	            case 'vo':
	            case 'vun':
	            case 'wae':
	            case 'xog':
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'agq':
	            case 'bas':
	            case 'cu':
	            case 'dav':
	            case 'dje':
	            case 'dua':
	            case 'dyo':
	            case 'ebu':
	            case 'ewo':
	            case 'guz':
	            case 'kam':
	            case 'khq':
	            case 'ki':
	            case 'kln':
	            case 'kok':
	            case 'ksf':
	            case 'lrc':
	            case 'lu':
	            case 'luo':
	            case 'luy':
	            case 'mer':
	            case 'mfe':
	            case 'mgh':
	            case 'mua':
	            case 'mzn':
	            case 'nmg':
	            case 'nus':
	            case 'qu':
	            case 'rn':
	            case 'rw':
	            case 'sbp':
	            case 'twq':
	            case 'vai':
	            case 'yav':
	            case 'yue':
	            case 'zgh':
	            case 'ak':
	            case 'ln':
	            case 'mg':
	            case 'pa':
	            case 'ti':
	                if (n === Math.floor(n) && n >= 0 && n <= 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'am':
	            case 'as':
	            case 'bn':
	            case 'fa':
	            case 'gu':
	            case 'hi':
	            case 'kn':
	            case 'mr':
	            case 'zu':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'ar':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'ast':
	            case 'ca':
	            case 'de':
	            case 'en':
	            case 'et':
	            case 'fi':
	            case 'fy':
	            case 'gl':
	            case 'it':
	            case 'nl':
	            case 'sv':
	            case 'sw':
	            case 'ur':
	            case 'yi':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                return Plural.Other;
	            case 'be':
	                if (n % 10 === 1 && !(n % 100 === 11))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                    !(n % 100 >= 12 && n % 100 <= 14))
	                    return Plural.Few;
	                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'br':
	                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                    return Plural.One;
	                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                    return Plural.Two;
	                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                        n % 100 >= 90 && n % 100 <= 99))
	                    return Plural.Few;
	                if (!(n === 0) && n % 1e6 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'bs':
	            case 'hr':
	            case 'sr':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14) ||
	                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                        !(f % 100 >= 12 && f % 100 <= 14))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'cs':
	            case 'sk':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'cy':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === 3)
	                    return Plural.Few;
	                if (n === 6)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'da':
	                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                    return Plural.One;
	                return Plural.Other;
	            case 'dsb':
	            case 'hsb':
	                if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ff':
	            case 'fr':
	            case 'hy':
	            case 'kab':
	                if (i === 0 || i === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'fil':
	                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ga':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === Math.floor(n) && n >= 3 && n <= 6)
	                    return Plural.Few;
	                if (n === Math.floor(n) && n >= 7 && n <= 10)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'gd':
	                if (n === 1 || n === 11)
	                    return Plural.One;
	                if (n === 2 || n === 12)
	                    return Plural.Two;
	                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'gv':
	                if (v === 0 && i % 10 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 10 === 2)
	                    return Plural.Two;
	                if (v === 0 &&
	                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'he':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === 2 && v === 0)
	                    return Plural.Two;
	                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'is':
	                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ksh':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'kw':
	            case 'naq':
	            case 'se':
	            case 'smn':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                return Plural.Other;
	            case 'lag':
	                if (n === 0)
	                    return Plural.Zero;
	                if ((i === 0 || i === 1) && !(n === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'lt':
	                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                    !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.Few;
	                if (!(f === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'lv':
	            case 'prg':
	                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                    return Plural.Zero;
	                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                    !(v === 2) && f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mk':
	                if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mt':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pl':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pt':
	                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ro':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (!(v === 0) || n === 0 ||
	                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ru':
	            case 'uk':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && i % 10 === 0 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'shi':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                if (n === Math.floor(n) && n >= 2 && n <= 10)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'si':
	                if (n === 0 || n === 1 || i === 0 && f === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'sl':
	                if (v === 0 && i % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'tzm':
	                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                    return Plural.One;
	                return Plural.Other;
	            default:
	                return Plural.Other;
	        }
	    }

	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds and removes CSS classes on an HTML element.
	     *
	     * \@howToUse
	     * ```
	     *     <some-element [ngClass]="'first second'">...</some-element>
	     *
	     *     <some-element [ngClass]="['first', 'second']">...</some-element>
	     *
	     *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	     *
	     *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	     *
	     *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
	     * ```
	     *
	     * \@description
	     *
	     * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	     * - `string` - the CSS classes listed in the string (space delimited) are added,
	     * - `Array` - the CSS classes declared as Array elements are added,
	     * - `Object` - keys are CSS classes that get added when the expression given in the value
	     *              evaluates to a truthy value, otherwise they are removed.
	     *
	     * \@stable
	     */
	    var NgClass = (function () {
	        /**
	         * @param {?} _iterableDiffers
	         * @param {?} _keyValueDiffers
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	            this._iterableDiffers = _iterableDiffers;
	            this._keyValueDiffers = _keyValueDiffers;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	            this._initialClasses = [];
	        }
	        Object.defineProperty(NgClass.prototype, "klass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._applyInitialClasses(true);
	                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	                this._applyInitialClasses(false);
	                this._applyClasses(this._rawClass, false);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgClass.prototype, "ngClass", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._cleanupClasses(this._rawClass);
	                this._iterableDiffer = null;
	                this._keyValueDiffer = null;
	                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	                if (this._rawClass) {
	                    if (isListLikeIterable(this._rawClass)) {
	                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
	                    }
	                    else {
	                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
	                    }
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgClass.prototype.ngDoCheck = function () {
	            if (this._iterableDiffer) {
	                var /** @type {?} */ changes = this._iterableDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyIterableChanges(changes);
	                }
	            }
	            else if (this._keyValueDiffer) {
	                var /** @type {?} */ changes = this._keyValueDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} rawClassVal
	         * @return {?}
	         */
	        NgClass.prototype._cleanupClasses = function (rawClassVal) {
	            this._applyClasses(rawClassVal, true);
	            this._applyInitialClasses(false);
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyKeyValueChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachRemovedItem(function (record) {
	                if (record.previousValue) {
	                    _this._toggleClass(record.key, false);
	                }
	            });
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgClass.prototype._applyIterableChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) {
	                if (typeof record.item === 'string') {
	                    _this._toggleClass(record.item, true);
	                }
	                else {
	                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
	                }
	            });
	            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	        };
	        /**
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyInitialClasses = function (isCleanup) {
	            var _this = this;
	            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	        };
	        /**
	         * @param {?} rawClassVal
	         * @param {?} isCleanup
	         * @return {?}
	         */
	        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	            var _this = this;
	            if (rawClassVal) {
	                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                    ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	                }
	                else {
	                    Object.keys(rawClassVal).forEach(function (klass) {
	                        if (rawClassVal[klass] != null)
	                            _this._toggleClass(klass, !isCleanup);
	                    });
	                }
	            }
	        };
	        /**
	         * @param {?} klass
	         * @param {?} enabled
	         * @return {?}
	         */
	        NgClass.prototype._toggleClass = function (klass, enabled) {
	            var _this = this;
	            klass = klass.trim();
	            if (klass) {
	                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
	            }
	        };
	        NgClass.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	        ];
	        /** @nocollapse */
	        NgClass.ctorParameters = function () { return [
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgClass.propDecorators = {
	            'klass': [{ type: _angular_core.Input, args: ['class',] },],
	            'ngClass': [{ type: _angular_core.Input },],
	        };
	        return NgClass;
	    }());

	    var NgForRow = (function () {
	        /**
	         * @param {?} $implicit
	         * @param {?} index
	         * @param {?} count
	         */
	        function NgForRow($implicit, index, count) {
	            this.$implicit = $implicit;
	            this.index = index;
	            this.count = count;
	        }
	        Object.defineProperty(NgForRow.prototype, "first", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "last", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index === this.count - 1; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "even", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this.index % 2 === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "odd", {
	            /**
	             * @return {?}
	             */
	            get: function () { return !this.even; },
	            enumerable: true,
	            configurable: true
	        });
	        return NgForRow;
	    }());
	    /**
	     * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	     * each instantiated template inherits from the outer context with the given loop variable set
	     * to the current item from the iterable.
	     *
	     * ### Local Variables
	     *
	     * `NgFor` provides several exported values that can be aliased to local variables:
	     *
	     * * `index` will be set to the current loop iteration for each template context.
	     * * `first` will be set to a boolean value indicating whether the item is the first one in the
	     *   iteration.
	     * * `last` will be set to a boolean value indicating whether the item is the last one in the
	     *   iteration.
	     * * `even` will be set to a boolean value indicating whether this item has an even index.
	     * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	     *
	     * ### Change Propagation
	     *
	     * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	     *
	     * * When an item is added, a new instance of the template is added to the DOM.
	     * * When an item is removed, its template instance is removed from the DOM.
	     * * When items are reordered, their respective templates are reordered in the DOM.
	     * * Otherwise, the DOM element for that item will remain the same.
	     *
	     * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	     * those changes in the DOM. This has important implications for animations and any stateful
	     * controls
	     * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	     * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	     * as user input.
	     *
	     * It is possible for the identities of elements in the iterator to change while the data does not.
	     * This can happen, for example, if the iterator produced from an RPC to the server, and that
	     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	     * elements were deleted and all new elements inserted). This is an expensive operation and should
	     * be avoided if possible.
	     *
	     * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
	     * `trackBy` takes a function which has two arguments: `index` and `item`.
	     * If `trackBy` is given, Angular tracks changes by the return value of the function.
	     *
	     * ### Syntax
	     *
	     * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
	     * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
	     *
	     * With `<template>` element:
	     *
	     * ```
	     * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	     *   <li>...</li>
	     * </template>
	     * ```
	     *
	     * ### Example
	     *
	     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	     * example.
	     *
	     * \@stable
	     */
	    var NgFor = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         * @param {?} _differs
	         * @param {?} _cdr
	         */
	        function NgFor(_viewContainer, _template, _differs, _cdr) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._differs = _differs;
	            this._cdr = _cdr;
	            this._differ = null;
	        }
	        Object.defineProperty(NgFor.prototype, "ngForTrackBy", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._trackByFn; },
	            /**
	             * @param {?} fn
	             * @return {?}
	             */
	            set: function (fn) {
	                if (_angular_core.isDevMode() && fn != null && typeof fn !== 'function') {
	                    // TODO(vicb): use a log service once there is a public one available
	                    if ((console) && (console.warn)) {
	                        console.warn(("trackBy must be a function, but received " + JSON.stringify(fn) + ". ") +
	                            "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
	                    }
	                }
	                this._trackByFn = fn;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                if (value) {
	                    this._template = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype.ngOnChanges = function (changes) {
	            if ('ngForOf' in changes) {
	                // React on ngForOf changes only once all inputs have been initialized
	                var /** @type {?} */ value = changes['ngForOf'].currentValue;
	                if (!this._differ && value) {
	                    try {
	                        this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
	                    }
	                    catch (e) {
	                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                    }
	                }
	            }
	        };
	        /**
	         * @return {?}
	         */
	        NgFor.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this.ngForOf);
	                if (changes)
	                    this._applyChanges(changes);
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgFor.prototype._applyChanges = function (changes) {
	            var _this = this;
	            var /** @type {?} */ insertTuples = [];
	            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	                if (item.previousIndex == null) {
	                    var /** @type {?} */ view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	                else if (currentIndex == null) {
	                    _this._viewContainer.remove(adjustedPreviousIndex);
	                }
	                else {
	                    var /** @type {?} */ view = _this._viewContainer.get(adjustedPreviousIndex);
	                    _this._viewContainer.move(view, currentIndex);
	                    var /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */ (view));
	                    insertTuples.push(tuple);
	                }
	            });
	            for (var /** @type {?} */ i = 0; i < insertTuples.length; i++) {
	                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	            for (var /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {
	                var /** @type {?} */ viewRef = (this._viewContainer.get(i));
	                viewRef.context.index = i;
	                viewRef.context.count = ilen;
	            }
	            changes.forEachIdentityChange(function (record) {
	                var /** @type {?} */ viewRef = (_this._viewContainer.get(record.currentIndex));
	                viewRef.context.$implicit = record.item;
	            });
	        };
	        /**
	         * @param {?} view
	         * @param {?} record
	         * @return {?}
	         */
	        NgFor.prototype._perViewChange = function (view, record) {
	            view.context.$implicit = record.item;
	        };
	        NgFor.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	        ];
	        /** @nocollapse */
	        NgFor.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        NgFor.propDecorators = {
	            'ngForOf': [{ type: _angular_core.Input },],
	            'ngForTrackBy': [{ type: _angular_core.Input },],
	            'ngForTemplate': [{ type: _angular_core.Input },],
	        };
	        return NgFor;
	    }());
	    var RecordViewTuple = (function () {
	        /**
	         * @param {?} record
	         * @param {?} view
	         */
	        function RecordViewTuple(record, view) {
	            this.record = record;
	            this.view = view;
	        }
	        return RecordViewTuple;
	    }());

	    /**
	     * Removes or recreates a portion of the DOM tree based on an {expression}.
	     *
	     * If the expression assigned to `ngIf` evaluates to a falsy value then the element
	     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	     *
	     * ```
	     * <div *ngIf="errorCount > 0" class="error">
	     *   <!-- Error message displayed when the errorCount property in the current context is greater
	     * than 0. -->
	     *   {{errorCount}} errors detected
	     * </div>
	     * ```
	     *
	     * ### Syntax
	     *
	     * - `<div *ngIf="condition">...</div>`
	     * - `<div template="ngIf condition">...</div>`
	     * - `<template [ngIf]="condition"><div>...</div></template>`
	     *
	     * \@stable
	     */
	    var NgIf = (function () {
	        /**
	         * @param {?} _viewContainer
	         * @param {?} _template
	         */
	        function NgIf(_viewContainer, _template) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._hasView = false;
	        }
	        Object.defineProperty(NgIf.prototype, "ngIf", {
	            /**
	             * @param {?} condition
	             * @return {?}
	             */
	            set: function (condition) {
	                if (condition && !this._hasView) {
	                    this._hasView = true;
	                    this._viewContainer.createEmbeddedView(this._template);
	                }
	                else if (!condition && this._hasView) {
	                    this._hasView = false;
	                    this._viewContainer.clear();
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgIf.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	        ];
	        /** @nocollapse */
	        NgIf.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	        ]; };
	        NgIf.propDecorators = {
	            'ngIf': [{ type: _angular_core.Input },],
	        };
	        return NgIf;
	    }());

	    var SwitchView = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         * @param {?} _templateRef
	         */
	        function SwitchView(_viewContainerRef, _templateRef) {
	            this._viewContainerRef = _viewContainerRef;
	            this._templateRef = _templateRef;
	            this._created = false;
	        }
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.create = function () {
	            this._created = true;
	            this._viewContainerRef.createEmbeddedView(this._templateRef);
	        };
	        /**
	         * @return {?}
	         */
	        SwitchView.prototype.destroy = function () {
	            this._created = false;
	            this._viewContainerRef.clear();
	        };
	        /**
	         * @param {?} created
	         * @return {?}
	         */
	        SwitchView.prototype.enforceState = function (created) {
	            if (created && !this._created) {
	                this.create();
	            }
	            else if (!created && this._created) {
	                this.destroy();
	            }
	        };
	        return SwitchView;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	     *             expression.
	     *
	     * \@howToUse
	     * ```
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	     *       <ng-container *ngSwitchCase="match_expression_3">
	     *         <!-- use a ng-container to group multiple root nodes -->
	     *         <inner-element></inner-element>
	     *         <inner-other-element></inner-other-element>
	     *       </ng-container>
	     *       <some-element *ngSwitchDefault>...</some-element>
	     *     </container-element>
	     * ```
	     * \@description
	     *
	     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	     * switch expression.
	     *
	     * In other words:
	     * - you define a container element (where you place the directive with a switch expression on the
	     * `[ngSwitch]="..."` attribute)
	     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	     * root elements.
	     *
	     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	     * be preserved at the location.
	     *
	     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	     * expression is evaluated.
	     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	     * stamped out.
	     *
	     * \@stable
	     */
	    var NgSwitch = (function () {
	        function NgSwitch() {
	            this._defaultUsed = false;
	            this._caseCount = 0;
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	            /**
	             * @param {?} newValue
	             * @return {?}
	             */
	            set: function (newValue) {
	                this._ngSwitch = newValue;
	                if (this._caseCount === 0) {
	                    this._updateDefaultCases(true);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * \@internal
	         * @return {?}
	         */
	        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	        /**
	         * \@internal
	         * @param {?} view
	         * @return {?}
	         */
	        NgSwitch.prototype._addDefault = function (view) {
	            if (!this._defaultViews) {
	                this._defaultViews = [];
	            }
	            this._defaultViews.push(view);
	        };
	        /**
	         * \@internal
	         * @param {?} value
	         * @return {?}
	         */
	        NgSwitch.prototype._matchCase = function (value) {
	            var /** @type {?} */ matched = value == this._ngSwitch;
	            this._lastCasesMatched = this._lastCasesMatched || matched;
	            this._lastCaseCheckIndex++;
	            if (this._lastCaseCheckIndex === this._caseCount) {
	                this._updateDefaultCases(!this._lastCasesMatched);
	                this._lastCaseCheckIndex = 0;
	                this._lastCasesMatched = false;
	            }
	            return matched;
	        };
	        /**
	         * @param {?} useDefault
	         * @return {?}
	         */
	        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	            if (this._defaultViews && useDefault !== this._defaultUsed) {
	                this._defaultUsed = useDefault;
	                for (var /** @type {?} */ i = 0; i < this._defaultViews.length; i++) {
	                    var /** @type {?} */ defaultView = this._defaultViews[i];
	                    defaultView.enforceState(useDefault);
	                }
	            }
	        };
	        NgSwitch.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitch.ctorParameters = function () { return []; };
	        NgSwitch.propDecorators = {
	            'ngSwitch': [{ type: _angular_core.Input },],
	        };
	        return NgSwitch;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgSwitch} when the
	     *             given expression evaluate to respectively the same/different value as the switch
	     *             expression.
	     *
	     * \@howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     * </container-element>
	     * ```
	     * \@description
	     *
	     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	     * expression.
	     *
	     * If multiple match expressions match the switch expression value, all of them are displayed.
	     *
	     * See {\@link NgSwitch} for more details and example.
	     *
	     * \@stable
	     */
	    var NgSwitchCase = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	            this.ngSwitch = ngSwitch;
	            ngSwitch._addCase();
	            this._view = new SwitchView(viewContainer, templateRef);
	        }
	        /**
	         * @return {?}
	         */
	        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	        NgSwitchCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchCase.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        NgSwitchCase.propDecorators = {
	            'ngSwitchCase': [{ type: _angular_core.Input },],
	        };
	        return NgSwitchCase;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Creates a view that is added to the parent {\@link NgSwitch} when no case expressions
	     * match the
	     *             switch expression.
	     *
	     * \@howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *   <some-other-element *ngSwitchDefault>...</some-other-element>
	     * </container-element>
	     * ```
	     *
	     * \@description
	     *
	     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	     * expression.
	     *
	     * See {\@link NgSwitch} for more details and example.
	     *
	     * \@stable
	     */
	    var NgSwitchDefault = (function () {
	        /**
	         * @param {?} viewContainer
	         * @param {?} templateRef
	         * @param {?} ngSwitch
	         */
	        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	        }
	        NgSwitchDefault.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchDefault.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgSwitchDefault;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <template ngPluralCase="=0">there is nothing</template>
	     *   <template ngPluralCase="=1">there is one</template>
	     *   <template ngPluralCase="few">there are a few</template>
	     * </some-element>
	     * ```
	     *
	     * \@description
	     *
	     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	     * that match the switch expression's pluralization category.
	     *
	     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	     * expression:
	     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	     *   matches the switch expression exactly,
	     * - otherwise, the view will be treated as a "category match", and will only display if exact
	     *   value matches aren't found and the value maps to its category for the defined locale.
	     *
	     * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	     *
	     * \@experimental
	     */
	    var NgPlural = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function NgPlural(_localization) {
	            this._localization = _localization;
	            this._caseViews = {};
	        }
	        Object.defineProperty(NgPlural.prototype, "ngPlural", {
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) {
	                this._switchValue = value;
	                this._updateView();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} value
	         * @param {?} switchView
	         * @return {?}
	         */
	        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._updateView = function () {
	            this._clearViews();
	            var /** @type {?} */ cases = Object.keys(this._caseViews);
	            var /** @type {?} */ key = getPluralCategory(this._switchValue, cases, this._localization);
	            this._activateView(this._caseViews[key]);
	        };
	        /**
	         * @return {?}
	         */
	        NgPlural.prototype._clearViews = function () {
	            if (this._activeView)
	                this._activeView.destroy();
	        };
	        /**
	         * @param {?} view
	         * @return {?}
	         */
	        NgPlural.prototype._activateView = function (view) {
	            if (view) {
	                this._activeView = view;
	                this._activeView.create();
	            }
	        };
	        NgPlural.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	        ];
	        /** @nocollapse */
	        NgPlural.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        NgPlural.propDecorators = {
	            'ngPlural': [{ type: _angular_core.Input },],
	        };
	        return NgPlural;
	    }());
	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Creates a view that will be added/removed from the parent {\@link NgPlural} when the
	     *             given expression matches the plural expression according to CLDR rules.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <template ngPluralCase="=0">...</template>
	     *   <template ngPluralCase="other">...</template>
	     * </some-element>
	     * ```
	     *
	     * See {\@link NgPlural} for more details and example.
	     *
	     * \@experimental
	     */
	    var NgPluralCase = (function () {
	        /**
	         * @param {?} value
	         * @param {?} template
	         * @param {?} viewContainer
	         * @param {?} ngPlural
	         */
	        function NgPluralCase(value, template, viewContainer, ngPlural) {
	            this.value = value;
	            var isANumber = !isNaN(Number(value));
	            ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
	        }
	        NgPluralCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	        ];
	        /** @nocollapse */
	        NgPluralCase.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	        ]; };
	        return NgPluralCase;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Update an HTML element styles.
	     *
	     * \@howToUse
	     * ```
	     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="objExp">...</some-element>
	     * ```
	     *
	     * \@description
	     *
	     * The styles are updated according to the value of the expression evaluation:
	     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	     * - values are the values assigned to those properties (expressed in the given unit).
	     *
	     * \@stable
	     */
	    var NgStyle = (function () {
	        /**
	         * @param {?} _differs
	         * @param {?} _ngEl
	         * @param {?} _renderer
	         */
	        function NgStyle(_differs, _ngEl, _renderer) {
	            this._differs = _differs;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	        }
	        Object.defineProperty(NgStyle.prototype, "ngStyle", {
	            /**
	             * @param {?} v
	             * @return {?}
	             */
	            set: function (v) {
	                this._ngStyle = v;
	                if (!this._differ && v) {
	                    this._differ = this._differs.find(v).create(null);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        NgStyle.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var /** @type {?} */ changes = this._differ.diff(this._ngStyle);
	                if (changes) {
	                    this._applyChanges(changes);
	                }
	            }
	        };
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgStyle.prototype._applyChanges = function (changes) {
	            var _this = this;
	            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        };
	        /**
	         * @param {?} nameAndUnit
	         * @param {?} value
	         * @return {?}
	         */
	        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	            value = value && unit ? "" + value + unit : value;
	            this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
	        };
	        NgStyle.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	        ];
	        /** @nocollapse */
	        NgStyle.ctorParameters = function () { return [
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ]; };
	        NgStyle.propDecorators = {
	            'ngStyle': [{ type: _angular_core.Input },],
	        };
	        return NgStyle;
	    }());

	    /**
	     * \@ngModule CommonModule
	     *
	     * \@whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	     *
	     * \@howToUse
	     * ```
	     * <template [ngTemplateOutlet]="templateRefExpression"
	     *           [ngOutletContext]="objectExpression">
	     * </template>
	     * ```
	     *
	     * \@description
	     *
	     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
	     * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
	     * available within the `TemplateRef`.
	     *
	     * Note: using the key `$implicit` in the context object will set it's value as default.
	     *
	     * \@experimental
	     */
	    var NgTemplateOutlet = (function () {
	        /**
	         * @param {?} _viewContainerRef
	         */
	        function NgTemplateOutlet(_viewContainerRef) {
	            this._viewContainerRef = _viewContainerRef;
	        }
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	            /**
	             * @param {?} context
	             * @return {?}
	             */
	            set: function (context) { this._context = context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
	            /**
	             * @param {?} templateRef
	             * @return {?}
	             */
	            set: function (templateRef) { this._templateRef = templateRef; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @param {?} changes
	         * @return {?}
	         */
	        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	            if (this._viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	            }
	            if (this._templateRef) {
	                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
	            }
	        };
	        NgTemplateOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	        ];
	        /** @nocollapse */
	        NgTemplateOutlet.ctorParameters = function () { return [
	            { type: _angular_core.ViewContainerRef, },
	        ]; };
	        NgTemplateOutlet.propDecorators = {
	            'ngOutletContext': [{ type: _angular_core.Input },],
	            'ngTemplateOutlet': [{ type: _angular_core.Input },],
	        };
	        return NgTemplateOutlet;
	    }());

	    /**
	     * A collection of Angular directives that are likely to be used in each and every Angular
	     * application.
	     */
	    var /** @type {?} */ COMMON_DIRECTIVES = [
	        NgClass,
	        NgFor,
	        NgIf,
	        NgTemplateOutlet,
	        NgStyle,
	        NgSwitch,
	        NgSwitchCase,
	        NgSwitchDefault,
	        NgPlural,
	        NgPluralCase,
	    ];

	    var /** @type {?} */ isPromise = _angular_core.__core_private__.isPromise;

	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * \@stable
	     */
	    var BaseError = (function (_super) {
	        __extends$4(BaseError, _super);
	        /**
	         * @param {?} message
	         */
	        function BaseError(message) {
	            _super.call(this, message);
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            // TODO(bradfordcsmith): Remove this hack when
	            //     google/closure-compiler/issues/2102 is fixed.
	            var nativeError = new Error(message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.message; },
	            /**
	             * @param {?} message
	             * @return {?}
	             */
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            /**
	             * @return {?}
	             */
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () { return ((this._nativeError)).stack; },
	            /**
	             * @param {?} value
	             * @return {?}
	             */
	            set: function (value) { ((this._nativeError)).stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @return {?}
	         */
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * \@stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$4(WrappedError, _super);
	        /**
	         * @param {?} message
	         * @param {?} error
	         */
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            /**
	             * @return {?}
	             */
	            get: function () {
	                return (((this.originalError instanceof Error ? this.originalError : this._nativeError)))
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var InvalidPipeArgumentError = (function (_super) {
	        __extends$3(InvalidPipeArgumentError, _super);
	        /**
	         * @param {?} type
	         * @param {?} value
	         */
	        function InvalidPipeArgumentError(type, value) {
	            _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
	        }
	        return InvalidPipeArgumentError;
	    }(BaseError));

	    var ObservableStrategy = (function () {
	        function ObservableStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	        return ObservableStrategy;
	    }());
	    var PromiseStrategy = (function () {
	        function PromiseStrategy() {
	        }
	        /**
	         * @param {?} async
	         * @param {?} updateLatestValue
	         * @return {?}
	         */
	        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.then(updateLatestValue, function (e) { throw e; });
	        };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.dispose = function (subscription) { };
	        /**
	         * @param {?} subscription
	         * @return {?}
	         */
	        PromiseStrategy.prototype.onDestroy = function (subscription) { };
	        return PromiseStrategy;
	    }());
	    var /** @type {?} */ _promiseStrategy = new PromiseStrategy();
	    var /** @type {?} */ _observableStrategy = new ObservableStrategy();
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Unwraps a value from an asynchronous primitive.
	     * \@howToUse `observable_or_promise_expression | async`
	     * \@description
	     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	     * potential memory leaks.
	     *
	     *
	     * ## Examples
	     *
	     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	     * promise.
	     *
	     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	     *
	     * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	     * to the view. The Observable continuously updates the view with the current time.
	     *
	     * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	     *
	     * \@stable
	     */
	    var AsyncPipe = (function () {
	        /**
	         * @param {?} _ref
	         */
	        function AsyncPipe(_ref) {
	            this._ref = _ref;
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	            this._strategy = null;
	        }
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype.ngOnDestroy = function () {
	            if (this._subscription) {
	                this._dispose();
	            }
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype.transform = function (obj) {
	            if (!this._obj) {
	                if (obj) {
	                    this._subscribe(obj);
	                }
	                this._latestReturnedValue = this._latestValue;
	                return this._latestValue;
	            }
	            if (obj !== this._obj) {
	                this._dispose();
	                return this.transform(obj);
	            }
	            if (this._latestValue === this._latestReturnedValue) {
	                return this._latestReturnedValue;
	            }
	            this._latestReturnedValue = this._latestValue;
	            return _angular_core.WrappedValue.wrap(this._latestValue);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._subscribe = function (obj) {
	            var _this = this;
	            this._obj = obj;
	            this._strategy = this._selectStrategy(obj);
	            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        AsyncPipe.prototype._selectStrategy = function (obj) {
	            if (isPromise(obj)) {
	                return _promiseStrategy;
	            }
	            if (((obj)).subscribe) {
	                return _observableStrategy;
	            }
	            throw new InvalidPipeArgumentError(AsyncPipe, obj);
	        };
	        /**
	         * @return {?}
	         */
	        AsyncPipe.prototype._dispose = function () {
	            this._strategy.dispose(this._subscription);
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	        };
	        /**
	         * @param {?} async
	         * @param {?} value
	         * @return {?}
	         */
	        AsyncPipe.prototype._updateLatestValue = function (async, value) {
	            if (async === this._obj) {
	                this._latestValue = value;
	                this._ref.markForCheck();
	            }
	        };
	        AsyncPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	        ];
	        /** @nocollapse */
	        AsyncPipe.ctorParameters = function () { return [
	            { type: _angular_core.ChangeDetectorRef, },
	        ]; };
	        return AsyncPipe;
	    }());

	    var NumberFormatStyle = {};
	    NumberFormatStyle.Decimal = 0;
	    NumberFormatStyle.Percent = 1;
	    NumberFormatStyle.Currency = 2;
	    NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
	    NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
	    NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
	    var NumberFormatter = (function () {
	        function NumberFormatter() {
	        }
	        /**
	         * @param {?} num
	         * @param {?} locale
	         * @param {?} style
	         * @param {?=} __3
	         * @return {?}
	         */
	        NumberFormatter.format = function (num, locale, style, _a) {
	            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	            var /** @type {?} */ options = {
	                minimumIntegerDigits: minimumIntegerDigits,
	                minimumFractionDigits: minimumFractionDigits,
	                maximumFractionDigits: maximumFractionDigits,
	                style: NumberFormatStyle[style].toLowerCase()
	            };
	            if (style == NumberFormatStyle.Currency) {
	                options.currency = currency;
	                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	            }
	            return new Intl.NumberFormat(locale, options).format(num);
	        };
	        return NumberFormatter;
	    }());
	    var /** @type {?} */ DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	    var /** @type {?} */ PATTERN_ALIASES = {
	        // Keys are quoted so they do not get renamed during closure compilation.
	        'yMMMdjms': datePartGetterFactory(combine([
	            digitCondition('year', 1),
	            nameCondition('month', 3),
	            digitCondition('day', 1),
	            digitCondition('hour', 1),
	            digitCondition('minute', 1),
	            digitCondition('second', 1),
	        ])),
	        'yMdjm': datePartGetterFactory(combine([
	            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	            digitCondition('hour', 1), digitCondition('minute', 1)
	        ])),
	        'yMMMMEEEEd': datePartGetterFactory(combine([
	            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	            digitCondition('day', 1)
	        ])),
	        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	    };
	    var /** @type {?} */ DATE_FORMATS = {
	        // Keys are quoted so they do not get renamed.
	        'yyyy': datePartGetterFactory(digitCondition('year', 4)),
	        'yy': datePartGetterFactory(digitCondition('year', 2)),
	        'y': datePartGetterFactory(digitCondition('year', 1)),
	        'MMMM': datePartGetterFactory(nameCondition('month', 4)),
	        'MMM': datePartGetterFactory(nameCondition('month', 3)),
	        'MM': datePartGetterFactory(digitCondition('month', 2)),
	        'M': datePartGetterFactory(digitCondition('month', 1)),
	        'LLLL': datePartGetterFactory(nameCondition('month', 4)),
	        'L': datePartGetterFactory(nameCondition('month', 1)),
	        'dd': datePartGetterFactory(digitCondition('day', 2)),
	        'd': datePartGetterFactory(digitCondition('day', 1)),
	        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'jj': datePartGetterFactory(digitCondition('hour', 2)),
	        'j': datePartGetterFactory(digitCondition('hour', 1)),
	        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	        'm': datePartGetterFactory(digitCondition('minute', 1)),
	        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	        's': datePartGetterFactory(digitCondition('second', 1)),
	        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	        // we can be just safely rely on using `sss` since we currently don't support single or two digit
	        // fractions
	        'sss': datePartGetterFactory(digitCondition('second', 3)),
	        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
	        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
	        'EE': datePartGetterFactory(nameCondition('weekday', 2)),
	        'E': datePartGetterFactory(nameCondition('weekday', 1)),
	        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        'Z': timeZoneGetter('short'),
	        'z': timeZoneGetter('long'),
	        'ww': datePartGetterFactory({}),
	        // first Thursday of the year. not support ?
	        'w': datePartGetterFactory({}),
	        // of the year not support ?
	        'G': datePartGetterFactory(nameCondition('era', 1)),
	        'GG': datePartGetterFactory(nameCondition('era', 2)),
	        'GGG': datePartGetterFactory(nameCondition('era', 3)),
	        'GGGG': datePartGetterFactory(nameCondition('era', 4))
	    };
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function digitModifier(inner) {
	        return function (date, locale) {
	            var /** @type {?} */ result = inner(date, locale);
	            return result.length == 1 ? '0' + result : result;
	        };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourClockExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	    }
	    /**
	     * @param {?} inner
	     * @return {?}
	     */
	    function hourExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	    }
	    /**
	     * @param {?} date
	     * @param {?} locale
	     * @param {?} options
	     * @return {?}
	     */
	    function intlDateFormat(date, locale, options) {
	        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	    }
	    /**
	     * @param {?} timezone
	     * @return {?}
	     */
	    function timeZoneGetter(timezone) {
	        // To workaround `Intl` API restriction for single timezone let format with 24 hours
	        var /** @type {?} */ options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	        return function (date, locale) {
	            var /** @type {?} */ result = intlDateFormat(date, locale, options);
	            // Then extract first 3 letters that related to hours
	            return result ? result.substring(3) : '';
	        };
	    }
	    /**
	     * @param {?} options
	     * @param {?} value
	     * @return {?}
	     */
	    function hour12Modify(options, value) {
	        options.hour12 = value;
	        return options;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function digitCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        result[prop] = len === 2 ? '2-digit' : 'numeric';
	        return result;
	    }
	    /**
	     * @param {?} prop
	     * @param {?} len
	     * @return {?}
	     */
	    function nameCondition(prop, len) {
	        var /** @type {?} */ result = {};
	        if (len < 4) {
	            result[prop] = len > 1 ? 'short' : 'narrow';
	        }
	        else {
	            result[prop] = 'long';
	        }
	        return result;
	    }
	    /**
	     * @param {?} options
	     * @return {?}
	     */
	    function combine(options) {
	        return (_a = ((Object))).assign.apply(_a, [{}].concat(options));
	        var _a;
	    }
	    /**
	     * @param {?} ret
	     * @return {?}
	     */
	    function datePartGetterFactory(ret) {
	        return function (date, locale) { return intlDateFormat(date, locale, ret); };
	    }
	    var /** @type {?} */ DATE_FORMATTER_CACHE = new Map();
	    /**
	     * @param {?} format
	     * @param {?} date
	     * @param {?} locale
	     * @return {?}
	     */
	    function dateFormatter(format, date, locale) {
	        var /** @type {?} */ fn = PATTERN_ALIASES[format];
	        if (fn)
	            return fn(date, locale);
	        var /** @type {?} */ cacheKey = format;
	        var /** @type {?} */ parts = DATE_FORMATTER_CACHE.get(cacheKey);
	        if (!parts) {
	            parts = [];
	            var /** @type {?} */ match = void 0;
	            DATE_FORMATS_SPLIT.exec(format);
	            while (format) {
	                match = DATE_FORMATS_SPLIT.exec(format);
	                if (match) {
	                    parts = parts.concat(match.slice(1));
	                    format = parts.pop();
	                }
	                else {
	                    parts.push(format);
	                    format = null;
	                }
	            }
	            DATE_FORMATTER_CACHE.set(cacheKey, parts);
	        }
	        return parts.reduce(function (text, part) {
	            var /** @type {?} */ fn = DATE_FORMATS[part];
	            return text + (fn ? fn(date, locale) : partToTime(part));
	        }, '');
	    }
	    /**
	     * @param {?} part
	     * @return {?}
	     */
	    function partToTime(part) {
	        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    }
	    var DateFormatter = (function () {
	        function DateFormatter() {
	        }
	        /**
	         * @param {?} date
	         * @param {?} locale
	         * @param {?} pattern
	         * @return {?}
	         */
	        DateFormatter.format = function (date, locale, pattern) {
	            return dateFormatter(pattern, date, locale);
	        };
	        return DateFormatter;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a date according to locale rules.
	     * \@howToUse `date_expression | date[:format]`
	     * \@description
	     *
	     * Where:
	     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	     * (https://www.w3.org/TR/NOTE-datetime).
	     * - `format` indicates which date/time components to include. The format can be predefined as
	     *   shown below or custom as shown in the table.
	     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	     *
	     *
	     *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	     *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	     *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	     *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	     *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	     *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	     *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	     *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	     *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	     *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	     *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	     *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	     *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	     *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	     *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	     *
	     * In javascript, only the components specified will be respected (not the ordering,
	     * punctuations, ...) and details of the formatting will be dependent on the locale.
	     *
	     * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	     *
	     * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	     * applied and the formatted text will have the same day, month and year of the expression.
	     *
	     * WARNINGS:
	     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	     *   Instead users should treat the date as an immutable object and change the reference when the
	     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	     *   which would be an expensive operation).
	     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	     *   browsers.
	     *
	     * ### Examples
	     *
	     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	     * in the _local_ time and locale is 'en-US':
	     *
	     * ```
	     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	     *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	     * ```
	     *
	     * {\@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	     *
	     * \@stable
	     */
	    var DatePipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DatePipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} pattern
	         * @return {?}
	         */
	        DatePipe.prototype.transform = function (value, pattern) {
	            if (pattern === void 0) { pattern = 'mediumDate'; }
	            var /** @type {?} */ date;
	            if (isBlank$1(value))
	                return null;
	            if (typeof value === 'string') {
	                value = value.trim();
	            }
	            if (isDate(value)) {
	                date = value;
	            }
	            else if (NumberWrapper.isNumeric(value)) {
	                date = new Date(parseFloat(value));
	            }
	            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	                /**
	                * For ISO Strings without time the day, month and year must be extracted from the ISO String
	                * before Date creation to avoid time offset and errors in the new Date.
	                * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	                * date, some browsers (e.g. IE 9) will throw an invalid Date error
	                * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	                * is applied
	                * Note: ISO months are 0 for January, 1 for February, ...
	                */
	                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	                date = new Date(y, m - 1, d);
	            }
	            else {
	                date = new Date(value);
	            }
	            if (!isDate(date)) {
	                throw new InvalidPipeArgumentError(DatePipe, value);
	            }
	            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	        };
	        /** @internal */
	        DatePipe._ALIASES = {
	            'medium': 'yMMMdjms',
	            'short': 'yMdjm',
	            'fullDate': 'yMMMMEEEEd',
	            'longDate': 'yMMMMd',
	            'mediumDate': 'yMMMd',
	            'shortDate': 'yMd',
	            'mediumTime': 'jms',
	            'shortTime': 'jm'
	        };
	        DatePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	        ];
	        /** @nocollapse */
	        DatePipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DatePipe;
	    }());
	    /**
	     * @param {?} obj
	     * @return {?}
	     */
	    function isBlank$1(obj) {
	        return obj == null || obj === '';
	    }

	    var /** @type {?} */ _INTERPOLATION_REGEXP = /#/g;
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	     * \@howToUse `expression | i18nPlural:mapping`
	     * \@description
	     *
	     *  Where:
	     *  - `expression` is a number.
	     *  - `mapping` is an object that mimics the ICU format, see
	     *    http://userguide.icu-project.org/formatparse/messages
	     *
	     *  ## Example
	     *
	     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	     *
	     * \@experimental
	     */
	    var I18nPluralPipe = (function () {
	        /**
	         * @param {?} _localization
	         */
	        function I18nPluralPipe(_localization) {
	            this._localization = _localization;
	        }
	        /**
	         * @param {?} value
	         * @param {?} pluralMap
	         * @return {?}
	         */
	        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	            if (value == null)
	                return '';
	            if (typeof pluralMap !== 'object' || pluralMap === null) {
	                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
	            }
	            var /** @type {?} */ key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	        };
	        I18nPluralPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nPluralPipe.ctorParameters = function () { return [
	            { type: NgLocalization, },
	        ]; };
	        return I18nPluralPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Generic selector that displays the string that matches the current value.
	     * \@howToUse `expression | i18nSelect:mapping`
	     * \@description
	     *
	     *  Where `mapping` is an object that indicates the text that should be displayed
	     *  for different values of the provided `expression`.
	     *  If none of the keys of the mapping match the value of the `expression`, then the content
	     *  of the `other` key is returned when present, otherwise an empty string is returned.
	     *
	     *  ## Example
	     *
	     * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	     *
	     *  \@experimental
	     */
	    var I18nSelectPipe = (function () {
	        function I18nSelectPipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} mapping
	         * @return {?}
	         */
	        I18nSelectPipe.prototype.transform = function (value, mapping) {
	            if (value == null)
	                return '';
	            if (typeof mapping !== 'object' || typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
	            }
	            if (mapping.hasOwnProperty(value)) {
	                return mapping[value];
	            }
	            if (mapping.hasOwnProperty('other')) {
	                return mapping['other'];
	            }
	            return '';
	        };
	        I18nSelectPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nSelectPipe.ctorParameters = function () { return []; };
	        return I18nSelectPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Converts value into JSON string.
	     * \@howToUse `expression | json`
	     * \@description
	     *
	     * Converts value into string using `JSON.stringify`. Useful for debugging.
	     *
	     * ### Example
	     * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	     *
	     * \@stable
	     */
	    var JsonPipe = (function () {
	        function JsonPipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	        JsonPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	        ];
	        /** @nocollapse */
	        JsonPipe.ctorParameters = function () { return []; };
	        return JsonPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Transforms string to lowercase.
	     * \@howToUse `expression | lowercase`
	     * \@description
	     *
	     * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * \@stable
	     */
	    var LowerCasePipe = (function () {
	        function LowerCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        LowerCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(LowerCasePipe, value);
	            }
	            return value.toLowerCase();
	        };
	        LowerCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	        ];
	        /** @nocollapse */
	        LowerCasePipe.ctorParameters = function () { return []; };
	        return LowerCasePipe;
	    }());

	    var /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	    /**
	     * @param {?} pipe
	     * @param {?} locale
	     * @param {?} value
	     * @param {?} style
	     * @param {?} digits
	     * @param {?=} currency
	     * @param {?=} currencyAsSymbol
	     * @return {?}
	     */
	    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (value == null)
	            return null;
	        // Convert strings to numbers
	        value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
	        if (typeof value !== 'number') {
	            throw new InvalidPipeArgumentError(pipe, value);
	        }
	        var /** @type {?} */ minInt;
	        var /** @type {?} */ minFraction;
	        var /** @type {?} */ maxFraction;
	        if (style !== NumberFormatStyle.Currency) {
	            // rely on Intl default for currency
	            minInt = 1;
	            minFraction = 0;
	            maxFraction = 3;
	        }
	        if (digits) {
	            var /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digits + " is not a valid digit info for number pipes");
	            }
	            if (parts[1] != null) {
	                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (parts[3] != null) {
	                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (parts[5] != null) {
	                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return NumberFormatter.format(/** @type {?} */ (value), locale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol,
	        });
	    }
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number according to locale rules.
	     * \@howToUse `number_expression | number[:digitInfo]`
	     *
	     * Formats a number as text. Group sizing and separator and other locale-specific
	     * configurations are based on the active locale.
	     *
	     * where `expression` is a number:
	     *  - `digitInfo` is a `string` which has a following format: <br>
	     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	     *
	     * For more information on the acceptable range for each of these numbers and other
	     * details see your native internationalization library.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	     *
	     * \@stable
	     */
	    var DecimalPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function DecimalPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        DecimalPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	        };
	        DecimalPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	        ];
	        /** @nocollapse */
	        DecimalPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return DecimalPipe;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number as a percentage according to locale rules.
	     * \@howToUse `number_expression | percent[:digitInfo]`
	     *
	     * \@description
	     *
	     * Formats a number as percentage.
	     *
	     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	     *
	     * \@stable
	     */
	    var PercentPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function PercentPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} digits
	         * @return {?}
	         */
	        PercentPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	        };
	        PercentPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	        ];
	        /** @nocollapse */
	        PercentPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return PercentPipe;
	    }());
	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Formats a number as currency using locale rules.
	     * \@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	     * \@description
	     *
	     * Use `currency` to format a number as currency.
	     *
	     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	     *    as `USD` for the US dollar and `EUR` for the euro.
	     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	     *   - `true`: use symbol (e.g. `$`).
	     *   - `false`(default): use code (e.g. `USD`).
	     * - `digitInfo` See {\@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {\@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	     *
	     * \@stable
	     */
	    var CurrencyPipe = (function () {
	        /**
	         * @param {?} _locale
	         */
	        function CurrencyPipe(_locale) {
	            this._locale = _locale;
	        }
	        /**
	         * @param {?} value
	         * @param {?=} currencyCode
	         * @param {?=} symbolDisplay
	         * @param {?=} digits
	         * @return {?}
	         */
	        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	            if (currencyCode === void 0) { currencyCode = 'USD'; }
	            if (symbolDisplay === void 0) { symbolDisplay = false; }
	            if (digits === void 0) { digits = null; }
	            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	        };
	        CurrencyPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	        ];
	        /** @nocollapse */
	        CurrencyPipe.ctorParameters = function () { return [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ]; };
	        return CurrencyPipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	     * \@howToUse `array_or_string_expression | slice:start[:end]`
	     * \@description
	     *
	     * Where the input expression is a `List` or `String`, and:
	     * - `start`: The starting index of the subset to return.
	     *   - **a positive integer**: return the item at `start` index and all items after
	     *     in the list or string expression.
	     *   - **a negative integer**: return the item at `start` index from the end and all items after
	     *     in the list or string expression.
	     *   - **if positive and greater than the size of the expression**: return an empty list or string.
	     *   - **if negative and greater than the size of the expression**: return entire list or string.
	     * - `end`: The ending index of the subset to return.
	     *   - **omitted**: return all items until the end.
	     *   - **if positive**: return all items before `end` index of the list or string.
	     *   - **if negative**: return all items before `end` index from the end of the list or string.
	     *
	     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	     * and `String.prototype.slice()`.
	     *
	     * When operating on a [List], the returned list is always a copy even when all
	     * the elements are being returned.
	     *
	     * When operating on a blank value, the pipe returns the blank value.
	     *
	     * ## List Example
	     *
	     * This `ngFor` example:
	     *
	     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	     *
	     * produces the following:
	     *
	     *     <li>b</li>
	     *     <li>c</li>
	     *
	     * ## String Examples
	     *
	     * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	     *
	     * \@stable
	     */
	    var SlicePipe = (function () {
	        function SlicePipe() {
	        }
	        /**
	         * @param {?} value
	         * @param {?} start
	         * @param {?=} end
	         * @return {?}
	         */
	        SlicePipe.prototype.transform = function (value, start, end) {
	            if (value == null)
	                return value;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(SlicePipe, value);
	            }
	            return value.slice(start, end);
	        };
	        /**
	         * @param {?} obj
	         * @return {?}
	         */
	        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	        SlicePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	        ];
	        /** @nocollapse */
	        SlicePipe.ctorParameters = function () { return []; };
	        return SlicePipe;
	    }());

	    /**
	     * \@ngModule CommonModule
	     * \@whatItDoes Transforms string to uppercase.
	     * \@howToUse `expression | uppercase`
	     * \@description
	     *
	     * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
	     *
	     * ### Example
	     *
	     * {\@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * \@stable
	     */
	    var UpperCasePipe = (function () {
	        function UpperCasePipe() {
	        }
	        /**
	         * @param {?} value
	         * @return {?}
	         */
	        UpperCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(UpperCasePipe, value);
	            }
	            return value.toUpperCase();
	        };
	        UpperCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	        ];
	        /** @nocollapse */
	        UpperCasePipe.ctorParameters = function () { return []; };
	        return UpperCasePipe;
	    }());

	    /**
	     * A collection of Angular pipes that are likely to be used in each and every application.
	     */
	    var /** @type {?} */ COMMON_PIPES = [
	        AsyncPipe,
	        UpperCasePipe,
	        LowerCasePipe,
	        JsonPipe,
	        SlicePipe,
	        DecimalPipe,
	        PercentPipe,
	        CurrencyPipe,
	        DatePipe,
	        I18nPluralPipe,
	        I18nSelectPipe,
	    ];

	    /**
	     * The module that includes all the basic Angular directives like {\@link NgIf}, {\@link NgFor}, ...
	     *
	     * \@stable
	     */
	    var CommonModule = (function () {
	        function CommonModule() {
	        }
	        CommonModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        providers: [
	                            { provide: NgLocalization, useClass: NgLocaleLocalization },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        CommonModule.ctorParameters = function () { return []; };
	        return CommonModule;
	    }());

	    /**
	     * @stable
	     */
	    var /** @type {?} */ VERSION = new _angular_core.Version('2.4.5');

	    exports.NgLocalization = NgLocalization;
	    exports.CommonModule = CommonModule;
	    exports.NgClass = NgClass;
	    exports.NgFor = NgFor;
	    exports.NgIf = NgIf;
	    exports.NgPlural = NgPlural;
	    exports.NgPluralCase = NgPluralCase;
	    exports.NgStyle = NgStyle;
	    exports.NgSwitch = NgSwitch;
	    exports.NgSwitchCase = NgSwitchCase;
	    exports.NgSwitchDefault = NgSwitchDefault;
	    exports.NgTemplateOutlet = NgTemplateOutlet;
	    exports.AsyncPipe = AsyncPipe;
	    exports.DatePipe = DatePipe;
	    exports.I18nPluralPipe = I18nPluralPipe;
	    exports.I18nSelectPipe = I18nSelectPipe;
	    exports.JsonPipe = JsonPipe;
	    exports.LowerCasePipe = LowerCasePipe;
	    exports.CurrencyPipe = CurrencyPipe;
	    exports.DecimalPipe = DecimalPipe;
	    exports.PercentPipe = PercentPipe;
	    exports.SlicePipe = SlicePipe;
	    exports.UpperCasePipe = UpperCasePipe;
	    exports.VERSION = VERSION;
	    exports.Version = _angular_core.Version;
	    exports.PlatformLocation = PlatformLocation;
	    exports.LocationStrategy = LocationStrategy;
	    exports.APP_BASE_HREF = APP_BASE_HREF;
	    exports.HashLocationStrategy = HashLocationStrategy;
	    exports.PathLocationStrategy = PathLocationStrategy;
	    exports.Location = Location;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var core_1 = __webpack_require__(86);
	var platform_browser_1 = __webpack_require__(104);
	var app_component_1 = __webpack_require__(107);
	var subcomponent_component_1 = __webpack_require__(109);
	var sample_service_1 = __webpack_require__(108);
	var AppModule = (function () {
	    function AppModule() {
	    }
	    return AppModule;
	}());
	AppModule = __decorate([
	    core_1.NgModule({
	        imports: [platform_browser_1.BrowserModule],
	        declarations: [
	            app_component_1.AppComponent,
	            subcomponent_component_1.SubComponent
	        ],
	        providers: [sample_service_1.MyService],
	        bootstrap: [app_component_1.AppComponent]
	    })
	], AppModule);
	exports.AppModule = AppModule;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(86);
	var sample_service_1 = __webpack_require__(108);
	var AppComponent = (function () {
	    function AppComponent(myService) {
	        this.serviceStatus = myService.getMessage();
	        this.appStatus = 'Application is working.';
	    }
	    return AppComponent;
	}());
	AppComponent = __decorate([
	    core_1.Component({
	        selector: 'my-app',
	        template: "\n    <ul>\n      <li>{{ appStatus }}</li>\n      <li>{{ serviceStatus }}</li>\n      <sub-component></sub-component>\n    </ul>\n  ",
	    }),
	    __metadata("design:paramtypes", [sample_service_1.MyService])
	], AppComponent);
	exports.AppComponent = AppComponent;


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(86);
	var MyService = (function () {
	    function MyService() {
	        this.message = "Services are working";
	    }
	    MyService.prototype.getMessage = function () {
	        return this.message;
	    };
	    return MyService;
	}());
	MyService = __decorate([
	    core_1.Injectable(),
	    __metadata("design:paramtypes", [])
	], MyService);
	exports.MyService = MyService;


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(86);
	var SubComponent = (function () {
	    function SubComponent() {
	    }
	    return SubComponent;
	}());
	SubComponent = __decorate([
	    core_1.Component({
	        selector: 'sub-component',
	        template: "\n    <li>Subcomponent works.</li>\n  "
	    }),
	    __metadata("design:paramtypes", [])
	], SubComponent);
	exports.SubComponent = SubComponent;


/***/ }
/******/ ]);